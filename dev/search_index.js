var documenterSearchIndex = {"docs":
[{"location":"api/quick-reference/function-index/#Function-Index","page":"Function Index","title":"Function Index","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Alphabetical listing of all Mycelia functions with brief descriptions and links to detailed documentation.","category":"page"},{"location":"api/quick-reference/function-index/#A","page":"Function Index","title":"A","text":"","category":"section"},{"location":"api/quick-reference/function-index/#add_sequencing_errors-*(planned)*","page":"Function Index","title":"add_sequencing_errors (planned)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Add realistic sequencing errors to simulated reads.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Data Simulation  \nUsage: add_sequencing_errors(reads, error_rate=0.01)\nSee: Data Acquisition","category":"page"},{"location":"api/quick-reference/function-index/#[analyze_fastq_quality](@ref)","page":"Function Index","title":"analyze_fastq_quality","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Comprehensive quality analysis of FASTQ files.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Quality Control\nUsage: analyze_fastq_quality(\"reads.fastq\")\nSee: Quality Control","category":"page"},{"location":"api/quick-reference/function-index/#analyze_functional_annotations-*(planned)*","page":"Function Index","title":"analyze_functional_annotations (planned)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Analyze functional annotation categories and distributions.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Gene Annotation\nUsage: analyze_functional_annotations(\"annotations.gff3\")\nSee: Gene Annotation","category":"page"},{"location":"api/quick-reference/function-index/#analyze_kmer_connectivity-*(planned)*","page":"Function Index","title":"analyze_kmer_connectivity (planned)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Analyze connectivity patterns in k-mer graphs.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: analyze_kmer_connectivity(kmer_graph)\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#[analyze_spectrum_peaks](@ref)","page":"Function Index","title":"analyze_spectrum_peaks","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Identify and characterize peaks in k-mer frequency spectra.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: analyze_spectrum_peaks(spectrum)\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#[annotate_functions](@ref)","page":"Function Index","title":"annotate_functions","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Assign functional annotations to predicted genes.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Gene Annotation\nUsage: annotate_functions(proteins, database=\"uniprot\")\nSee: Gene Annotation","category":"page"},{"location":"api/quick-reference/function-index/#[assemble_genome](@ref)","page":"Function Index","title":"assemble_genome","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Main genome assembly function supporting multiple assemblers.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Genome Assembly\nUsage: Mycelia.assemble_genome(\"reads.fastq\", assembler=\"hifiasm\")\nSee: Genome Assembly","category":"page"},{"location":"api/quick-reference/function-index/#[assess_assembly_readiness](@ref)","page":"Function Index","title":"assess_assembly_readiness","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Evaluate if sequencing data is suitable for genome assembly.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Quality Control\nUsage: assess_assembly_readiness(\"reads.fastq\")\nSee: Quality Control","category":"page"},{"location":"api/quick-reference/function-index/#B","page":"Function Index","title":"B","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[build_kmer_graph](@ref)","page":"Function Index","title":"build_kmer_graph","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Construct k-mer overlap graphs from sequences.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: build_kmer_graph(sequences, k=31)\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#[build_pangenome](@ref)","page":"Function Index","title":"build_pangenome","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Construct pangenome from multiple genome assemblies.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Comparative Genomics\nUsage: build_pangenome(genome_list, threshold=0.95)\nSee: Comparative Genomics","category":"page"},{"location":"api/quick-reference/function-index/#[build_phylogenetic_tree](@ref)","page":"Function Index","title":"build_phylogenetic_tree","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Construct phylogenetic trees from sequence alignments.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Comparative Genomics\nUsage: build_phylogenetic_tree(alignment, method=\"ml\")\nSee: Comparative Genomics","category":"page"},{"location":"api/quick-reference/function-index/#C","page":"Function Index","title":"C","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[calculate_assembly_stats](@ref)","page":"Function Index","title":"calculate_assembly_stats","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Calculate standard assembly quality metrics (N50, L50, etc.).","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Assembly Validation\nUsage: calculate_assembly_stats(\"contigs.fasta\")\nSee: Assembly Validation","category":"page"},{"location":"api/quick-reference/function-index/#[calculate_codon_usage](@ref)","page":"Function Index","title":"calculate_codon_usage","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Analyze codon usage patterns in coding sequences.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: calculate_codon_usage(\"cds.fasta\", genetic_code=\"standard\")\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#[calculate_gc_content](@ref)","page":"Function Index","title":"calculate_gc_content","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Calculate GC content for sequences or sequence collections.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: calculate_gc_content(\"sequences.fasta\")\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#[calculate_genome_complexity](@ref)","page":"Function Index","title":"calculate_genome_complexity","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Assess genome complexity using k-mer diversity metrics.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: calculate_genome_complexity(kmer_counts)\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#[calculate_synteny](@ref)","page":"Function Index","title":"calculate_synteny","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Identify syntenic regions between genomes.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Comparative Genomics\nUsage: calculate_synteny(genome1, genome2)\nSee: Comparative Genomics","category":"page"},{"location":"api/quick-reference/function-index/#[compare_genomes](@ref)","page":"Function Index","title":"compare_genomes","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Comprehensive pairwise genome comparison.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Comparative Genomics\nUsage: compare_genomes(genome1, genome2, method=\"synteny\")\nSee: Comparative Genomics","category":"page"},{"location":"api/quick-reference/function-index/#[construct_phylogeny](@ref)","page":"Function Index","title":"construct_phylogeny","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"High-level phylogenetic tree construction interface.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Comparative Genomics\nUsage: construct_phylogeny(core_genes, method=\"ml\")\nSee: Comparative Genomics","category":"page"},{"location":"api/quick-reference/function-index/#[count_kmers](@ref)","page":"Function Index","title":"count_kmers","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Count k-mers in sequences with various options and optimizations.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: count_kmers(\"reads.fastq\", k=21)\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#[create_quality_dashboard](@ref)","page":"Function Index","title":"create_quality_dashboard","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Generate interactive quality control dashboard.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Quality Control\nUsage: create_quality_dashboard(quality_data)\nSee: Quality Control","category":"page"},{"location":"api/quick-reference/function-index/#D","page":"Function Index","title":"D","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[detect_contamination_kmers](@ref)","page":"Function Index","title":"detect_contamination_kmers","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Identify contamination using k-mer profile analysis.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: detect_contamination_kmers(\"sample.fastq\", expected_profile)\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#[detect_host_contamination](@ref)","page":"Function Index","title":"detect_host_contamination","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Screen for host organism contamination in sequencing data.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Quality Control\nUsage: detect_host_contamination(\"reads.fastq\", \"host_genome.fasta\")\nSee: Quality Control","category":"page"},{"location":"api/quick-reference/function-index/#[download_genome_by_accession](@ref)","page":"Function Index","title":"download_genome_by_accession","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Download genome sequences from NCBI by accession number.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Data Acquisition\nUsage: Mycelia.download_genome_by_accession(\"NC_001422.1\")\nSee: Data Acquisition","category":"page"},{"location":"api/quick-reference/function-index/#E","page":"Function Index","title":"E","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[estimate_genome_size_from_kmers](@ref)","page":"Function Index","title":"estimate_genome_size_from_kmers","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Estimate genome size using k-mer frequency spectrum analysis.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: estimate_genome_size_from_kmers(kmer_counts)\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#[evaluate_assembly](@ref)","page":"Function Index","title":"evaluate_assembly","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Comprehensive assembly quality evaluation.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Assembly Validation\nUsage: evaluate_assembly(\"contigs.fasta\")\nSee: Assembly Validation","category":"page"},{"location":"api/quick-reference/function-index/#F","page":"Function Index","title":"F","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[fasta_list_to_dense_kmer_counts](@ref)","page":"Function Index","title":"fasta_list_to_dense_kmer_counts","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Generate dense k-mer count matrices from multiple FASTA files.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: fasta_list_to_dense_kmer_counts(file_list, k=21)\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#[fasta_list_to_sparse_kmer_counts](@ref)","page":"Function Index","title":"fasta_list_to_sparse_kmer_counts","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Generate sparse k-mer count matrices from multiple FASTA files.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: fasta_list_to_sparse_kmer_counts(file_list, k=21)\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#[filter_by_quality](@ref)","page":"Function Index","title":"filter_by_quality","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Filter sequencing reads based on quality score thresholds.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Quality Control\nUsage: filter_by_quality(\"reads.fastq\", min_quality=20)\nSee: Quality Control","category":"page"},{"location":"api/quick-reference/function-index/#G","page":"Function Index","title":"G","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[generate_quality_report](@ref)","page":"Function Index","title":"generate_quality_report","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Generate comprehensive quality control reports.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Quality Control\nUsage: generate_quality_report(\"reads.fastq\", format=\"html\")\nSee: Quality Control","category":"page"},{"location":"api/quick-reference/function-index/#H","page":"Function Index","title":"H","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[hifiasm_assembly](@ref)","page":"Function Index","title":"hifiasm_assembly","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Run hifiasm assembler with optimized parameters.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Genome Assembly\nUsage: hifiasm_assembly(\"hifi_reads.fastq\", output_dir=\"assembly\")\nSee: Genome Assembly","category":"page"},{"location":"api/quick-reference/function-index/#I","page":"Function Index","title":"I","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[identify_error_kmers](@ref)","page":"Function Index","title":"identify_error_kmers","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Identify k-mers likely to contain sequencing errors.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: identify_error_kmers(kmer_counts, min_coverage=3)\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#K","page":"Function Index","title":"K","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[kmer_frequency_spectrum](@ref)","page":"Function Index","title":"kmer_frequency_spectrum","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Generate k-mer frequency spectrum from k-mer counts.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Sequence Analysis\nUsage: kmer_frequency_spectrum(kmer_counts)\nSee: Sequence Analysis","category":"page"},{"location":"api/quick-reference/function-index/#N","page":"Function Index","title":"N","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[ncbi_genome_download_accession](@ref)","page":"Function Index","title":"ncbi_genome_download_accession","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Download complete genome assembly packages from NCBI.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Data Acquisition\nUsage: ncbi_genome_download_accession(\"GCF_000819615.1\")\nSee: Data Acquisition","category":"page"},{"location":"api/quick-reference/function-index/#P","page":"Function Index","title":"P","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[plot_assembly_stats](@ref)","page":"Function Index","title":"plot_assembly_stats","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Create visualizations of assembly quality metrics.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Visualization\nUsage: plot_assembly_stats(assembly_data)\nSee: Visualization","category":"page"},{"location":"api/quick-reference/function-index/#[plot_kmer_spectrum](@ref)","page":"Function Index","title":"plot_kmer_spectrum","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Visualize k-mer frequency spectra.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Visualization\nUsage: plot_kmer_spectrum(spectrum, log_scale=true)\nSee: Visualization","category":"page"},{"location":"api/quick-reference/function-index/#[plot_phylogenetic_tree](@ref)","page":"Function Index","title":"plot_phylogenetic_tree","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Create phylogenetic tree visualizations.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Visualization\nUsage: plot_phylogenetic_tree(tree, layout=\"circular\")\nSee: Visualization","category":"page"},{"location":"api/quick-reference/function-index/#[predict_genes](@ref)","page":"Function Index","title":"predict_genes","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Predict genes in genome assemblies.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Gene Annotation\nUsage: predict_genes(\"genome.fasta\", method=\"prodigal\")\nSee: Gene Annotation","category":"page"},{"location":"api/quick-reference/function-index/#R","page":"Function Index","title":"R","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[read_fasta](@ref)","page":"Function Index","title":"read_fasta","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Read sequences from FASTA files.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: File I/O\nUsage: read_fasta(\"sequences.fasta\")\nSee: FASTA/FASTQ Data Types","category":"page"},{"location":"api/quick-reference/function-index/#[remove_adapters](@ref)","page":"Function Index","title":"remove_adapters","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Remove adapter sequences from sequencing reads.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Quality Control\nUsage: remove_adapters(\"reads.fastq\", adapter_sequences)\nSee: Quality Control","category":"page"},{"location":"api/quick-reference/function-index/#S","page":"Function Index","title":"S","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[simulate_hifi_reads](@ref)","page":"Function Index","title":"simulate_hifi_reads","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Simulate PacBio HiFi sequencing reads.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Data Simulation\nUsage: simulate_hifi_reads(genome, coverage=30)\nSee: Data Acquisition","category":"page"},{"location":"api/quick-reference/function-index/#[simulate_random_genome](@ref)","page":"Function Index","title":"simulate_random_genome","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Generate random genome sequences for testing.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Data Simulation\nUsage: simulate_random_genome(length=100000, gc_content=0.45)\nSee: Data Acquisition","category":"page"},{"location":"api/quick-reference/function-index/#V","page":"Function Index","title":"V","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[validate_assembly](@ref)","page":"Function Index","title":"validate_assembly","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Validate genome assembly using multiple approaches.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: Assembly Validation\nUsage: validate_assembly(\"contigs.fasta\", \"reads.fastq\")\nSee: Assembly Validation","category":"page"},{"location":"api/quick-reference/function-index/#W","page":"Function Index","title":"W","text":"","category":"section"},{"location":"api/quick-reference/function-index/#[write_fastq](@ref)","page":"Function Index","title":"write_fastq","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Write sequences to FASTQ files.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Module: File I/O\nUsage: write_fastq(\"output.fastq\", sequences)\nSee: FASTA/FASTQ Data Types","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"","category":"page"},{"location":"api/quick-reference/function-index/#Function-Categories","page":"Function Index","title":"Function Categories","text":"","category":"section"},{"location":"api/quick-reference/function-index/#Data-Acquisition-(15-functions)","page":"Function Index","title":"Data Acquisition (15 functions)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Functions for downloading and simulating genomic data.","category":"page"},{"location":"api/quick-reference/function-index/#Quality-Control-(23-functions)","page":"Function Index","title":"Quality Control (23 functions)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Functions for assessing and improving data quality.","category":"page"},{"location":"api/quick-reference/function-index/#Sequence-Analysis-(31-functions)","page":"Function Index","title":"Sequence Analysis (31 functions)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Functions for k-mer analysis and sequence composition.","category":"page"},{"location":"api/quick-reference/function-index/#Genome-Assembly-(18-functions)","page":"Function Index","title":"Genome Assembly (18 functions)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Functions for assembling genomes from sequencing reads.","category":"page"},{"location":"api/quick-reference/function-index/#Assembly-Validation-(20-functions)","page":"Function Index","title":"Assembly Validation (20 functions)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Functions for validating and assessing assembly quality.","category":"page"},{"location":"api/quick-reference/function-index/#Gene-Annotation-(16-functions)","page":"Function Index","title":"Gene Annotation (16 functions)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Functions for predicting and annotating genes.","category":"page"},{"location":"api/quick-reference/function-index/#Comparative-Genomics-(22-functions)","page":"Function Index","title":"Comparative Genomics (22 functions)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Functions for comparing genomes and phylogenetic analysis.","category":"page"},{"location":"api/quick-reference/function-index/#Visualization-(28-functions)","page":"Function Index","title":"Visualization (28 functions)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Functions for creating plots and visualizations.","category":"page"},{"location":"api/quick-reference/function-index/#File-I/O-(12-functions)","page":"Function Index","title":"File I/O (12 functions)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Functions for reading and writing various file formats.","category":"page"},{"location":"api/quick-reference/function-index/#Utilities-(25-functions)","page":"Function Index","title":"Utilities (25 functions)","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Helper functions and utilities.","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"","category":"page"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Total: 210 documented functions","category":"page"},{"location":"api/quick-reference/function-index/#Search-Tips","page":"Function Index","title":"Search Tips","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"By workflow: Use the workflow-specific documentation pages\nBy keyword: Use your browser's search function (Ctrl/Cmd+F)\nBy similarity: Functions with similar names are usually related\nBy module: Functions are grouped by their primary use case","category":"page"},{"location":"api/quick-reference/function-index/#See-Also","page":"Function Index","title":"See Also","text":"","category":"section"},{"location":"api/quick-reference/function-index/","page":"Function Index","title":"Function Index","text":"Parameter Guide - Common parameters explained\nBasic Workflows - Function usage examples\nAdvanced Usage - Complex function combinations","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Tutorial-8:-Tool-Integration-and-Workflow-Management","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"This tutorial covers integration with external bioinformatics tools, workflow management, and creating comprehensive analysis pipelines.","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Learning-Objectives","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"By the end of this tutorial, you will understand:","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Integration with external bioinformatics tools\nWorkflow management and pipeline construction\nHPC job submission and resource management\nData management and cloud integration\nError handling and quality control in pipelines\nReproducible research practices","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Setup","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"import Pkg\nif isinteractive()\n    Pkg.activate(\"..\")\nend\n\nimport Test\nimport Mycelia\nimport FASTX\nimport Random\nimport Statistics\n\nRandom.seed!(42)","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-1:-External-Tool-Integration","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 1: External Tool Integration","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Modern bioinformatics relies on integration of multiple specialized tools. Understanding how to effectively combine tools is crucial for comprehensive analysis.","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"=== Tool Integration Tutorial ===\")\n\nprintln(\"Common Bioinformatics Tools:\")\nprintln(\"- Assembly: hifiasm, Canu, Flye\")\nprintln(\"- Annotation: Prodigal, Augustus, BRAKER\")\nprintln(\"- Alignment: BWA, minimap2, BLAST\")\nprintln(\"- Phylogenetics: IQ-TREE, RAxML, MrBayes\")\nprintln(\"- Visualization: Circos, IGV, Artemis\")\nprintln(\"- Quality Control: FastQC, Quast, BUSCO\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-2:-Bioconda-Integration","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 2: Bioconda Integration","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Bioconda provides a standardized way to install and manage bioinformatics software packages.","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== Bioconda Integration ===\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Environment-Management","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Environment Management","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Create and manage conda environments for different tools","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Environment Management ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement bioconda environment management","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Create tool-specific environments\nInstall packages with dependency resolution\nManage environment versions\nExport and reproduce environments","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Example environment specification","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"environment_spec = Dict(\n    \"name\" => \"mycelia-analysis\",\n    \"channels\" => [\"conda-forge\", \"bioconda\"],\n    \"dependencies\" => [\n        \"hifiasm\",\n        \"prodigal\",\n        \"blast\",\n        \"busco\",\n        \"iqtree\",\n        \"circos\"\n    ]\n)\n\nprintln(\"Environment Specification:\")\nfor (key, value) in environment_spec\n    println(\"  $key: $value\")\nend","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Tool-Installation-and-Configuration","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tool Installation and Configuration","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Install and configure external tools","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Tool Installation ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement automated tool installation","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Check tool availability\nInstall missing tools\nConfigure tool paths\nValidate tool functionality","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-3:-Workflow-Management","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 3: Workflow Management","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Create robust, reproducible workflows that integrate multiple tools","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== Workflow Management ===\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Pipeline-Architecture","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Pipeline Architecture","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Design modular, scalable analysis pipelines","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Pipeline Architecture ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement workflow architecture","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Modular task design\nDependency management\nResource allocation\nError handling and recovery","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Example workflow structure","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"workflow_steps = [\n    Dict(\"name\" => \"quality_control\", \"tool\" => \"fastqc\", \"input\" => \"reads.fastq\", \"output\" => \"qc_report\"),\n    Dict(\"name\" => \"assembly\", \"tool\" => \"hifiasm\", \"input\" => \"reads.fastq\", \"output\" => \"contigs.fasta\"),\n    Dict(\"name\" => \"annotation\", \"tool\" => \"prodigal\", \"input\" => \"contigs.fasta\", \"output\" => \"genes.gff\"),\n    Dict(\"name\" => \"validation\", \"tool\" => \"busco\", \"input\" => \"contigs.fasta\", \"output\" => \"busco_results\")\n]\n\nprintln(\"Workflow Steps:\")\nfor (i, step) in enumerate(workflow_steps)\n    println(\"  Step $i: $(step[\"name\"]) ($(step[\"tool\"]))\")\nend","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Dependency-Management","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Dependency Management","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Handle complex dependencies between analysis steps","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Dependency Management ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement dependency management","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Build dependency graphs\nTopological sorting\nParallel execution where possible\nHandle conditional dependencies","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-4:-HPC-Integration","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 4: HPC Integration","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Submit jobs to high-performance computing clusters","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== HPC Integration ===\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#SLURM-Integration","page":"Tutorial 8: Tool Integration and Workflow Management","title":"SLURM Integration","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Submit and manage SLURM jobs","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- SLURM Integration ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement SLURM integration","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Generate SLURM job scripts\nSubmit jobs with appropriate resources\nMonitor job status\nHandle job failures and resubmission","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Example SLURM job configuration","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"slurm_config = Dict(\n    \"job_name\" => \"mycelia_analysis\",\n    \"partition\" => \"compute\",\n    \"time\" => \"24:00:00\",\n    \"memory\" => \"64G\",\n    \"cpus\" => 16,\n    \"array\" => \"1-10\",\n    \"output\" => \"analysis_%A_%a.out\",\n    \"error\" => \"analysis_%A_%a.err\"\n)\n\nprintln(\"SLURM Configuration:\")\nfor (key, value) in slurm_config\n    println(\"  $key: $value\")\nend","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Resource-Management","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Resource Management","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Optimize resource usage for different analysis types","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Resource Management ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement resource management","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Estimate resource requirements\nDynamic resource allocation\nResource monitoring\nCost optimization","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-5:-Cloud-Integration","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 5: Cloud Integration","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Use cloud platforms for scalable analysis","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== Cloud Integration ===\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Cloud-Storage","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Cloud Storage","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Integrate with cloud storage services","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Cloud Storage ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement cloud storage integration","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Upload/download data to/from cloud\nManage cloud storage costs\nImplement data lifecycle policies\nEnsure data security and privacy","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Cloud-Computing","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Cloud Computing","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Use cloud computing resources","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Cloud Computing ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement cloud computing integration","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Launch cloud instances\nConfigure analysis environments\nMonitor resource usage\nOptimize costs","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-6:-Database-Integration","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 6: Database Integration","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Integrate with biological databases","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== Database Integration ===\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#NCBI-Integration","page":"Tutorial 8: Tool Integration and Workflow Management","title":"NCBI Integration","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Download and process data from NCBI","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- NCBI Integration ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement comprehensive NCBI integration","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Programmatic data download\nMetadata processing\nFormat conversion\nBatch processing","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Custom-Database-Integration","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Custom Database Integration","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Work with local and custom databases","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Custom Database Integration ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement custom database integration","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Database schema design\nData import/export\nQuery interfaces\nPerformance optimization","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-7:-Quality-Control-and-Validation","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 7: Quality Control and Validation","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Implement comprehensive quality control throughout workflows","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== Quality Control ===\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Automated-Quality-Checks","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Automated Quality Checks","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Implement automated quality control checkpoints","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Automated Quality Checks ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement automated QC","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Input data validation\nIntermediate result checking\nOutput quality assessment\nAutomated reporting","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Error-Handling","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Error Handling","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Robust error handling and recovery","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Error Handling ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement error handling","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Comprehensive error detection\nAutomatic error recovery\nError logging and reporting\nUser notification systems","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-8:-Reproducibility-and-Documentation","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 8: Reproducibility and Documentation","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Ensure analysis reproducibility","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== Reproducibility ===\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Version-Control","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Version Control","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Track software versions and parameters","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Version Control ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement version control","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Track software versions\nRecord analysis parameters\nVersion control for results\nReproducible environment creation","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Documentation-Generation","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Documentation Generation","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Automatic documentation of analysis workflows","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Documentation Generation ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement documentation generation","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Automatic workflow documentation\nParameter documentation\nResult interpretation guides\nMethod citations","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-9:-Performance-Optimization","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 9: Performance Optimization","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Optimize workflow performance","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== Performance Optimization ===\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Parallel-Processing","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Parallel Processing","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Implement parallel processing strategies","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Parallel Processing ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement parallel processing","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Task parallelization\nData parallelization\nPipeline parallelization\nLoad balancing","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Memory-Management","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Memory Management","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Optimize memory usage","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Memory Management ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement memory optimization","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Memory usage monitoring\nStreaming data processing\nMemory-efficient algorithms\nGarbage collection optimization","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-10:-User-Interface-and-Visualization","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 10: User Interface and Visualization","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Create user-friendly interfaces","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== User Interface ===\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Command-Line-Interface","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Command Line Interface","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Comprehensive CLI for workflow management","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Command Line Interface ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement comprehensive CLI","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Intuitive command structure\nInteractive configuration\nProgress reporting\nHelp and documentation","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Web-Interface","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Web Interface","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Web-based workflow management","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Web Interface ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement web interface","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Workflow configuration UI\nReal-time monitoring\nResult visualization\nUser management","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-11:-Testing-and-Validation","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 11: Testing and Validation","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Comprehensive testing strategies","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== Testing and Validation ===\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Unit-Testing","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Unit Testing","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Test individual components","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Unit Testing ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement unit testing","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Test individual functions\nMock external dependencies\nTest edge cases\nAutomated test execution","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Integration-Testing","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Integration Testing","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Test complete workflows","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Integration Testing ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement integration testing","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Test complete workflows\nTest with real data\nPerformance testing\nStress testing","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-12:-Deployment-and-Distribution","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 12: Deployment and Distribution","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Deploy workflows for production use","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== Deployment ===\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Container-Integration","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Container Integration","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Package workflows in containers","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Container Integration ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement container integration","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Create Docker containers\nSingularity integration\nContainer orchestration\nContainer registries","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Package-Distribution","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Package Distribution","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Distribute workflows as packages","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Package Distribution ---\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"TODO: Implement package distribution","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Package creation\nDependency management\nVersion management\nDistribution channels","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-13:-Case-Studies","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 13: Case Studies","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Real-world workflow examples","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== Case Studies ===\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Bacterial-Genome-Analysis","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Bacterial Genome Analysis","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Complete bacterial genome analysis pipeline","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Bacterial Genome Analysis ---\")\n\nprintln(\"Bacterial Genome Pipeline:\")\nprintln(\"1. Quality control (FastQC)\")\nprintln(\"2. Assembly (hifiasm)\")\nprintln(\"3. Assembly validation (QUAST, BUSCO)\")\nprintln(\"4. Gene prediction (Prodigal)\")\nprintln(\"5. Functional annotation (BLAST, eggNOG)\")\nprintln(\"6. Comparative analysis (ANI, phylogeny)\")\nprintln(\"7. Visualization (Circos, IGV)\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Viral-Genome-Analysis","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Viral Genome Analysis","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Viral genome analysis and classification","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Viral Genome Analysis ---\")\n\nprintln(\"Viral Genome Pipeline:\")\nprintln(\"1. Host depletion\")\nprintln(\"2. Viral read identification\")\nprintln(\"3. Assembly (SPAdes, Canu)\")\nprintln(\"4. Virus classification (BLAST, vContact)\")\nprintln(\"5. Gene prediction (Prodigal, GeneMarkS)\")\nprintln(\"6. Functional annotation\")\nprintln(\"7. Phylogenetic analysis\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Metagenome-Analysis","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Metagenome Analysis","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Metagenomic analysis pipeline","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"--- Metagenome Analysis ---\")\n\nprintln(\"Metagenome Pipeline:\")\nprintln(\"1. Quality control and trimming\")\nprintln(\"2. Host removal\")\nprintln(\"3. Assembly (MEGAHIT, metaSPAdes)\")\nprintln(\"4. Binning (MetaBAT, CONCOCT)\")\nprintln(\"5. Bin quality assessment (CheckM)\")\nprintln(\"6. Taxonomic classification\")\nprintln(\"7. Functional annotation\")\nprintln(\"8. Comparative analysis\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Part-14:-Best-Practices","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Part 14: Best Practices","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"Guidelines for effective tool integration","category":"page"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== Best Practices ===\")\n\nprintln(\"Workflow Design:\")\nprintln(\"- Start with simple, working pipelines\")\nprintln(\"- Use modular design for flexibility\")\nprintln(\"- Implement comprehensive error handling\")\nprintln(\"- Plan for scalability from the beginning\")\nprintln()\nprintln(\"Tool Integration:\")\nprintln(\"- Use standardized file formats\")\nprintln(\"- Validate tool outputs\")\nprintln(\"- Handle tool version differences\")\nprintln(\"- Document tool-specific requirements\")\nprintln()\nprintln(\"Resource Management:\")\nprintln(\"- Monitor resource usage\")\nprintln(\"- Optimize for your computing environment\")\nprintln(\"- Plan for data storage requirements\")\nprintln(\"- Consider cost implications\")\nprintln()\nprintln(\"Reproducibility:\")\nprintln(\"- Version control everything\")\nprintln(\"- Document all parameters\")\nprintln(\"- Use containerization when possible\")\nprintln(\"- Provide example datasets\")","category":"page"},{"location":"generated/tutorials/08_tool_integration/#Summary","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Summary","text":"","category":"section"},{"location":"generated/tutorials/08_tool_integration/","page":"Tutorial 8: Tool Integration and Workflow Management","title":"Tutorial 8: Tool Integration and Workflow Management","text":"println(\"\\n=== Tool Integration Summary ===\")\nprintln(\"✓ Understanding external tool integration strategies\")\nprintln(\"✓ Implementing bioconda environment management\")\nprintln(\"✓ Creating robust workflow architectures\")\nprintln(\"✓ Integrating with HPC and cloud platforms\")\nprintln(\"✓ Implementing quality control and validation\")\nprintln(\"✓ Ensuring reproducibility and documentation\")\nprintln(\"✓ Optimizing performance and resource usage\")\nprintln(\"✓ Creating user-friendly interfaces\")\nprintln(\"✓ Applying comprehensive testing strategies\")\nprintln(\"✓ Understanding deployment and distribution\")\n\nprintln(\"\\nCongratulations! You have completed all Mycelia tutorials.\")\nprintln(\"You now have a comprehensive understanding of:\")\nprintln(\"- Data acquisition and quality control\")\nprintln(\"- K-mer analysis and genome assembly\")\nprintln(\"- Assembly validation and gene annotation\")\nprintln(\"- Comparative genomics and tool integration\")\nprintln()\nprintln(\"Continue exploring the Mycelia package for advanced features\")\nprintln(\"and consider contributing to the project!\")\n\nnothing","category":"page"},{"location":"generated/tutorials/02_quality_control/#Tutorial-2:-Quality-Control-and-Preprocessing","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"","category":"section"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"This tutorial demonstrates how to assess and improve the quality of genomic data before analysis. Quality control is essential for ensuring reliable downstream results.","category":"page"},{"location":"generated/tutorials/02_quality_control/#Learning-Objectives","page":"Tutorial 2: Quality Control and Preprocessing","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"By the end of this tutorial, you will understand:","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"How to assess sequencing data quality using multiple metrics\nCommon quality issues and their biological implications\nPreprocessing techniques for improving data quality\nStatistical approaches for quality assessment\nBest practices for quality control in different analysis types","category":"page"},{"location":"generated/tutorials/02_quality_control/#Setup","page":"Tutorial 2: Quality Control and Preprocessing","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"import Pkg\nif isinteractive()\n    Pkg.activate(\"..\")\nend\n\nimport Test\nimport Mycelia\nimport FASTX\nimport Statistics\nimport Random\n\nRandom.seed!(42)","category":"page"},{"location":"generated/tutorials/02_quality_control/#Part-1:-Understanding-Quality-Metrics","page":"Tutorial 2: Quality Control and Preprocessing","title":"Part 1: Understanding Quality Metrics","text":"","category":"section"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Quality assessment involves multiple metrics that capture different aspects of data quality. Understanding these metrics helps identify problems and guide preprocessing decisions.","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"println(\"=== Quality Control Tutorial ===\")","category":"page"},{"location":"generated/tutorials/02_quality_control/#Phred-Quality-Scores","page":"Tutorial 2: Quality Control and Preprocessing","title":"Phred Quality Scores","text":"","category":"section"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Phred scores represent the probability of base-calling errors:","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Q10 = 10% error rate (1 in 10 bases wrong)\nQ20 = 1% error rate (1 in 100 bases wrong)\nQ30 = 0.1% error rate (1 in 1000 bases wrong)\nQ40 = 0.01% error rate (1 in 10,000 bases wrong)","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"println(\"Quality Score Interpretation:\")\nprintln(\"Q10: 10% error rate (poor quality)\")\nprintln(\"Q20: 1% error rate (acceptable)\")\nprintln(\"Q30: 0.1% error rate (good quality)\")\nprintln(\"Q40: 0.01% error rate (excellent quality)\")","category":"page"},{"location":"generated/tutorials/02_quality_control/#Sequence-Composition","page":"Tutorial 2: Quality Control and Preprocessing","title":"Sequence Composition","text":"","category":"section"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Analyze nucleotide composition for bias detection","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Generate test sequences with different quality characteristics","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"sequences = [\n    (\"High Quality\", Mycelia.random_fasta_record(moltype=:DNA, seed=1, L=1000)),\n    (\"AT-Rich\", Mycelia.random_fasta_record(moltype=:DNA, seed=2, L=1000)),  ## TODO: Add AT bias\n    (\"GC-Rich\", Mycelia.random_fasta_record(moltype=:DNA, seed=3, L=1000)),  ## TODO: Add GC bias\n]\n\nfor (name, seq) in sequences\n    seq_str = String(FASTX.sequence(seq))\n\n    # Calculate composition\n    a_count = count(c -> c == 'A', seq_str)\n    t_count = count(c -> c == 'T', seq_str)\n    g_count = count(c -> c == 'G', seq_str)\n    c_count = count(c -> c == 'C', seq_str)\n\n    at_content = (a_count + t_count) / length(seq_str)\n    gc_content = (g_count + c_count) / length(seq_str)\n\n    println(\"\\n$name Composition:\")\n    println(\"  AT content: $(round(at_content*100, digits=1))%\")\n    println(\"  GC content: $(round(gc_content*100, digits=1))%\")\n    println(\"  Length: $(length(seq_str)) bp\")\nend","category":"page"},{"location":"generated/tutorials/02_quality_control/#Part-2:-Simulating-Quality-Issues","page":"Tutorial 2: Quality Control and Preprocessing","title":"Part 2: Simulating Quality Issues","text":"","category":"section"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Create datasets with common quality problems to understand their impact","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"println(\"\\n=== Simulating Quality Issues ===\")","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"TODO: Implement functions to simulate:","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Adapter contamination\nQuality degradation at read ends\nPCR duplicates\nOverrepresented sequences\nCoverage bias","category":"page"},{"location":"generated/tutorials/02_quality_control/#Part-3:-Quality-Assessment-Tools","page":"Tutorial 2: Quality Control and Preprocessing","title":"Part 3: Quality Assessment Tools","text":"","category":"section"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Implement comprehensive quality assessment","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"println(\"\\n=== Quality Assessment ===\")","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"TODO: Implement quality assessment functions:","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Per-base quality scores\nPer-sequence quality scores\nGC content distribution\nSequence length distribution\nDuplication levels\nOverrepresented sequences","category":"page"},{"location":"generated/tutorials/02_quality_control/#Part-4:-Preprocessing-Techniques","page":"Tutorial 2: Quality Control and Preprocessing","title":"Part 4: Preprocessing Techniques","text":"","category":"section"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Apply preprocessing to improve data quality","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"println(\"\\n=== Preprocessing Techniques ===\")","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"TODO: Implement preprocessing functions:","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Quality trimming\nAdapter removal\nLength filtering\nComplexity filtering\nDuplicate removal","category":"page"},{"location":"generated/tutorials/02_quality_control/#Part-5:-Quality-Control-for-Different-Analysis-Types","page":"Tutorial 2: Quality Control and Preprocessing","title":"Part 5: Quality Control for Different Analysis Types","text":"","category":"section"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Different analyses have different quality requirements","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"println(\"\\n=== Analysis-Specific QC ===\")","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"TODO: Implement analysis-specific QC:","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Genome assembly QC\nVariant calling QC\nRNA-seq QC\nMetagenomics QC","category":"page"},{"location":"generated/tutorials/02_quality_control/#Part-6:-Quality-Control-Visualization","page":"Tutorial 2: Quality Control and Preprocessing","title":"Part 6: Quality Control Visualization","text":"","category":"section"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Create plots to visualize quality metrics","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"println(\"\\n=== Quality Visualization ===\")","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"TODO: Implement quality visualization:","category":"page"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"Quality score distributions\nPer-base quality plots\nGC content plots\nLength distribution plots","category":"page"},{"location":"generated/tutorials/02_quality_control/#Summary","page":"Tutorial 2: Quality Control and Preprocessing","title":"Summary","text":"","category":"section"},{"location":"generated/tutorials/02_quality_control/","page":"Tutorial 2: Quality Control and Preprocessing","title":"Tutorial 2: Quality Control and Preprocessing","text":"println(\"\\n=== Quality Control Summary ===\")\nprintln(\"✓ Understanding quality metrics and their biological implications\")\nprintln(\"✓ Identifying common quality issues in sequencing data\")\nprintln(\"✓ Applying appropriate preprocessing techniques\")\nprintln(\"✓ Tailoring quality control to specific analysis types\")\nprintln(\"✓ Visualizing quality metrics for assessment\")\n\nprintln(\"\\nNext: Tutorial 3 - K-mer Analysis and Feature Extraction\")\n\nnothing","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Viroid-Assembly-Workflow:-Quality-Aware-Rhizomorph-Assembly","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"This tutorial demonstrates the complete viroid assembly workflow implemented in Mycelia, showcasing quality-aware assembly using the Rhizomorph framework with Qualmer graphs.","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Overview","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Overview","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"This workflow demonstrates several cutting-edge bioinformatics concepts:","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Quality Propagation: Per-base PHRED scores maintained throughout assembly\nConsensus Quality Calculation: Multiple observations combined using weighted averages\nAdvanced Path-Finding Algorithms: Iterative Viterbi, probabilistic walks, heaviest path\nMulti-sequence Assembly: DNA, RNA, and amino acid sequence support\nFASTQ Output: Final assemblies preserve quality information for downstream analysis","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Scientific-Background","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Scientific Background","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Viroids are small, circular RNA molecules that infect plants and represent some of the smallest known pathogens. Their simple structure and short genomes (200-400 nucleotides) make them excellent models for demonstrating advanced assembly techniques.","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Traditional assembly methods lose quality information during graph simplification. Mycelia's Qualmer approach maintains and improves quality through consensus calculation, resulting in more accurate and informative assemblies.","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"using Pkg\nPkg.activate(\".\")\n\nimport Mycelia\nimport Statistics\n\nprintln(\"=== Viroid Assembly Workflow Tutorial ===\")\nprintln(\"Demonstrating quality-aware assembly with Rhizomorph Qualmer graphs\\n\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Step-1:-Understanding-Viroid-Species","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Step 1: Understanding Viroid Species","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Mycelia includes a comprehensive database of well-characterized viroid species.","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"## Step 1: Available Viroid Species\")\nspecies_list = Mycelia.get_viroid_species_list()\nprintln(\"Mycelia includes $(length(species_list)) well-characterized viroid species:\")\nfor (i, species) in enumerate(species_list[1:10])  # Show first 10\n    println(\"  $i. $species\")\nend\nif length(species_list) > 10\n    println(\"  ... and $(length(species_list) - 10) more species\")\nend","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Step-2:-Synthetic-Viroid-Data-Creation","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Step 2: Synthetic Viroid Data Creation","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"For this tutorial, we'll create realistic synthetic viroid sequences to demonstrate the assembly workflow without requiring network access.","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\n## Step 2: Creating Synthetic Viroid Data\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Create a synthetic viroid genome based on Potato spindle tuber viroid characteristics PSTVd is a well-studied viroid with ~359 nucleotides","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"synthetic_viroid_genome = \"\"\"\nGGAAACCTGGAGCGAACTGGATCCCCGCCTCCTTTTGTGGGCCTCCGGCGCTGTGAGCTCTCTACGACCCGCCCAGCCAG\nCACTCTTCGGGGGTCCTCCTCGCTGACTAACCCACTAGTGGTTCGGCCGACAACCCCTCCAACCAGTGACTTCTCCATCG\nCCACAAGGGTCGCCCACCTGAGCGATTTCGCGAAGTTGTCCCGGCGGCCTGGTACAAGATCGCTACATTCTGCCTAGTAA\nAGACAAGGACGCCGACACCAAATACCCGACCGCGGGGTTTGTGTGGGCCGGGTCCCTCTACAAGGTGGGATGGAGAAAGC\nCCAGAGGGGATCTAATGGAAGTGCGTGTAGGATCATTCGT\n\"\"\" |> x -> replace(x, '\\n' => \"\") |> x -> replace(x, ' ' => \"\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Create corresponding CDS and protein sequences","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"synthetic_cds = synthetic_viroid_genome[50:200]  # Simulate a CDS region\nsynthetic_protein = \"MKLVDSTFGKQILPNDYKTLLSYFKHDSGVTTDWLRQAELKGGTSASLKV\"\n\nprintln(\"Created synthetic viroid data:\")\nprintln(\"  Genome length: $(length(synthetic_viroid_genome)) nucleotides\")\nprintln(\"  CDS length: $(length(synthetic_cds)) nucleotides\")\nprintln(\"  Protein length: $(length(synthetic_protein)) amino acids\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Step-3:-Read-Simulation-with-Quality-Scores","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Step 3: Read Simulation with Quality Scores","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Generate realistic FASTQ reads with quality scores and sequencing errors.","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\n## Step 3: Simulating FASTQ Reads\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Simulate DNA reads from the viroid genome","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"dna_reads = Mycelia._simulate_fastq_reads_from_sequence(\n    synthetic_viroid_genome,\n    \"PSTV_synthetic\";\n    coverage = 15,           # 15x coverage\n    read_length = 75,        # 75bp reads (typical for modern sequencing)\n    error_rate = 0.01,       # 1% error rate\n    sequence_type = \"DNA\"\n)","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Simulate RNA reads from the CDS region","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"rna_sequence = replace(synthetic_cds, 'T' => 'U')  # Convert DNA to RNA\nrna_reads = Mycelia._simulate_fastq_reads_from_sequence(\n    rna_sequence,\n    \"PSTV_CDS_synthetic\";\n    coverage = 12,\n    read_length = 60,\n    error_rate = 0.015,      # Slightly higher error rate for RNA\n    sequence_type = \"RNA\"\n)","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Simulate protein reads (amino acid sequences with quality)","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"protein_reads = Mycelia._simulate_fastq_reads_from_sequence(\n    synthetic_protein,\n    \"PSTV_protein_synthetic\";\n    coverage = 8,\n    read_length = 25,        # Shorter reads for proteins\n    error_rate = 0.02,       # Higher error rate for protein sequencing\n    sequence_type = \"AA\"\n)\n\nprintln(\"Generated simulated reads:\")\nprintln(\"  DNA reads: $(length(dna_reads))\")\nprintln(\"  RNA reads: $(length(rna_reads))\")\nprintln(\"  Protein reads: $(length(protein_reads))\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Step-4:-Quality-Analysis","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Step 4: Quality Analysis","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Examine the quality scores in our simulated data.","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\n## Step 4: Quality Score Analysis\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Analyze quality scores from the first DNA read","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"first_read = dna_reads[1]\nsequence = String(Mycelia.FASTX.sequence(first_read))\nquality_scores = collect(Mycelia.FASTX.quality_scores(first_read))\n\nprintln(\"First DNA read analysis:\")\nprintln(\"  Read ID: $(Mycelia.FASTX.identifier(first_read))\")\nprintln(\"  Sequence: $(sequence)\")\nprintln(\"  Length: $(length(sequence))\")\nprintln(\"  Quality scores: $(quality_scores[1:min(10, end)])\")  # Show first 10\nprintln(\"  Mean quality: $(round(Statistics.mean(quality_scores), digits=2))\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Step-5:-Qualmer-Graph-Assembly","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Step 5: Qualmer Graph Assembly","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Perform quality-aware assembly using the advanced Qualmer algorithms.","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\n## Step 5: Quality-Aware Rhizomorph Assembly\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Configure assembly parameters","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"assembly_config = Mycelia.AssemblyConfig(\n    k = 15,                    # K-mer size optimized for viroid assembly\n    use_quality_scores = true, # Enable quality-aware assembly\n    bubble_resolution = true,  # Enable bubble detection and resolution\n    repeat_resolution = true,  # Enable repeat region handling\n    min_coverage = 2          # Minimum coverage for reliable k-mers\n)\n\nprintln(\"Assembly configuration:\")\nprintln(\"  K-mer size: $(assembly_config.k)\")\nprintln(\"  Quality scores enabled: $(assembly_config.use_quality_scores)\")\nprintln(\"  Bubble resolution: $(assembly_config.bubble_resolution)\")\nprintln(\"  Repeat resolution: $(assembly_config.repeat_resolution)\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Prepare observations for assembly","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"dna_observations = [(read, i) for (i, read) in enumerate(dna_reads)]\nrna_observations = [(read, i) for (i, read) in enumerate(rna_reads)]\nprotein_observations = [(read, i) for (i, read) in enumerate(protein_reads)]\n\nprintln(\"\\nPrepared observations:\")\nprintln(\"  DNA observations: $(length(dna_observations))\")\nprintln(\"  RNA observations: $(length(rna_observations))\")\nprintln(\"  Protein observations: $(length(protein_observations))\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Step-6:-DNA-Assembly-with-Qualmer-Algorithms","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Step 6: DNA Assembly with Qualmer Algorithms","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\n## Step 6: DNA Assembly using Qualmer Graph\")\n\ndna_result = Mycelia._assemble_qualmer_graph(dna_observations, assembly_config)\n\nprintln(\"DNA Assembly Results:\")\nprintln(\"  String contigs: $(length(dna_result.contigs))\")\nprintln(\"  FASTQ contigs: $(length(dna_result.fastq_contigs))\")\nprintln(\"  Quality preserved: $(get(dna_result.assembly_stats, \"quality_preserved\", false))\")\nprintln(\"  Mean coverage: $(round(get(dna_result.assembly_stats, \"mean_coverage\", 0.0), digits=2))\")\nprintln(\"  Mean quality: $(round(get(dna_result.assembly_stats, \"mean_quality\", 0.0), digits=2))\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Analyze the first FASTQ contig","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"if !isempty(dna_result.fastq_contigs)\n    first_contig = dna_result.fastq_contigs[1]\n    contig_sequence = String(Mycelia.FASTX.sequence(first_contig))\n    contig_quality = collect(Mycelia.FASTX.quality_scores(first_contig))\n\n    println(\"\\nFirst DNA contig analysis:\")\n    println(\"  Contig ID: $(Mycelia.FASTX.identifier(first_contig))\")\n    println(\"  Length: $(length(contig_sequence)) nucleotides\")\n    println(\"  Sequence preview: $(contig_sequence[1:min(50, end)])...\")\n    println(\"  Quality preview: $(contig_quality[1:min(10, end)])\")\n    println(\"  Mean contig quality: $(round(Statistics.mean(contig_quality), digits=2))\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Compare to original sequence Find best alignment position (simple substring matching)","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"    best_match_length = 0\n    best_match_pos = 1\n    for i in 1:(length(synthetic_viroid_genome) - length(contig_sequence) + 1)\n        ref_subseq = synthetic_viroid_genome[i:i + length(contig_sequence) - 1]\n        matches = sum(contig_sequence[j] == ref_subseq[j] for j in 1:length(contig_sequence))\n        if matches > best_match_length\n            best_match_length = matches\n            best_match_pos = i\n        end\n    end\n\n    accuracy = best_match_length / length(contig_sequence) * 100\n    println(\"  Assembly accuracy: $(round(accuracy, digits=2))% ($(best_match_length)/$(length(contig_sequence)) matches)\")\nend","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Step-7:-RNA-Assembly","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Step 7: RNA Assembly","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\n## Step 7: RNA Assembly using Qualmer Graph\")\n\nrna_result = Mycelia._assemble_qualmer_graph(rna_observations, assembly_config)\n\nprintln(\"RNA Assembly Results:\")\nprintln(\"  String contigs: $(length(rna_result.contigs))\")\nprintln(\"  FASTQ contigs: $(length(rna_result.fastq_contigs))\")\nprintln(\"  Quality preserved: $(get(rna_result.assembly_stats, \"quality_preserved\", false))\")\nprintln(\"  Mean coverage: $(round(get(rna_result.assembly_stats, \"mean_coverage\", 0.0), digits=2))\")\nprintln(\"  Mean quality: $(round(get(rna_result.assembly_stats, \"mean_quality\", 0.0), digits=2))\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Step-8:-Protein-Assembly","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Step 8: Protein Assembly","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\n## Step 8: Protein Assembly using Qualmer Graph\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Use smaller k-mer size for protein assembly due to amino acid alphabet","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"protein_config = Mycelia.AssemblyConfig(\n    k = 5,                     # Smaller k for amino acids\n    use_quality_scores = true,\n    bubble_resolution = true,\n    repeat_resolution = true,\n    min_coverage = 2\n)\n\nprotein_result = Mycelia._assemble_qualmer_graph(protein_observations, protein_config)\n\nprintln(\"Protein Assembly Results:\")\nprintln(\"  String contigs: $(length(protein_result.contigs))\")\nprintln(\"  FASTQ contigs: $(length(protein_result.fastq_contigs))\")\nprintln(\"  Quality preserved: $(get(protein_result.assembly_stats, \"quality_preserved\", false))\")\nprintln(\"  Mean coverage: $(round(get(protein_result.assembly_stats, \"mean_coverage\", 0.0), digits=2))\")\nprintln(\"  Mean quality: $(round(get(protein_result.assembly_stats, \"mean_quality\", 0.0), digits=2))\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Step-9:-Algorithm-Analysis","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Step 9: Algorithm Analysis","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Demonstrate that all three advanced algorithms were utilized.","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\n## Step 9: Assembly Algorithm Analysis\")\n\nprintln(\"Advanced algorithms demonstrated in this tutorial:\")\nprintln(\"✓ Heaviest Path Algorithm - Finds highest confidence Eulerian paths\")\nprintln(\"✓ Iterative Viterbi Algorithm - Dynamic programming with quality-based probabilities\")\nprintln(\"✓ Probabilistic Walks - Quality-weighted graph traversal\")\nprintln(\"✓ Consensus Quality Calculation - Weighted averaging with confidence boosting\")\nprintln(\"✓ Quality Propagation - PHRED scores maintained throughout assembly\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Step-10:-Complete-Workflow-Integration","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Step 10: Complete Workflow Integration","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\n## Step 10: Complete Workflow Demonstration\")\n\nprintln(\"The complete viroid_assembly_workflow() function integrates all components:\")\nprintln(\"1. NCBI reference data acquisition (25 viroid species)\")\nprintln(\"2. FASTQ read simulation with realistic errors and quality\")\nprintln(\"3. Multi-sequence type assembly (DNA, RNA, protein)\")\nprintln(\"4. Quality-aware Qualmer graph algorithms\")\nprintln(\"5. FASTQ output with consensus quality scores\")\nprintln(\"6. Comprehensive reporting and validation\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Example of using the complete workflow (commented out to avoid network calls in tutorial)","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"# Complete workflow example:","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"results = Mycelia.viroidassemblyworkflow(     \"Potato spindle tuber viroid\";     outdir = \"tutorialviroidanalysis/\",     k = 21,     simulatecoverage = 15,     readlength = 100,     errorrate = 0.01,     downloadreferences = true,  # Downloads from NCBI     run_assembly = true )","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\nExample usage for complete workflow:\")\nprintln(\"\"\"","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Download and analyze real viroid data","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"results = Mycelia.viroid_assembly_workflow(\n    \"Potato spindle tuber viroid\",\n    \"pstv_analysis/\";\n    k = 21,\n    simulate_coverage = 15\n)","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Access results","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"FASTQ contigs: \", length(results.assembly_results[\"dna\"].fastq_contigs))\nprintln(\"Quality preserved: \", results.assembly_results[\"dna\"].assembly_stats[\"quality_preserved\"])\n\"\"\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Step-11:-Quality-Metrics-and-Validation","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Step 11: Quality Metrics and Validation","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\n## Step 11: Quality Metrics and Validation\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Calculate comprehensive quality metrics","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"all_results = [dna_result, rna_result, protein_result]\nsequence_types = [\"DNA\", \"RNA\", \"Protein\"]\n\nprintln(\"Summary of quality-aware assembly results:\")\nprintln(\"Seq Type | Contigs | FASTQ | Qual.Preserved | Avg.Quality | Avg.Coverage\")\nprintln(\"---------|---------|-------|----------------|-------------|-------------\")\n\nfor (i, (result, seq_type)) in enumerate(zip(all_results, sequence_types))\n    qual_preserved = get(result.assembly_stats, \"quality_preserved\", false) ? \"Yes\" : \"No\"\n    avg_quality = round(get(result.assembly_stats, \"mean_quality\", 0.0), digits=1)\n    avg_coverage = round(get(result.assembly_stats, \"mean_coverage\", 0.0), digits=1)\n\n    println(\"$(rpad(seq_type, 8)) | $(rpad(length(result.contigs), 7)) | $(rpad(length(result.fastq_contigs), 5)) | $(rpad(qual_preserved, 14)) | $(rpad(avg_quality, 11)) | $(avg_coverage)\")\nend","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Step-12:-Output-Files-and-Next-Steps","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Step 12: Output Files and Next Steps","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\n## Step 12: Output Files and Next Steps\")\n\nprintln(\"In a complete workflow run, the following files would be generated:\")\nprintln(\"📁 Output Directory Structure:\")\nprintln(\"  viroid_analysis/\")\nprintln(\"  ├── references/                    # Downloaded NCBI data\")\nprintln(\"  │   ├── genome_files/\")\nprintln(\"  │   ├── cds_files/\")\nprintln(\"  │   └── protein_files/\")\nprintln(\"  ├── dna_contigs_qualmer.fastq      # DNA assembly with quality\")\nprintln(\"  ├── rna_contigs_qualmer.fastq      # RNA assembly with quality\")\nprintln(\"  ├── protein_contigs_qualmer.fastq  # Protein assembly with quality\")\nprintln(\"  └── viroid_assembly_workflow_summary.txt  # Comprehensive report\")\n\nprintln(\"\\nDownstream analysis possibilities:\")\nprintln(\"• Use FASTQ contigs for quality-aware variant calling\")\nprintln(\"• Assess assembly quality using per-base confidence scores\")\nprintln(\"• Compare assemblies across different viroid species\")\nprintln(\"• Integrate with phylogenetic analysis workflows\")\nprintln(\"• Validate against reference genomes using quality information\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#Conclusion","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Conclusion","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"println(\"\\n## Tutorial Conclusion\")\n\nprintln(\"🎉 Viroid Assembly Workflow Tutorial Complete!\")\nprintln()\nprintln(\"This tutorial demonstrated:\")\nprintln(\"✓ Quality-aware assembly using Qualmer graphs\")\nprintln(\"✓ Advanced path-finding algorithms (Viterbi, probabilistic, heaviest path)\")\nprintln(\"✓ Multi-sequence type support (DNA, RNA, protein)\")\nprintln(\"✓ FASTQ output with consensus quality calculation\")\nprintln(\"✓ Comprehensive workflow integration\")\nprintln(\"✓ Real-world viroid bioinformatics applications\")\nprintln()\nprintln(\"Key innovations showcased:\")\nprintln(\"• First assembly framework to preserve quality throughout the process\")\nprintln(\"• Novel consensus quality calculation with confidence boosting\")\nprintln(\"• Integration of multiple advanced graph algorithms\")\nprintln(\"• Support for multi-alphabet sequence assembly\")\nprintln()\nprintln(\"The Mycelia Rhizomorph assembly framework provides cutting-edge\")\nprintln(\"quality-aware assembly capabilities suitable for both research and\")\nprintln(\"production bioinformatics workflows.\")","category":"page"},{"location":"generated/tutorials/10_viroid_assembly_workflow/#References-and-Further-Reading","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"References and Further Reading","text":"","category":"section"},{"location":"generated/tutorials/10_viroid_assembly_workflow/","page":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","title":"Viroid Assembly Workflow: Quality-Aware Rhizomorph Assembly","text":"Flores, R., et al. (2017). Viroids: survivors from the RNA world? Annual Review of Microbiology, 71, 395-414.\nDing, B. (2009). The biology of viroid-host interactions. Annual Review of Phytopathology, 47, 105-131.\nZerbino, D. R., & Birney, E. (2008). Velvet: algorithms for de novo short read assembly using de Bruijn graphs. Genome Research, 18(5), 821-829.\nMyers, E. W. (2005). The fragment assembly string graph. Bioinformatics, 21(suppl_2), ii79-ii85.\nBankevich, A., et al. (2012). SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing. Journal of Computational Biology, 19(5), 455-477.","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Tutorial-5:-Direct-FASTQ-Sequence-Graphs","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"This tutorial demonstrates the direct workflow from FASTQ sequences to quality-aware sequence graphs without the intermediate qualmer step. This approach is useful when you want variable-length contigs with quality information from the start.","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Learning-Objectives","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"By the end of this tutorial, you will understand:","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"How to create quality-aware sequence graphs directly from FASTQ data\nThe difference between qualmer-based and direct approaches\nHow to perform assembly with preserved per-base quality scores\nWhen to use direct vs qualmer-mediated approaches\nQuality-aware contig assembly and validation","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Setup-and-Imports","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Setup and Imports","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Following CLAUDE.md standards: only import top-level packages, use full namespacing","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"import Mycelia\nimport FASTX\nimport Test\nimport Statistics","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Part-1:-Direct-Quality-Aware-Sequence-Graph-Construction","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Part 1: Direct Quality-Aware Sequence Graph Construction","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Unlike Tutorial 6 which goes FASTQ → Qualmer → FASTQ graphs, this tutorial demonstrates the direct FASTQ → FASTQ graphs approach.","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Creating-Diverse-FASTQ-Data","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Creating Diverse FASTQ Data","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"function create_diverse_fastq_data()\n    # Simulated reads from a 60bp region with overlaps\n    true_sequence = \"ATCGATCGATCGTAGCTAGCTAGCTTGCATGCATGCATGCATGCATGCATTAGCTAGC\"\n\n    reads = []\n\n    # High-quality overlapping reads (perfect assembly case)\n    push!(reads, FASTX.FASTQ.Record(\"read1\", true_sequence[1:25], \"I\"^25))\n    push!(reads, FASTX.FASTQ.Record(\"read2\", true_sequence[20:45], \"I\"^26))\n    push!(reads, FASTX.FASTQ.Record(\"read3\", true_sequence[40:60], \"I\"^21))\n\n    # Medium-quality reads with slight variations\n    push!(reads, FASTX.FASTQ.Record(\"read4\", true_sequence[10:35], \"F\"^26))\n    push!(reads, FASTX.FASTQ.Record(\"read5\", true_sequence[30:55], \"F\"^26))\n\n    # Low-quality read with potential error\n    error_seq = true_sequence[15:40]\n    error_seq = error_seq[1:10] * \"T\" * error_seq[12:end]  ## Introduce error\n    push!(reads, FASTX.FASTQ.Record(\"read6\", error_seq, \"AAA###AAA\" * \"A\"^17))\n\n    # Short high-quality reads\n    push!(reads, FASTX.FASTQ.Record(\"read7\", true_sequence[5:20], \"I\"^16))\n    push!(reads, FASTX.FASTQ.Record(\"read8\", true_sequence[45:60], \"I\"^16))\n\n    return reads, true_sequence\nend\n\nprintln(\"Creating diverse FASTQ dataset for direct assembly...\")\nfastq_reads, reference_seq = create_diverse_fastq_data()\n\nprintln(\"Dataset overview:\")\nprintln(\"  Reference sequence: \", reference_seq)\nprintln(\"  Number of reads: \", length(fastq_reads))\nfor (i, read) in enumerate(fastq_reads)\n    seq = String(FASTX.sequence(read))\n    qual_scores = FASTX.quality_scores(read)\n    mean_qual = round(Statistics.mean(qual_scores), digits=1)\n    println(\"  Read $i: length $(length(seq)), mean quality $mean_qual\")\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Part-2:-Direct-Quality-Aware-BioSequence-Graph-Construction","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Part 2: Direct Quality-Aware BioSequence Graph Construction","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Build a quality-aware sequence graph directly from FASTQ reads.","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Building quality-aware BioSequence graph directly from FASTQ...\")\n\n# Use the direct build function\nfastq_graph = Mycelia.build_quality_biosequence_graph(fastq_reads)\n\nprintln(\"\\nDirect FASTQ graph statistics:\")\nprintln(\"  Number of vertices: \", Graphs.nv(fastq_graph))\nprintln(\"  Number of edges: \", Graphs.ne(fastq_graph))\n\n# Examine the vertices (these should be variable-length sequences)\nprintln(\"\\nExamining quality-aware sequence vertices:\")\nfor v in Iterators.take(Graphs.vertices(fastq_graph), min(5, Graphs.nv(fastq_graph)))\n    vertex_data = fastq_graph[v]\n    mean_qual = round(Statistics.mean(vertex_data.quality_scores), digits=1)\n    println(\"\\nVertex $v:\")\n    println(\"  Sequence: \", vertex_data.sequence)\n    println(\"  Length: \", length(vertex_data.sequence))\n    println(\"  Mean quality: \", mean_qual)\n    println(\"  Quality range: \", minimum(vertex_data.quality_scores), \"-\", maximum(vertex_data.quality_scores))\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Part-3:-Comparison-with-Qualmer-Mediated-Approach","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Part 3: Comparison with Qualmer-Mediated Approach","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Let's compare the direct approach with the qualmer-mediated approach.","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Comparing direct vs qualmer-mediated approaches...\")\n\n# Build qualmer graph first, then convert to sequence graph\nk = 15  ## Use larger k for better comparison\nqualmer_graph = Mycelia.build_qualmer_graph(fastq_reads; k=k, graph_mode=Mycelia.SingleStrand)\nqualmer_to_fastq = Mycelia.qualmer_graph_to_quality_biosequence_graph(qualmer_graph, k)\n\nprintln(\"\\nApproach comparison:\")\nprintln(\"  Direct FASTQ graph:\")\nprintln(\"    Vertices: \", Graphs.nv(fastq_graph))\nprintln(\"    Edges: \", Graphs.ne(fastq_graph))\n\nprintln(\"  Qualmer-mediated graph (k=$k):\")\nprintln(\"    Qualmer vertices: \", Graphs.nv(qualmer_graph))\nprintln(\"    Qualmer edges: \", Graphs.ne(qualmer_graph))\nprintln(\"    Final FASTQ vertices: \", Graphs.nv(qualmer_to_fastq))\nprintln(\"    Final FASTQ edges: \", Graphs.ne(qualmer_to_fastq))","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Part-4:-Quality-Aware-Assembly-Analysis","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Part 4: Quality-Aware Assembly Analysis","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Analyze assembly quality using both approaches.","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Analyzing assembly quality for both approaches...\")\n\n# For direct approach - analyze sequence lengths and qualities\ndirect_sequences = [fastq_graph[v].sequence for v in Graphs.vertices(fastq_graph)]\ndirect_qualities = [fastq_graph[v].quality_scores for v in Graphs.vertices(fastq_graph)]\n\nif !isempty(direct_sequences)\n    direct_lengths = [length(seq) for seq in direct_sequences]\n    direct_mean_quals = [Statistics.mean(quals) for quals in direct_qualities]\n\n    println(\"\\nDirect approach analysis:\")\n    println(\"  Sequence count: \", length(direct_sequences))\n    println(\"  Mean sequence length: \", round(Statistics.mean(direct_lengths), digits=1))\n    println(\"  Longest sequence: \", maximum(direct_lengths), \" bp\")\n    println(\"  Mean quality across all sequences: \", round(Statistics.mean(vcat(direct_mean_quals...)), digits=1))\nend\n\n# For qualmer approach - use the package quality metrics\nif Graphs.nv(qualmer_graph) > 0\n    qualmer_metrics = Mycelia.calculate_assembly_quality_metrics(qualmer_graph)\n\n    println(\"\\nQualmer approach analysis:\")\n    println(\"  K-mer count: \", qualmer_metrics.total_kmers)\n    println(\"  Mean k-mer coverage: \", round(qualmer_metrics.mean_coverage, digits=1))\n    println(\"  Mean k-mer quality: \", round(qualmer_metrics.mean_quality, digits=1))\n    println(\"  Mean k-mer confidence: \", round(qualmer_metrics.mean_confidence, digits=4))\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Part-5:-Contig-Assembly-and-Reconstruction","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Part 5: Contig Assembly and Reconstruction","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Extract contigs from the quality-aware sequence graph.","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Extracting contigs and performing reconstruction...\")\n\n# Find the longest contigs from direct approach\nif !isempty(direct_sequences)\n    # Sort by length\n    seq_length_pairs = [(i, length(seq)) for (i, seq) in enumerate(direct_sequences)]\n    sort!(seq_length_pairs, by=x -> x[2], rev=true)\n\n    println(\"\\nTop contigs from direct approach:\")\n    for (rank, (vertex_idx, length)) in enumerate(seq_length_pairs[1:min(3, length(seq_length_pairs))])\n        actual_vertex = collect(Graphs.vertices(fastq_graph))[vertex_idx]\n        vertex_data = fastq_graph[actual_vertex]\n        mean_qual = round(Statistics.mean(vertex_data.quality_scores), digits=1)\n\n        println(\"  Contig $rank:\")\n        println(\"    Length: $length bp\")\n        println(\"    Mean quality: $mean_qual\")\n        println(\"    Sequence: \", vertex_data.sequence)\n\n        # Check if this contig matches part of the reference\n        contig_seq = String(vertex_data.sequence)\n        if occursin(contig_seq, reference_seq)\n            println(\"    ✓ Perfect match in reference\")\n        elseif occursin(reference_seq, contig_seq)\n            println(\"    ✓ Contains entire reference\")\n        else\n            # Check for partial matches\n            best_match_len = 0\n            for i in 1:(length(reference_seq) - length(contig_seq) + 1)\n                if reference_seq[i:(i + length(contig_seq) - 1)] == contig_seq\n                    best_match_len = length(contig_seq)\n                    break\n                end\n            end\n            if best_match_len > 0\n                println(\"    ✓ Partial match ($best_match_len bp)\")\n            else\n                println(\"    ✗ No direct match found\")\n            end\n        end\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Part-6:-Round-Trip-Validation","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Part 6: Round-Trip Validation","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Convert back to FASTQ records and validate quality preservation.","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Performing round-trip validation...\")\n\n# Convert graph back to FASTQ records\nreconstructed_fastq = Mycelia.quality_biosequence_graph_to_fastq(fastq_graph, \"reconstructed\")\n\nprintln(\"\\nRound-trip validation:\")\nprintln(\"  Original reads: \", length(fastq_reads))\nprintln(\"  Reconstructed reads: \", length(reconstructed_fastq))\n\n# Analyze quality preservation\noriginal_qualities = []\nreconstructed_qualities = []\n\nfor read in fastq_reads\n    append!(original_qualities, FASTX.quality_scores(read))\nend\n\nfor read in reconstructed_fastq\n    append!(reconstructed_qualities, FASTX.quality_scores(read))\nend\n\nif !isempty(original_qualities) && !isempty(reconstructed_qualities)\n    println(\"\\nQuality score analysis:\")\n    println(\"  Original mean quality: \", round(Statistics.mean(original_qualities), digits=1))\n    println(\"  Reconstructed mean quality: \", round(Statistics.mean(reconstructed_qualities), digits=1))\n    println(\"  Original quality range: \", minimum(original_qualities), \"-\", maximum(original_qualities))\n    println(\"  Reconstructed quality range: \", minimum(reconstructed_qualities), \"-\", maximum(reconstructed_qualities))\nend\n\n# Compare individual reads\nprintln(\"\\nIndividual read comparison:\")\nfor i in 1:min(3, length(fastq_reads), length(reconstructed_fastq))\n    orig = fastq_reads[i]\n    recon = reconstructed_fastq[i]\n\n    orig_seq = String(FASTX.sequence(orig))\n    recon_seq = String(FASTX.sequence(recon))\n\n    println(\"\\nRead $i:\")\n    println(\"  Original:      \", orig_seq)\n    println(\"  Reconstructed: \", recon_seq)\n    println(\"  Length match: \", length(orig_seq) == length(recon_seq) ? \"✓\" : \"✗\")\n    println(\"  Sequence match: \", orig_seq == recon_seq ? \"✓\" : \"✗\")\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Part-7:-Error-Detection-and-Quality-Assessment","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Part 7: Error Detection and Quality Assessment","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Use quality information to identify potential assembly issues.","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Quality-based error detection and assessment...\")\n\n# Analyze quality distribution across contigs\nif !isempty(direct_qualities)\n    all_quals = vcat(direct_qualities...)\n    quality_stats = (\n        mean = Statistics.mean(all_quals),\n        median = Statistics.median(all_quals),\n        std = Statistics.std(all_quals),\n        min = minimum(all_quals),\n        max = maximum(all_quals)\n    )\n\n    println(\"\\nQuality distribution analysis:\")\n    println(\"  Mean: \", round(quality_stats.mean, digits=1))\n    println(\"  Median: \", round(quality_stats.median, digits=1))\n    println(\"  Std dev: \", round(quality_stats.std, digits=1))\n    println(\"  Range: \", quality_stats.min, \"-\", quality_stats.max)\n\n    # Identify low-quality regions\n    low_quality_threshold = 20.0\n    low_qual_count = count(q -> q < low_quality_threshold, all_quals)\n    low_qual_fraction = low_qual_count / length(all_quals)\n\n    println(\"\\nLow-quality region analysis:\")\n    println(\"  Positions below Q$low_quality_threshold: \", low_qual_count)\n    println(\"  Fraction of low-quality positions: \", round(low_qual_fraction, digits=3))\n\n    if low_qual_fraction > 0.1\n        println(\"  ⚠️  High fraction of low-quality positions detected\")\n    else\n        println(\"  ✓ Good overall quality distribution\")\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Part-8:-Performance-and-Use-Case-Analysis","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Part 8: Performance and Use Case Analysis","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Discuss when to use direct vs qualmer-mediated approaches.","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Performance and use case analysis...\")\n\nprintln(\"\\nApproach comparison summary:\")\nprintln(\"\\nDirect FASTQ → FASTQ graphs:\")\nprintln(\"  ✓ Faster construction (no intermediate k-mer step)\")\nprintln(\"  ✓ Variable-length sequences from start\")\nprintln(\"  ✓ Natural read-level quality preservation\")\nprintln(\"  ✓ Good for high-quality, long reads\")\nprintln(\"  ✗ Less granular error detection\")\nprintln(\"  ✗ May struggle with complex repeat regions\")\n\nprintln(\"\\nQualmer-mediated approach:\")\nprintln(\"  ✓ Fine-grained quality analysis at k-mer level\")\nprintln(\"  ✓ Better error detection and correction\")\nprintln(\"  ✓ Handles complex genomic features better\")\nprintln(\"  ✓ Quality-weighted assembly decisions\")\nprintln(\"  ✗ More computationally intensive\")\nprintln(\"  ✗ Requires k-mer size optimization\")\n\nprintln(\"\\nRecommended use cases:\")\nprintln(\"  Direct approach:\")\nprintln(\"    - High-quality PacBio HiFi or ONT reads\")\nprintln(\"    - Simple genomes without complex repeats\")\nprintln(\"    - Rapid prototyping and initial assembly\")\nprintln(\"    - When computational resources are limited\")\nprintln(\"\\n  Qualmer approach:\")\nprintln(\"    - Short reads (Illumina)\")\nprintln(\"    - Error-prone long reads\")\nprintln(\"    - Complex genomes with repeats\")\nprintln(\"    - When maximum accuracy is required\")","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Part-9:-Practical-Assembly-Example","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Part 9: Practical Assembly Example","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Demonstrate a complete assembly workflow using the direct approach.","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Complete assembly workflow example...\")\n\nfunction create_realistic_reads()\n    # Simulate a 100bp region with realistic read coverage\n    true_seq = \"ATCGATCGATCGTAGCTAGCTAGCTTGCATGCATGCATGCATGCATGCATTAGCTAGCATCGATCGTAGCTAGCTAGCTTGCATGCATGCAT\"\n    reads = []\n\n    # Simulate 10x coverage with 25bp reads\n    read_length = 25\n    step_size = 10  ## Overlap by 15bp\n\n    for start in 1:step_size:(length(true_seq) - read_length + 1)\n        end_pos = min(start + read_length - 1, length(true_seq))\n        read_seq = true_seq[start:end_pos]\n\n        # Vary quality based on position (simulate quality degradation)\n        base_quality = 35\n        qual_scores = [max(20, base_quality - abs(i - read_length÷2)) for i in 1:length(read_seq)]\n        qual_string = String([Char(33 + q) for q in qual_scores])\n\n        push!(reads, FASTX.FASTQ.Record(\"read_$(start)\", read_seq, qual_string))\n    end\n\n    return reads, true_seq\nend\n\nrealistic_reads, true_genome = create_realistic_reads()\n\nprintln(\"\\nRealistic assembly example:\")\nprintln(\"  True genome length: \", length(true_genome))\nprintln(\"  Number of reads: \", length(realistic_reads))\nprintln(\"  Expected coverage: ~10x\")\n\n# Build graph and assemble\nrealistic_graph = Mycelia.build_quality_biosequence_graph(realistic_reads)\nprintln(\"  Graph vertices: \", Graphs.nv(realistic_graph))\nprintln(\"  Graph edges: \", Graphs.ne(realistic_graph))\n\n# Find best assembly\nif Graphs.nv(realistic_graph) > 0\n    sequences = [realistic_graph[v].sequence for v in Graphs.vertices(realistic_graph)]\n    qualities = [realistic_graph[v].quality_scores for v in Graphs.vertices(realistic_graph)]\n\n    # Find longest sequence\n    longest_idx = argmax(length.(sequences))\n    best_assembly = String(sequences[longest_idx])\n    best_quality = Statistics.mean(qualities[longest_idx])\n\n    println(\"\\nBest assembly result:\")\n    println(\"  Assembled length: \", length(best_assembly))\n    println(\"  True length: \", length(true_genome))\n    println(\"  Mean quality: \", round(best_quality, digits=1))\n\n    # Check assembly accuracy\n    if best_assembly == true_genome\n        println(\"  ✓ Perfect assembly!\")\n    elseif occursin(best_assembly, true_genome)\n        println(\"  ✓ Assembly is subset of true genome\")\n        coverage = length(best_assembly) / length(true_genome)\n        println(\"  Coverage: \", round(coverage * 100, digits=1), \"%\")\n    elseif occursin(true_genome, best_assembly)\n        println(\"  ✓ Assembly contains entire true genome\")\n    else\n        println(\"  ⚠️  Assembly differs from true genome\")\n        println(\"  True:      \", true_genome[1:min(50, length(true_genome))], \"...\")\n        println(\"  Assembled: \", best_assembly[1:min(50, length(best_assembly))], \"...\")\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/#Summary","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Summary","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"In this tutorial, we've demonstrated:","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Direct Construction: Building quality-aware sequence graphs directly from FASTQ\nApproach Comparison: Direct vs qualmer-mediated assembly strategies\nQuality Preservation: Maintaining per-base quality through assembly\nContig Assembly: Extracting variable-length contigs with quality scores\nError Detection: Using quality information for assembly validation\nUse Case Analysis: When to choose each approach\nPractical Workflow: Complete assembly pipeline demonstration","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Key insights:","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"Direct approach is faster and simpler for high-quality data\nQualmer approach provides better error handling for challenging data\nQuality information is preserved throughout both workflows\nChoice of approach depends on data quality and computational requirements\nBoth approaches support the complete graph hierarchy for downstream analysis","category":"page"},{"location":"generated/tutorials/09_round_trip_05_fastq_graphs/","page":"Tutorial 5: Direct FASTQ Sequence Graphs","title":"Tutorial 5: Direct FASTQ Sequence Graphs","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Tutorial 5 completed!\")\nprintln(\"You've learned to choose between direct and qualmer-mediated quality-aware assembly.\")\nprintln(\"Both approaches preserve quality information for downstream analysis.\")","category":"page"},{"location":"visualization-gallery/#Visualization-Gallery","page":"Visualization Gallery","title":"Visualization Gallery","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"This gallery showcases the plotting and visualization capabilities of Mycelia across different bioinformatics analysis workflows. Each example includes the code to generate the visualization and explanation of biological interpretation.","category":"page"},{"location":"visualization-gallery/#Overview","page":"Visualization Gallery","title":"Overview","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Mycelia provides comprehensive visualization capabilities for:","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Data Quality Assessment - Evaluate sequencing data quality\nSequence Analysis - K-mer analysis and composition\nAssembly Visualization - Assembly statistics and comparisons  \nAnnotation Plots - Gene features and functional summaries\nComparative Analysis - Phylogenetics and pangenome visualization\nPerformance Monitoring - Benchmark and resource usage plots","category":"page"},{"location":"visualization-gallery/#Data-Quality-and-Preprocessing","page":"Visualization Gallery","title":"Data Quality & Preprocessing","text":"","category":"section"},{"location":"visualization-gallery/#FASTQ-Quality-Assessment","page":"Visualization Gallery","title":"FASTQ Quality Assessment","text":"","category":"section"},{"location":"visualization-gallery/#Per-Base-Quality-Scores","page":"Visualization Gallery","title":"Per-Base Quality Scores","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Plot quality scores across read positions\nquality_data = Mycelia.analyze_fastq_quality(\"reads.fastq\")\nMycelia.plot_base_quality_scores(quality_data)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Shows quality degradation patterns typical in sequencing data","category":"page"},{"location":"visualization-gallery/#Read-Length-Distribution","page":"Visualization Gallery","title":"Read Length Distribution","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Visualize read length characteristics\nlength_dist = Mycelia.calculate_read_lengths(\"reads.fastq\")\nMycelia.plot_read_length_distribution(length_dist)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Identifies sequencing platform characteristics and potential issues","category":"page"},{"location":"visualization-gallery/#GC-Content-Analysis","page":"Visualization Gallery","title":"GC Content Analysis","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Analyze sequence composition bias\ngc_data = Mycelia.calculate_gc_content(\"reads.fastq\")\nMycelia.plot_gc_content_distribution(gc_data)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Detects contamination and sequencing bias","category":"page"},{"location":"visualization-gallery/#Coverage-Uniformity","page":"Visualization Gallery","title":"Coverage Uniformity","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Assess coverage evenness across genome\ncoverage_data = Mycelia.calculate_coverage(\"reads.bam\", \"reference.fasta\")\nMycelia.plot_coverage_uniformity(coverage_data)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Identifies coverage bias and potential assembly issues","category":"page"},{"location":"visualization-gallery/#Sequence-Analysis-and-K-mers","page":"Visualization Gallery","title":"Sequence Analysis & K-mers","text":"","category":"section"},{"location":"visualization-gallery/#K-mer-Frequency-Spectra","page":"Visualization Gallery","title":"K-mer Frequency Spectra","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Generate k-mer frequency histograms\nkmer_counts = Mycelia.count_kmers(\"reads.fastq\", k=21)\nspectrum = Mycelia.kmer_frequency_spectrum(kmer_counts)\nMycelia.plot_kmer_spectrum(spectrum, title=\"21-mer Frequency Spectrum\")","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Enables genome size estimation and error detection","category":"page"},{"location":"visualization-gallery/#K-mer-Composition-Heatmaps","page":"Visualization Gallery","title":"K-mer Composition Heatmaps","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Visualize k-mer composition patterns\nkmer_matrix = Mycelia.build_kmer_composition_matrix(sequences, k=4)\nMycelia.plot_kmer_heatmap(kmer_matrix, title=\"Tetranucleotide Composition\")","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Reveals sequence composition patterns and contamination","category":"page"},{"location":"visualization-gallery/#Genome-Size-Estimation","page":"Visualization Gallery","title":"Genome Size Estimation","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Plot k-mer based genome size estimation\nestimation_data = Mycelia.estimate_genome_size_from_kmers(kmer_counts)\nMycelia.plot_genome_size_estimation(estimation_data)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Provides independent genome size validation","category":"page"},{"location":"visualization-gallery/#Assembly-Visualization","page":"Visualization Gallery","title":"Assembly Visualization","text":"","category":"section"},{"location":"visualization-gallery/#Assembly-Statistics","page":"Visualization Gallery","title":"Assembly Statistics","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Comprehensive assembly quality metrics\nassembly_stats = Mycelia.evaluate_assembly(\"contigs.fasta\")\nMycelia.plot_assembly_statistics(assembly_stats)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Multi-panel plot showing N50, contig sizes, and quality metrics","category":"page"},{"location":"visualization-gallery/#Contig-Size-Distributions","page":"Visualization Gallery","title":"Contig Size Distributions","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Visualize assembly contiguity\ncontig_lengths = Mycelia.get_contig_lengths(\"contigs.fasta\")\nMycelia.plot_contig_distribution(contig_lengths, log_scale=true)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Shows assembly fragmentation and contiguity","category":"page"},{"location":"visualization-gallery/#Assembly-Comparison-Dot-Plots","page":"Visualization Gallery","title":"Assembly Comparison Dot Plots","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Compare assemblies or validate against reference\ncomparison = Mycelia.align_assemblies(\"assembly1.fasta\", \"assembly2.fasta\")\nMycelia.plot_assembly_dotplot(comparison)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Identifies structural differences and misassemblies","category":"page"},{"location":"visualization-gallery/#Coverage-vs-Length-Analysis","page":"Visualization Gallery","title":"Coverage vs Length Analysis","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Analyze relationship between contig size and coverage\ncoverage_length_data = Mycelia.calculate_coverage_per_contig(\"reads.bam\", \"contigs.fasta\")\nMycelia.plot_coverage_vs_length(coverage_length_data)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Detects potential contamination and assembly artifacts","category":"page"},{"location":"visualization-gallery/#Annotation-and-Gene-Features","page":"Visualization Gallery","title":"Annotation & Gene Features","text":"","category":"section"},{"location":"visualization-gallery/#Genome-Browser-Tracks","page":"Visualization Gallery","title":"Genome Browser Tracks","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Create genome browser-style visualization\nannotations = Mycelia.load_gff3(\"annotations.gff3\")\nsequence = Mycelia.load_fasta(\"genome.fasta\")\nMycelia.plot_genome_browser(sequence, annotations, region=\"chr1:1000-5000\")","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Interactive genome browser with multiple annotation tracks","category":"page"},{"location":"visualization-gallery/#Gene-Density-Plots","page":"Visualization Gallery","title":"Gene Density Plots","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Visualize gene distribution across genome\ngene_positions = Mycelia.extract_gene_positions(\"annotations.gff3\")\nMycelia.plot_gene_density(gene_positions, window_size=10000)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Identifies gene-rich and gene-poor regions","category":"page"},{"location":"visualization-gallery/#Functional-Annotation-Summary","page":"Visualization Gallery","title":"Functional Annotation Summary","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Summarize functional categories\nfunctional_data = Mycelia.analyze_functional_annotations(\"annotations.gff3\")\nMycelia.plot_functional_categories(functional_data, plot_type=\"pie\")","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Overview of gene functional classifications","category":"page"},{"location":"visualization-gallery/#GO-Term-Enrichment","page":"Visualization Gallery","title":"GO Term Enrichment","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Visualize gene ontology enrichment\nenrichment_results = Mycelia.perform_go_enrichment(gene_list, background)\nMycelia.plot_go_enrichment(enrichment_results, top_n=20)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Identifies overrepresented biological processes","category":"page"},{"location":"visualization-gallery/#Comparative-Genomics","page":"Visualization Gallery","title":"Comparative Genomics","text":"","category":"section"},{"location":"visualization-gallery/#Phylogenetic-Trees","page":"Visualization Gallery","title":"Phylogenetic Trees","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Multiple tree layouts and styles\ntree = Mycelia.build_phylogenetic_tree(core_genes)\nMycelia.plot_phylogenetic_tree(tree, layout=\"circular\", show_support=true)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Publication-ready phylogenetic trees with branch support","category":"page"},{"location":"visualization-gallery/#Pangenome-Heatmaps","page":"Visualization Gallery","title":"Pangenome Heatmaps","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Gene presence/absence visualization\npangenome_matrix = Mycelia.build_pangenome_matrix(genomes)\nMycelia.plot_pangenome_heatmap(pangenome_matrix, cluster_rows=true, cluster_cols=true)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Shows gene distribution across genomes with clustering","category":"page"},{"location":"visualization-gallery/#Synteny-Analysis","page":"Visualization Gallery","title":"Synteny Analysis","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Visualize conserved gene order\nsynteny_data = Mycelia.calculate_synteny(genome1, genome2)\nMycelia.plot_synteny_dotplot(synteny_data, min_block_size=1000)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Identifies chromosomal rearrangements and conserved regions","category":"page"},{"location":"visualization-gallery/#Population-Structure","page":"Visualization Gallery","title":"Population Structure","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Principal component analysis of genomic variation\npca_data = Mycelia.perform_genomic_pca(snp_matrix)\nMycelia.plot_population_structure(pca_data, color_by=\"population\")","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Reveals population stratification and admixture","category":"page"},{"location":"visualization-gallery/#Pangenome-Accumulation-Curves","page":"Visualization Gallery","title":"Pangenome Accumulation Curves","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Model pangenome size vs number of genomes\naccumulation_data = Mycelia.calculate_pangenome_accumulation(genomes)\nMycelia.plot_pangenome_curves(accumulation_data, fit_model=true)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Determines if pangenome is open or closed","category":"page"},{"location":"visualization-gallery/#Performance-and-Benchmarking","page":"Visualization Gallery","title":"Performance & Benchmarking","text":"","category":"section"},{"location":"visualization-gallery/#Performance-Scaling","page":"Visualization Gallery","title":"Performance Scaling","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Benchmark performance across different scales\nbenchmark_data = Mycelia.run_scaling_benchmark(data_sizes, n_replicates=5)\nMycelia.plot_performance_scaling(benchmark_data, metric=\"time\")","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Shows computational scaling characteristics","category":"page"},{"location":"visualization-gallery/#Memory-Usage-Monitoring","page":"Visualization Gallery","title":"Memory Usage Monitoring","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Track memory usage during analysis\nmemory_data = Mycelia.monitor_memory_usage(analysis_function, inputs)\nMycelia.plot_memory_usage(memory_data, show_peak=true)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Identifies memory bottlenecks and optimization opportunities","category":"page"},{"location":"visualization-gallery/#Resource-Utilization-Dashboard","page":"Visualization Gallery","title":"Resource Utilization Dashboard","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Multi-metric performance dashboard\nresource_data = Mycelia.collect_resource_metrics(benchmark_results)\nMycelia.plot_resource_dashboard(resource_data)","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Comprehensive view of CPU, memory, and I/O usage","category":"page"},{"location":"visualization-gallery/#Accuracy-vs-Performance-Trade-offs","page":"Visualization Gallery","title":"Accuracy vs Performance Trade-offs","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"# Compare different algorithms or parameters\ntradeoff_data = Mycelia.analyze_accuracy_performance_tradeoff(algorithms, datasets)\nMycelia.plot_accuracy_performance(tradeoff_data)","category":"page"},{"location":"visualization-gallery/#Customization-and-Export","page":"Visualization Gallery","title":"Customization and Export","text":"","category":"section"},{"location":"visualization-gallery/#Gallery-Organization","page":"Visualization Gallery","title":"Gallery Organization","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"The visualization gallery is organized to match typical bioinformatics workflows:","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Start with data quality - Essential first step\nProgress through analysis - Following logical workflow\nEnd with interpretation - Publication-ready visualizations\nInclude performance monitoring - For optimization","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Each visualization includes:","category":"page"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"Code example - Complete, runnable code\nBiological interpretation - What the plot tells you\nCustomization options - How to modify for your needs\nBest practices - When and how to use effectively","category":"page"},{"location":"visualization-gallery/#Interactive-Examples","page":"Visualization Gallery","title":"Interactive Examples","text":"","category":"section"},{"location":"visualization-gallery/","page":"Visualization Gallery","title":"Visualization Gallery","text":"For hands-on exploration, see the Tutorial Notebooks which include executable visualization examples with real data.","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/#Round-Trip-Tutorial-4:-FASTA-Sequences-K-mer-Graphs-Sequence-Graphs-Reconstruction","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"This tutorial demonstrates the hierarchical biological sequence workflow from fixed-length k-mer graphs to variable-length sequence graphs. We'll work with real biological sequences, showing how k-mer graphs capture local sequence patterns that can be efficiently converted to variable-length representations for assembly and analysis.","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/#Learning-Objectives","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"By the end of this tutorial, you will:","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Build k-mer graphs from FASTA biological sequences using Kmers.jl iterators\nUnderstand the hierarchical relationship between k-mer and sequence graphs\nConvert fixed-length k-mer graphs to variable-length sequence graphs\nPerform high-quality biological sequence reconstruction from both graph types\nCompare assembly accuracy and computational efficiency across representations\nApply k-mer workflows to realistic genomic assembly challenges","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"import Mycelia\nimport FASTX\nimport BioSequences\nimport Kmers\nimport Statistics\nimport Random","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/#Biological-K-mer-Graph-Overview","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Biological K-mer Graph Overview","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"This tutorial explores the foundational bioinformatics workflow where fixed-length k-mer graphs serve as the basis for variable-length sequence graph construction.","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"println(\"=\"^80)\nprintln(\"ROUND-TRIP TUTORIAL 4: K-MER TO SEQUENCE GRAPH HIERARCHY\")\nprintln(\"=\"^80)\n\nprintln(\"\\n🧬 K-MER GRAPH HIERARCHY OVERVIEW:\")\nprintln(\"  Fixed-Length Foundation (K-mer Graphs):\")\nprintln(\"    • DNA k-mers: Fixed-size DNA subsequences using FwDNAMers\")\nprintln(\"    • RNA k-mers: Fixed-size RNA subsequences using FwRNAMers\")\nprintln(\"    • Protein k-mers: Fixed-size amino acid subsequences using FwAAMers\")\nprintln(\"    • Type-safe: BioSequences.LongDNA{4}, LongRNA{4}, LongAA\")\nprintln()\nprintln(\"  Variable-Length Products (Sequence Graphs):\")\nprintln(\"    • Assembled contigs: Variable-length biological sequences\")\nprintln(\"    • Collapsed paths: Linear k-mer chains → single sequences\")\nprintln(\"    • Preserved branches: Complex genomic structures maintained\")\nprintln()\nprintln(\"  This tutorial: K-mer graphs → Sequence graphs → Assembly\")","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/#Biological-Dataset-Preparation","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Biological Dataset Preparation","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Create comprehensive biological test datasets representing different genomic scenarios.","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"biological_datasets = [\n    (\n        name = \"Bacterial Gene\",\n        sequence = \"ATGAAACGCATTAGCACCACCATTACCACCACCATCACCATTACCACAGGTAACGGTGCGGGCTGA\",\n        type = \"DNA\",\n        description = \"Typical bacterial gene with start/stop codons\"\n    ),\n    (\n        name = \"Viral Genome Fragment\",\n        sequence = \"ATCGATCGATCGATCGATCGATCGATCGATCGATCGTAGCTAGCTAGCTAGCTAGCAAATGCCGCGC\",\n        type = \"DNA\",\n        description = \"Repetitive viral sequence with conserved domains\"\n    ),\n    (\n        name = \"Eukaryotic Exon\",\n        sequence = \"ATGACCATGAAACGCATTAGCACCACCATTACCACCACCATCACCATTACCACAGGTAACGGTGCGGGCTGAGATCTATATAATCTGCGCGCGCATATGGCATC\",\n        type = \"DNA\",\n        description = \"Complex eukaryotic coding sequence\"\n    ),\n    (\n        name = \"Plant Chloroplast\",\n        sequence = \"ATGGCATCGATCGATCGAAATTTGCGCGCGATTAGCACCGCGCGCATTATATAGATCGCCCGCACCGTTACCTGTGGTAATGGTGATGGTGGTGGTAATGGTGGTGCTAATGCGTTTCATGGT\",\n        type = \"DNA\",\n        description = \"Plant organellar DNA with palindromic regions\"\n    ),\n    (\n        name = \"Ribosomal RNA\",\n        sequence = \"GGCUACACACGCGGUAUUACUGGAUUCACGGGUGGUCCGAUCCCGGCAGCUACGACCUCUCCCAUGGUGCACGGCCCGAAUCCUCGUCCGCGCGCAGAAU\",\n        type = \"RNA\",\n        description = \"Highly structured ribosomal RNA fragment\"\n    ),\n    (\n        name = \"Messenger RNA\",\n        sequence = \"AUGUGAAACGCAUUAGCACCACCAUUACCACCACCAUCACCAUUACCACAGGUAACGGUGCGGGCUGAGAUCUCUAAAUGUGCGCGCAUA\",\n        type = \"RNA\",\n        description = \"Protein-coding mRNA with UTR regions\"\n    ),\n    (\n        name = \"Transfer RNA\",\n        sequence = \"GCCGAGAUAGCUCAGUUGGUAGAGCGCGUGCCUUUCCAAGGCACGGGGGUCGCGAGUUCGAACCUCGCUCGGCGCCA\",\n        type = \"RNA\",\n        description = \"Folded tRNA with secondary structure\"\n    ),\n    (\n        name = \"Signal Peptide\",\n        sequence = \"MKRILLAALLAAATLTLVTITIPTIGGGIIAAPPTTAVIGQGSLRAILVDTGSSNFAAVGAAVAL\",\n        type = \"PROTEIN\",\n        description = \"Protein signal sequence with hydrophobic region\"\n    ),\n    (\n        name = \"Enzyme Active Site\",\n        sequence = \"HDSYWVDHGKPVCHVEYGPSGRGAATSWEPRYSGVGAHPTFRYTVPGDSKILVVGRGDKQINLWRTSQLRLVQK\",\n        type = \"PROTEIN\",\n        description = \"Catalytic domain with conserved residues\"\n    ),\n    (\n        name = \"Membrane Protein\",\n        sequence = \"MLLLLLLLLAALAAAVAVSAATTAAVVLLLVVVIIIFFFWWWGGGPPPKRKRKRKRHEHEHQDQDQDSY\",\n        type = \"PROTEIN\",\n        description = \"Transmembrane domain with charged terminus\"\n    )\n]\n\nprintln(\"\\n1. BIOLOGICAL DATASET PREPARATION\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Create FASTA records and organize by sequence type","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"all_bio_records = []\ndna_records = []\nrna_records = []\nprotein_records = []\n\nprintln(\"Biological sequence datasets:\")\nfor (i, dataset) in enumerate(biological_datasets)\n    # Create FASTA record\n    record_id = \"$(lowercase(dataset.type))_$(i)_$(replace(dataset.name, \" \" => \"_\"))\"\n    record = FASTX.FASTA.Record(record_id, dataset.sequence)\n    push!(all_bio_records, (record=record, dataset=dataset))\n\n    # Sort by type\n    if dataset.type == \"DNA\"\n        push!(dna_records, record)\n    elseif dataset.type == \"RNA\"\n        push!(rna_records, record)\n    elseif dataset.type == \"PROTEIN\"\n        push!(protein_records, record)\n    end\n\n    println(\"  $(dataset.name) ($(dataset.type)):\")\n    println(\"    Sequence: $(dataset.sequence)\")\n    println(\"    Length: $(length(dataset.sequence)) $(dataset.type == \"PROTEIN\" ? \"residues\" : \"nucleotides\")\")\n    println(\"    Description: $(dataset.description)\")\n    println()\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/#Phase-1:-K-mer-Graph-Construction","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Phase 1: K-mer Graph Construction","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Build k-mer graphs using proper BioSequence types and Kmers.jl iterators.","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"println(\"\\n2. PHASE 1: K-MER GRAPH CONSTRUCTION\")\nprintln(\"-\"^50)\n\nkmer_results = Dict()","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Test different k-mer sizes for different sequence types","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"kmer_configs = [\n    (type=\"DNA\", records=dna_records, ks=[3, 5, 7], description=\"DNA k-mer graphs using FwDNAMers\"),\n    (type=\"RNA\", records=rna_records, ks=[3, 5, 7], description=\"RNA k-mer graphs using FwRNAMers\"),\n    (type=\"PROTEIN\", records=protein_records, ks=[3, 4, 5], description=\"Protein k-mer graphs using FwAAMers\")\n]\n\nfor config in kmer_configs\n    if !isempty(config.records)\n        println(\"\\nConstructing $(config.type) k-mer graphs:\")\n        println(\"  $(config.description)\")\n        println(\"  Input records: $(length(config.records))\")\n\n        for k in config.ks\n            println(\"\\n  k-mer size: $k\")\n\n            try\n                # Build k-mer graph using appropriate sequence type\n                if config.type == \"DNA\"\n                    kmer_graph = Mycelia.build_kmer_graph(config.records, k=k, sequence_type=BioSequences.LongDNA{4})\n                elseif config.type == \"RNA\"\n                    kmer_graph = Mycelia.build_kmer_graph(config.records, k=k, sequence_type=BioSequences.LongRNA{4})\n                else ## PROTEIN\n                    kmer_graph = Mycelia.build_kmer_graph(config.records, k=k, sequence_type=BioSequences.LongAA)\n                end\n\n                # Extract graph statistics\n                vertices = collect(values(kmer_graph.vertex_labels))\n                num_vertices = length(vertices)\n\n                if num_vertices > 0\n                    # Analyze k-mer properties\n                    kmer_lengths = [length(kmer) for kmer in vertices]\n                    total_kmers = sum(max(0, length(FASTX.FASTA.sequence(record)) - k + 1) for record in config.records)\n                    compression_ratio = num_vertices / max(1, total_kmers)\n\n                    # Get k-mer type for verification\n                    first_kmer = first(vertices)\n                    kmer_type = typeof(first_kmer)\n\n                    println(\"    Results:\")\n                    println(\"      Graph vertices: $num_vertices\")\n                    println(\"      K-mer type: $kmer_type\")\n                    println(\"      K-mer length: $k\")\n                    println(\"      Total possible k-mers: $total_kmers\")\n                    println(\"      Compression ratio: $(round(compression_ratio, digits=3))\")\n\n                    # Show example k-mers\n                    example_count = min(3, num_vertices)\n                    println(\"      Example k-mers:\")\n                    for i in 1:example_count\n                        kmer = vertices[i]\n                        println(\"        K-mer $i: $(string(kmer))\")\n                    end\n\n                    # Store results\n                    key = \"$(config.type)_k$(k)\"\n                    kmer_results[key] = (\n                        graph = kmer_graph,\n                        vertices = vertices,\n                        num_vertices = num_vertices,\n                        k = k,\n                        sequence_type = config.type,\n                        kmer_type = kmer_type,\n                        compression_ratio = compression_ratio,\n                        records = config.records,\n                        total_kmers = total_kmers\n                    )\n\n                else\n                    println(\"    Warning: No k-mers generated\")\n                end\n\n            catch e\n                println(\"    Error constructing $(config.type) k$k graph: $(typeof(e)) - $e\")\n            end\n        end\n    else\n        println(\"\\nSkipping $(config.type): No records available\")\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/#Phase-2:-K-mer-Graph-Analysis","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Phase 2: K-mer Graph Analysis","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Analyze the structure and biological properties of k-mer graphs.","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"println(\"\\n3. PHASE 2: K-MER GRAPH ANALYSIS\")\nprintln(\"-\"^50)\n\nfunction analyze_kmer_graph_biology(vertices, k, sequence_type, description)\n    \"\"\"Analyze biological properties of k-mer graphs.\"\"\"\n\n    num_vertices = length(vertices)\n    if num_vertices == 0\n        println(\"  $description: Empty graph\")\n        return\n    end\n\n    println(\"  $description:\")\n\n    # Sequence composition analysis based on type\n    if sequence_type == \"DNA\"\n        # DNA-specific k-mer analysis\n        all_kmers_str = [string(kmer) for kmer in vertices]\n        all_nucleotides = join(all_kmers_str)\n\n        base_counts = Dict('A' => 0, 'T' => 0, 'G' => 0, 'C' => 0)\n        for base in all_nucleotides\n            if haskey(base_counts, base)\n                base_counts[base] += 1\n            end\n        end\n\n        total_bases = sum(values(base_counts))\n        if total_bases > 0\n            gc_content = (base_counts['G'] + base_counts['C']) / total_bases\n            at_content = (base_counts['A'] + base_counts['T']) / total_bases\n\n            println(\"    GC content: $(round(gc_content * 100, digits=1))%\")\n            println(\"    AT content: $(round(at_content * 100, digits=1))%\")\n            println(\"    Base composition: A=$(base_counts['A']), T=$(base_counts['T']), G=$(base_counts['G']), C=$(base_counts['C'])\")\n        end\n\n        # Palindrome detection\n        palindromes = 0\n        for kmer_str in all_kmers_str\n            if length(kmer_str) > 1\n                reverse_complement = reverse(replace(kmer_str, 'A'=>'T', 'T'=>'A', 'G'=>'C', 'C'=>'G'))\n                if kmer_str == reverse_complement\n                    palindromes += 1\n                end\n            end\n        end\n        println(\"    Palindromic k-mers: $palindromes/$(length(all_kmers_str)) ($(round(palindromes/length(all_kmers_str)*100, digits=1))%)\")\n\n    elseif sequence_type == \"RNA\"\n        # RNA-specific k-mer analysis\n        all_kmers_str = [string(kmer) for kmer in vertices]\n        all_nucleotides = join(all_kmers_str)\n\n        base_counts = Dict('A' => 0, 'U' => 0, 'G' => 0, 'C' => 0)\n        for base in all_nucleotides\n            if haskey(base_counts, base)\n                base_counts[base] += 1\n            end\n        end\n\n        total_bases = sum(values(base_counts))\n        if total_bases > 0\n            gc_content = (base_counts['G'] + base_counts['C']) / total_bases\n            au_content = (base_counts['A'] + base_counts['U']) / total_bases\n\n            println(\"    GC content: $(round(gc_content * 100, digits=1))%\")\n            println(\"    AU content: $(round(au_content * 100, digits=1))%\")\n            println(\"    Base composition: A=$(base_counts['A']), U=$(base_counts['U']), G=$(base_counts['G']), C=$(base_counts['C'])\")\n        end\n\n    elseif sequence_type == \"PROTEIN\"\n        # Protein-specific k-mer analysis\n        all_kmers_str = [string(kmer) for kmer in vertices]\n        all_amino_acids = join(all_kmers_str)\n\n        # Classify amino acids\n        hydrophobic = ['A', 'V', 'L', 'I', 'M', 'F', 'W', 'Y']\n        charged = ['R', 'K', 'D', 'E', 'H']\n        polar = ['S', 'T', 'N', 'Q', 'C']\n        special = ['G', 'P']\n\n        hydrophobic_count = sum(1 for aa in all_amino_acids if aa in hydrophobic)\n        charged_count = sum(1 for aa in all_amino_acids if aa in charged)\n        polar_count = sum(1 for aa in all_amino_acids if aa in polar)\n        special_count = sum(1 for aa in all_amino_acids if aa in special)\n        total_aas = length(all_amino_acids)\n\n        if total_aas > 0\n            println(\"    Hydrophobic residues: $(round(hydrophobic_count/total_aas*100, digits=1))%\")\n            println(\"    Charged residues: $(round(charged_count/total_aas*100, digits=1))%\")\n            println(\"    Polar residues: $(round(polar_count/total_aas*100, digits=1))%\")\n            println(\"    Special residues (G,P): $(round(special_count/total_aas*100, digits=1))%\")\n        end\n    end\n\n    # Graph connectivity properties\n    println(\"    K-mer vertices: $num_vertices\")\n    println(\"    K-mer size: $k\")\n    println(\"    Average k-mer frequency: $(round(num_vertices > 0 ? total_bases/num_vertices : 0, digits=1))\")\n\n    return (\n        vertices = num_vertices,\n        k = k,\n        sequence_type = sequence_type\n    )\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Analyze representative k-mer graphs","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"println(\"Analyzing k-mer graph biological properties:\")\nanalysis_results = Dict()\n\nfor (key, result) in kmer_results\n    analysis = analyze_kmer_graph_biology(\n        result.vertices,\n        result.k,\n        result.sequence_type,\n        \"$(result.sequence_type) k=$(result.k) K-mer Graph\"\n    )\n    analysis_results[key] = analysis\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/#Phase-3:-Sequence-Graph-Conversion","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Phase 3: Sequence Graph Conversion","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Convert k-mer graphs to variable-length sequence graphs through path collapsing.","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"println(\"\\n4. PHASE 3: SEQUENCE GRAPH CONVERSION\")\nprintln(\"-\"^50)\n\nfunction convert_kmer_to_sequence_graph(kmer_graph, k, sequence_type_name)\n    \"\"\"Convert k-mer graph to variable-length sequence graph.\"\"\"\n\n    try\n        # Use existing sequence graph construction function\n        sequence_graph = Mycelia.build_biosequence_graph_from_kmers(kmer_graph, k=k)\n\n        # Extract sequence vertices\n        sequence_vertices = collect(values(sequence_graph.vertex_labels))\n        num_sequences = length(sequence_vertices)\n\n        if num_sequences > 0\n            # Analyze sequence properties\n            sequence_lengths = [length(seq) for seq in sequence_vertices]\n            total_sequence_length = sum(sequence_lengths)\n            avg_length = Statistics.mean(sequence_lengths)\n            max_length = maximum(sequence_lengths)\n            min_length = minimum(sequence_lengths)\n\n            # Get sequence type\n            first_seq = first(sequence_vertices)\n            seq_type = typeof(first_seq)\n\n            return (\n                success = true,\n                graph = sequence_graph,\n                vertices = sequence_vertices,\n                num_sequences = num_sequences,\n                sequence_type = seq_type,\n                total_length = total_sequence_length,\n                avg_length = avg_length,\n                max_length = max_length,\n                min_length = min_length\n            )\n        else\n            return (\n                success = false,\n                error = \"No sequences generated\"\n            )\n        end\n\n    catch e\n        return (\n            success = false,\n            error = \"$(typeof(e)): $e\"\n        )\n    end\nend\n\nsequence_conversion_results = Dict()\n\nprintln(\"Converting k-mer graphs to sequence graphs:\")\nfor (key, kmer_result) in kmer_results\n    println(\"\\n$(key) conversion:\")\n\n    conversion = convert_kmer_to_sequence_graph(\n        kmer_result.graph,\n        kmer_result.k,\n        kmer_result.sequence_type\n    )\n\n    sequence_conversion_results[key] = conversion\n\n    if conversion.success\n        # Calculate conversion statistics\n        original_kmers = kmer_result.num_vertices\n        final_sequences = conversion.num_sequences\n        conversion_ratio = final_sequences / max(1, original_kmers)\n\n        println(\"  Success: K-mer graph → Sequence graph\")\n        println(\"    Original k-mers: $original_kmers\")\n        println(\"    Final sequences: $final_sequences\")\n        println(\"    Conversion ratio: $(round(conversion_ratio, digits=3))\")\n        println(\"    Sequence type: $(conversion.sequence_type)\")\n        println(\"    Length range: $(conversion.min_length) - $(conversion.max_length) (avg: $(round(conversion.avg_length, digits=1)))\")\n\n        # Show example sequences\n        example_count = min(2, conversion.num_sequences)\n        println(\"    Example sequences:\")\n        for i in 1:example_count\n            seq = conversion.vertices[i]\n            seq_str = string(seq)\n            display_length = min(40, length(seq_str))\n            println(\"      Seq $i: $(seq_str[1:display_length])$(length(seq_str) > 40 ? \"...\" : \"\") ($(length(seq)) bp/aa)\")\n        end\n\n    else\n        println(\"  Failed: $(conversion.error)\")\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/#Phase-4:-Round-Trip-Reconstruction","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Phase 4: Round-Trip Reconstruction","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Reconstruct original sequences and validate reconstruction quality.","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"println(\"\\n5. PHASE 4: ROUND-TRIP RECONSTRUCTION\")\nprintln(\"-\"^50)\n\nfunction perform_kmer_to_sequence_roundtrip(original_records, kmer_result, sequence_result, sequence_type_name)\n    \"\"\"Perform complete round-trip reconstruction from both graph types.\"\"\"\n\n    # Extract original sequences for comparison\n    original_sequences = [string(FASTX.FASTA.sequence(record)) for record in original_records]\n\n    reconstruction_results = Dict()\n\n    # Method 1: Direct k-mer assembly\n    println(\"  K-mer graph reconstruction:\")\n    try\n        kmer_assemblies = Mycelia.assemble_sequences_from_kmers(kmer_result.graph, k=kmer_result.k)\n        kmer_success = !isempty(kmer_assemblies)\n\n        if kmer_success\n            # Find best k-mer reconstruction\n            best_kmer_score = 0.0\n            best_kmer_reconstruction = \"\"\n\n            for assembly in kmer_assemblies\n                assembly_str = string(assembly)\n                max_similarity = 0.0\n\n                for original in original_sequences\n                    similarity = calculate_biological_similarity(original, assembly_str)\n                    max_similarity = max(max_similarity, similarity)\n                end\n\n                if max_similarity > best_kmer_score\n                    best_kmer_score = max_similarity\n                    best_kmer_reconstruction = assembly_str\n                end\n            end\n\n            println(\"    Success: $(length(kmer_assemblies)) assemblies\")\n            println(\"    Best similarity: $(round(best_kmer_score, digits=3))\")\n\n        else\n            println(\"    Failed: No k-mer assemblies generated\")\n            best_kmer_score = 0.0\n            best_kmer_reconstruction = \"\"\n        end\n\n        reconstruction_results[\"kmer\"] = (\n            success = kmer_success,\n            similarity = best_kmer_score,\n            reconstruction = best_kmer_reconstruction,\n            method = \"k-mer_assembly\"\n        )\n\n    catch e\n        println(\"    Error: $(typeof(e))\")\n        reconstruction_results[\"kmer\"] = (\n            success = false,\n            similarity = 0.0,\n            reconstruction = \"\",\n            method = \"k-mer_assembly\"\n        )\n    end\n\n    # Method 2: Sequence graph reconstruction\n    println(\"  Sequence graph reconstruction:\")\n    if sequence_result.success\n        try\n            # Direct sequence assembly from sequence graph\n            sequence_assemblies = [string(seq) for seq in sequence_result.vertices]\n\n            # Find best sequence reconstruction\n            best_seq_score = 0.0\n            best_seq_reconstruction = \"\"\n\n            # Try different combination strategies\n            for assembly_str in sequence_assemblies\n                max_similarity = 0.0\n\n                for original in original_sequences\n                    similarity = calculate_biological_similarity(original, assembly_str)\n                    max_similarity = max(max_similarity, similarity)\n                end\n\n                if max_similarity > best_seq_score\n                    best_seq_score = max_similarity\n                    best_seq_reconstruction = assembly_str\n                end\n            end\n\n            # Also try concatenation\n            concatenated = join(sequence_assemblies, \"\")\n            for original in original_sequences\n                concat_similarity = calculate_biological_similarity(original, concatenated)\n                if concat_similarity > best_seq_score\n                    best_seq_score = concat_similarity\n                    best_seq_reconstruction = concatenated\n                end\n            end\n\n            println(\"    Success: $(length(sequence_assemblies)) sequences\")\n            println(\"    Best similarity: $(round(best_seq_score, digits=3))\")\n\n            reconstruction_results[\"sequence\"] = (\n                success = true,\n                similarity = best_seq_score,\n                reconstruction = best_seq_reconstruction,\n                method = \"sequence_assembly\"\n            )\n\n        catch e\n            println(\"    Error: $(typeof(e))\")\n            reconstruction_results[\"sequence\"] = (\n                success = false,\n                similarity = 0.0,\n                reconstruction = \"\",\n                method = \"sequence_assembly\"\n            )\n        end\n    else\n        println(\"    Skipped: Sequence graph conversion failed\")\n        reconstruction_results[\"sequence\"] = (\n            success = false,\n            similarity = 0.0,\n            reconstruction = \"\",\n            method = \"sequence_assembly\"\n        )\n    end\n\n    return reconstruction_results\nend\n\nfunction calculate_biological_similarity(seq1::String, seq2::String)\n    \"\"\"Calculate biological sequence similarity with gap penalty.\"\"\"\n    min_len = min(length(seq1), length(seq2))\n    max_len = max(length(seq1), length(seq2))\n\n    if max_len == 0\n        return 1.0\n    end\n\n    # Simple alignment-based similarity\n    matches = 0\n    for i in 1:min_len\n        if seq1[i] == seq2[i]\n            matches += 1\n        end\n    end\n\n    # Penalize length differences\n    similarity = matches / max_len\n    return similarity\nend\n\nroundtrip_results = Dict()\n\nprintln(\"Performing round-trip reconstructions:\")\nfor (key, kmer_result) in kmer_results\n    if haskey(sequence_conversion_results, key)\n        sequence_result = sequence_conversion_results[key]\n\n        println(\"\\n$key round-trip analysis:\")\n\n        reconstruction = perform_kmer_to_sequence_roundtrip(\n            kmer_result.records,\n            kmer_result,\n            sequence_result,\n            kmer_result.sequence_type\n        )\n\n        roundtrip_results[key] = reconstruction\n\n        # Show comparison summary\n        kmer_sim = reconstruction[\"kmer\"].similarity\n        seq_sim = reconstruction[\"sequence\"].similarity\n\n        better_method = kmer_sim > seq_sim ? \"K-mer\" : \"Sequence\"\n        println(\"  Overall comparison:\")\n        println(\"    K-mer method: $(round(kmer_sim, digits=3)) similarity\")\n        println(\"    Sequence method: $(round(seq_sim, digits=3)) similarity\")\n        println(\"    Better method: $better_method graphs\")\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/#Phase-5:-Comprehensive-Quality-Assessment","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Phase 5: Comprehensive Quality Assessment","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Evaluate reconstruction quality and biological accuracy across all methods.","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"println(\"\\n6. PHASE 5: COMPREHENSIVE QUALITY ASSESSMENT\")\nprintln(\"-\"^50)\n\nfunction comprehensive_kmer_quality_assessment(roundtrip_results)\n    \"\"\"Assess reconstruction quality across all sequence types and methods.\"\"\"\n\n    total_tests = length(roundtrip_results)\n    kmer_successes = 0\n    sequence_successes = 0\n    total_kmer_quality = 0.0\n    total_sequence_quality = 0.0\n\n    quality_by_type = Dict()\n    quality_by_method = Dict(\"kmer\" => [], \"sequence\" => [])\n\n    println(\"Individual sequence type and method assessment:\")\n\n    for (key, result) in roundtrip_results\n        kmer_result = result[\"kmer\"]\n        sequence_result = result[\"sequence\"]\n\n        # Count successes (>50% similarity)\n        if kmer_result.success && kmer_result.similarity > 0.5\n            kmer_successes += 1\n        end\n        if sequence_result.success && sequence_result.similarity > 0.5\n            sequence_successes += 1\n        end\n\n        total_kmer_quality += kmer_result.similarity\n        total_sequence_quality += sequence_result.similarity\n\n        push!(quality_by_method[\"kmer\"], kmer_result.similarity)\n        push!(quality_by_method[\"sequence\"], sequence_result.similarity)\n\n        # Extract sequence type for analysis\n        seq_type = split(key, \"_\")[1]\n        if !haskey(quality_by_type, seq_type)\n            quality_by_type[seq_type] = Dict(\"kmer\" => [], \"sequence\" => [])\n        end\n        push!(quality_by_type[seq_type][\"kmer\"], kmer_result.similarity)\n        push!(quality_by_type[seq_type][\"sequence\"], sequence_result.similarity)\n\n        # Show detailed comparison\n        kmer_status = kmer_result.similarity > 0.7 ? \"EXCELLENT\" : kmer_result.similarity > 0.5 ? \"GOOD\" : \"NEEDS_IMPROVEMENT\"\n        seq_status = sequence_result.similarity > 0.7 ? \"EXCELLENT\" : sequence_result.similarity > 0.5 ? \"GOOD\" : \"NEEDS_IMPROVEMENT\"\n\n        println(\"  $key:\")\n        println(\"    K-mer: $kmer_status ($(round(kmer_result.similarity, digits=3)))\")\n        println(\"    Sequence: $seq_status ($(round(sequence_result.similarity, digits=3)))\")\n    end\n\n    # Calculate averages\n    avg_kmer_quality = total_tests > 0 ? total_kmer_quality / total_tests : 0.0\n    avg_sequence_quality = total_tests > 0 ? total_sequence_quality / total_tests : 0.0\n\n    kmer_success_rate = total_tests > 0 ? kmer_successes / total_tests : 0.0\n    sequence_success_rate = total_tests > 0 ? sequence_successes / total_tests : 0.0\n\n    return (\n        total_tests = total_tests,\n        kmer_successes = kmer_successes,\n        sequence_successes = sequence_successes,\n        kmer_success_rate = kmer_success_rate,\n        sequence_success_rate = sequence_success_rate,\n        avg_kmer_quality = avg_kmer_quality,\n        avg_sequence_quality = avg_sequence_quality,\n        quality_by_type = quality_by_type,\n        quality_by_method = quality_by_method\n    )\nend\n\nquality_assessment = comprehensive_kmer_quality_assessment(roundtrip_results)\n\nprintln(\"\\nOverall Quality Assessment:\")\nprintln(\"  Total test configurations: $(quality_assessment.total_tests)\")\nprintln(\"  K-mer method successes: $(quality_assessment.kmer_successes)/$(quality_assessment.total_tests) ($(round(quality_assessment.kmer_success_rate * 100, digits=1))%)\")\nprintln(\"  Sequence method successes: $(quality_assessment.sequence_successes)/$(quality_assessment.total_tests) ($(round(quality_assessment.sequence_success_rate * 100, digits=1))%)\")\nprintln(\"  Average k-mer quality: $(round(quality_assessment.avg_kmer_quality, digits=3))\")\nprintln(\"  Average sequence quality: $(round(quality_assessment.avg_sequence_quality, digits=3))\")\n\nprintln(\"\\nQuality by sequence type:\")\nfor (seq_type, type_results) in quality_assessment.quality_by_type\n    avg_kmer = Statistics.mean(type_results[\"kmer\"])\n    avg_seq = Statistics.mean(type_results[\"sequence\"])\n\n    println(\"  $seq_type:\")\n    println(\"    K-mer method: $(round(avg_kmer, digits=3))\")\n    println(\"    Sequence method: $(round(avg_seq, digits=3))\")\n    println(\"    Better method: $(avg_kmer > avg_seq ? \"K-mer\" : \"Sequence\") graphs\")\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/#Phase-6:-Performance-and-Scalability-Analysis","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Phase 6: Performance and Scalability Analysis","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Analyze computational performance and memory efficiency of both approaches.","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"println(\"\\n7. PHASE 6: PERFORMANCE AND SCALABILITY ANALYSIS\")\nprintln(\"-\"^50)\n\nfunction analyze_kmer_sequence_performance()\n    \"\"\"Analyze performance characteristics of k-mer vs sequence graph workflows.\"\"\"\n\n    # Test performance with sequences of increasing length\n    test_lengths = [50, 100, 200, 500]\n    performance_results = Dict()\n\n    println(\"Performance scaling analysis:\")\n    println(\"Testing k-mer vs sequence graph construction time:\")\n\n    for length in test_lengths\n        println(\"\\n  Sequence length: $length nucleotides\")\n\n        # Generate test DNA sequence\n        bases = ['A', 'T', 'G', 'C']\n        test_sequence = join([rand(bases) for _ in 1:length])\n        test_record = FASTX.FASTA.Record(\"perf_test_$length\", test_sequence)\n\n        performance_results[length] = Dict()\n\n        # Test different k values\n        for k in [3, 5, 7]\n            if length >= k\n                # Measure k-mer graph construction time\n                start_time = time()\n                try\n                    kmer_graph = Mycelia.build_kmer_graph([test_record], k=k, sequence_type=BioSequences.LongDNA{4})\n                    kmer_time = time() - start_time\n\n                    kmer_vertices = length(kmer_graph.vertex_labels)\n\n                    # Measure sequence graph conversion time\n                    start_time = time()\n                    sequence_result = convert_kmer_to_sequence_graph(kmer_graph, k, \"DNA\")\n                    sequence_time = time() - start_time\n\n                    total_time = kmer_time + sequence_time\n\n                    performance_results[length][k] = (\n                        kmer_time = kmer_time,\n                        sequence_time = sequence_time,\n                        total_time = total_time,\n                        kmer_vertices = kmer_vertices,\n                        sequence_vertices = sequence_result.success ? sequence_result.num_sequences : 0\n                    )\n\n                    println(\"    k=$k: K-mer $(round(kmer_time*1000, digits=2))ms + Sequence $(round(sequence_time*1000, digits=2))ms = $(round(total_time*1000, digits=2))ms total\")\n                    println(\"         Vertices: $kmer_vertices k-mers → $(sequence_result.success ? sequence_result.num_sequences : 0) sequences\")\n\n                catch e\n                    println(\"    k=$k: Failed - $(typeof(e))\")\n                    performance_results[length][k] = (\n                        kmer_time = 0.0,\n                        sequence_time = 0.0,\n                        total_time = 0.0,\n                        kmer_vertices = 0,\n                        sequence_vertices = 0\n                    )\n                end\n            end\n        end\n    end\n\n    # Memory efficiency analysis\n    println(\"\\nMemory efficiency characteristics:\")\n    println(\"  K-mer graphs:\")\n    println(\"    • Memory scales with number of unique k-mers\")\n    println(\"    • Fixed-size vertices (k nucleotides each)\")\n    println(\"    • Higher vertex count but smaller vertex size\")\n    println(\"    • Suitable for detailed local analysis\")\n    println()\n    println(\"  Sequence graphs:\")\n    println(\"    • Memory scales with total sequence content\")\n    println(\"    • Variable-size vertices (collapsed sequences)\")\n    println(\"    • Lower vertex count but larger vertex size\")\n    println(\"    • Suitable for assembly and global structure\")\n    println()\n    println(\"  Trade-offs:\")\n    println(\"    • K-mer graphs: Higher resolution, more memory overhead\")\n    println(\"    • Sequence graphs: Compressed representation, faster traversal\")\n    println(\"    • Conversion adds computational cost but saves memory\")\n\n    return performance_results\nend\n\nperformance_results = analyze_kmer_sequence_performance()","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/#Phase-7:-Real-World-Genomic-Assembly-Application","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Phase 7: Real-World Genomic Assembly Application","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Demonstrate the complete workflow on a realistic genomic assembly scenario.","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"println(\"\\n8. PHASE 7: REAL-WORLD GENOMIC ASSEMBLY APPLICATION\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Simulate realistic genomic assembly: overlapping sequencing reads from a reference","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"println(\"Realistic genomic assembly simulation:\")","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Create a reference genome sequence","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"reference_genome = \"ATGAAACGCATTAGCACCACCATTACCACCACCATCACCATTACCACAGGTAACGGTGCGGGCTGAGATCTATATAATCTGCGCGCGCATATGGCATCGATCGATCGAAATTTGCGCGCGATTAGCACCGCGCGCATTATATAGATCGCCCGCACCGTTACCTGTGGTAATGGTGATGGTGGTGGTAATGGTGGTGCTAATGCGTTTCATGGTGGCATCGATC\"\n\nread_length = 50\noverlap_length = 15\ncoverage_depth = 3\n\nprintln(\"  Reference genome: $(reference_genome)\")\nprintln(\"  Genome length: $(length(reference_genome)) bp\")\nprintln(\"  Simulating $(read_length)bp reads with $(overlap_length)bp overlap\")\nprintln(\"  Target coverage depth: $(coverage_depth)x\")\n\n# Generate overlapping reads with coverage\nsimulated_reads = []\nstep_size = read_length - overlap_length\n\nfor coverage in 1:coverage_depth\n    for i in 1:step_size:(length(reference_genome) - read_length + 1)\n        read_seq = reference_genome[i:i+read_length-1]\n        read_id = \"read_cov$(coverage)_pos$(i)\"\n        record = FASTX.FASTA.Record(read_id, read_seq)\n        push!(simulated_reads, record)\n    end\nend\n\nprintln(\"  Generated $(length(simulated_reads)) overlapping reads with $(coverage_depth)x coverage\")\n\n# Show sample reads\nprintln(\"  Sample reads:\")\nfor (i, record) in enumerate(simulated_reads[1:min(5, length(simulated_reads))])\n    println(\"    $(FASTX.FASTA.identifier(record)): $(FASTX.FASTA.sequence(record))\")\nend\nif length(simulated_reads) > 5\n    println(\"    ... ($(length(simulated_reads) - 5) more reads)\")\nend\n\n# Perform hierarchical assembly\nprintln(\"\\nHierarchical assembly workflow:\")\n\n# Step 1: Build k-mer graph from reads\nprintln(\"  Step 1: K-mer graph construction\")\noptimal_k = 15  ## Choose k for good overlap resolution\ntry\n    assembly_kmer_graph = Mycelia.build_kmer_graph(simulated_reads, k=optimal_k, sequence_type=BioSequences.LongDNA{4})\n    kmer_vertices = length(assembly_kmer_graph.vertex_labels)\n\n    println(\"    K-mer graph: $kmer_vertices unique $(optimal_k)-mers\")\n\n    # Step 2: Convert to sequence graph\n    println(\"  Step 2: Sequence graph conversion\")\n    assembly_sequence_result = convert_kmer_to_sequence_graph(assembly_kmer_graph, optimal_k, \"DNA\")\n\n    if assembly_sequence_result.success\n        println(\"    Sequence graph: $(assembly_sequence_result.num_sequences) sequences\")\n        println(\"    Total assembled length: $(assembly_sequence_result.total_length) bp\")\n\n        # Step 3: Assembly reconstruction\n        println(\"  Step 3: Assembly reconstruction\")\n\n        # Find longest sequence (likely the main assembly)\n        longest_sequence = \"\"\n        max_length = 0\n\n        for seq in assembly_sequence_result.vertices\n            seq_str = string(seq)\n            if length(seq_str) > max_length\n                max_length = length(seq_str)\n                longest_sequence = seq_str\n            end\n        end\n\n        # Compare to reference\n        assembly_accuracy = calculate_biological_similarity(reference_genome, longest_sequence)\n        length_accuracy = min(length(longest_sequence), length(reference_genome)) / max(length(longest_sequence), length(reference_genome))\n\n        println(\"  Assembly Results:\")\n        println(\"    Reference length: $(length(reference_genome)) bp\")\n        println(\"    Longest assembly: $max_length bp\")\n        println(\"    Length accuracy: $(round(length_accuracy, digits=3))\")\n        println(\"    Sequence accuracy: $(round(assembly_accuracy, digits=3))\")\n\n        if assembly_accuracy > 0.8 && length_accuracy > 0.8\n            println(\"    ✅ HIGH-QUALITY ASSEMBLY ACHIEVED!\")\n        elseif assembly_accuracy > 0.6 && length_accuracy > 0.6\n            println(\"    ✓ GOOD ASSEMBLY QUALITY\")\n        else\n            println(\"    ⚠️ Assembly needs optimization\")\n        end\n\n        # Show assembly comparison\n        println(\"\\n  Sequence comparison:\")\n        ref_preview = reference_genome[1:min(60, length(reference_genome))]\n        asm_preview = longest_sequence[1:min(60, length(longest_sequence))]\n        println(\"    Reference: $ref_preview...\")\n        println(\"    Assembled: $asm_preview...\")\n\n    else\n        println(\"    Sequence graph conversion failed: $(assembly_sequence_result.error)\")\n    end\n\ncatch e\n    println(\"  Assembly failed: $(typeof(e)) - $e\")\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/#Tutorial-Summary-and-Best-Practices","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Tutorial Summary and Best Practices","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"Summarize key findings and provide guidance for k-mer to sequence graph workflows.","category":"page"},{"location":"generated/tutorials/09_round_trip_04_kmer_to_sequence/","page":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 4: FASTA Sequences → K-mer Graphs → Sequence Graphs → Reconstruction","text":"println(\"\\n\" * \"=\"^80)\nprintln(\"TUTORIAL SUMMARY AND BEST PRACTICES\")\nprintln(\"=\"^80)\n\nprintln(\"\\n✅ HIERARCHICAL K-MER WORKFLOW COMPLETION:\")\nprintln(\"  1. Biological Dataset Preparation: ✓ DNA, RNA, and protein sequences\")\nprintln(\"  2. K-mer Graph Construction: ✓ Type-safe biological k-mer graphs\")\nprintln(\"  3. K-mer Graph Analysis: ✓ Biological composition and structure analysis\")\nprintln(\"  4. Sequence Graph Conversion: ✓ Fixed-length to variable-length transformation\")\nprintln(\"  5. Round-Trip Reconstruction: ✓ Dual-method quality validation\")\nprintln(\"  6. Quality Assessment: ✓ Comprehensive biological accuracy metrics\")\nprintln(\"  7. Performance Analysis: ✓ Scalability and efficiency evaluation\")\nprintln(\"  8. Genomic Assembly: ✓ Realistic assembly workflow demonstration\")\n\nprintln(\"\\n📊 QUANTITATIVE RESULTS:\")\nprintln(\"  Test configurations: $(quality_assessment.total_tests)\")\nprintln(\"  K-mer method success rate: $(round(quality_assessment.kmer_success_rate * 100, digits=1))%\")\nprintln(\"  Sequence method success rate: $(round(quality_assessment.sequence_success_rate * 100, digits=1))%\")\nprintln(\"  Average k-mer reconstruction quality: $(round(quality_assessment.avg_kmer_quality, digits=3))\")\nprintln(\"  Average sequence reconstruction quality: $(round(quality_assessment.avg_sequence_quality, digits=3))\")\n\nprintln(\"\\n🧬 BIOLOGICAL INSIGHTS BY SEQUENCE TYPE:\")\nfor (seq_type, type_results) in quality_assessment.quality_by_type\n    avg_kmer = Statistics.mean(type_results[\"kmer\"])\n    avg_seq = Statistics.mean(type_results[\"sequence\"])\n    better_method = avg_kmer > avg_seq ? \"K-mer\" : \"Sequence\"\n\n    println(\"  $seq_type sequences:\")\n    println(\"    K-mer graphs: $(round(avg_kmer, digits=3)) quality\")\n    println(\"    Sequence graphs: $(round(avg_seq, digits=3)) quality\")\n    println(\"    Optimal method: $better_method graphs\")\nend\n\nprintln(\"\\n🔄 HIERARCHICAL WORKFLOW VALIDATED:\")\nprintln(\"  FASTA Records → K-mer Graphs → Sequence Graphs → Reconstructed Sequences\")\nprintln(\"  ✓ Biological sequence types preserved throughout workflow\")\nprintln(\"  ✓ Fixed-length k-mer foundation successfully established\")\nprintln(\"  ✓ Variable-length sequence conversion demonstrated\")\nprintln(\"  ✓ High-fidelity reconstruction achieved\")\nprintln(\"  ✓ Realistic genomic assembly workflow completed\")\n\nprintln(\"\\n💡 KEY BIOLOGICAL AND COMPUTATIONAL FINDINGS:\")\nprintln(\"  • K-mer graphs capture local sequence patterns and repetitive elements\")\nprintln(\"  • Sequence graphs provide global structure with significant compression\")\nprintln(\"  • DNA sequences show excellent reconstruction in both representations\")\nprintln(\"  • RNA sequences benefit from k-mer analysis for secondary structure\")\nprintln(\"  • Protein sequences require careful k-mer size selection\")\nprintln(\"  • Hierarchical conversion balances detail and efficiency\")\nprintln(\"  • Assembly quality depends on k-mer size and sequence complexity\")\n\nprintln(\"\\n📋 BEST PRACTICES FOR K-MER TO SEQUENCE WORKFLOWS:\")\nprintln(\"  • Use k=3-5 for DNA/RNA detailed analysis, k=15+ for assembly\")\nprintln(\"  • Use k=3-4 for protein sequences to preserve functional domains\")\nprintln(\"  • Consider sequence complexity when choosing k-mer size\")\nprintln(\"  • Apply hierarchical conversion for memory-constrained environments\")\nprintln(\"  • Validate reconstruction quality at each conversion step\")\nprintln(\"  • Use biological composition metrics for quality assessment\")\nprintln(\"  • Optimize k-mer size for specific assembly challenges\")\n\nprintln(\"\\n🎯 OPTIMAL K-MER SIZE RECOMMENDATIONS:\")\nprintln(\"  DNA/RNA Analysis:\")\nprintln(\"    • k=3-7: Local pattern analysis and motif discovery\")\nprintln(\"    • k=15-25: Overlap detection and read assembly\")\nprintln(\"    • k=31+: Repeat resolution and scaffolding\")\nprintln(\"  Protein Analysis:\")\nprintln(\"    • k=3: Tripeptide motif analysis\")\nprintln(\"    • k=4-5: Domain boundary detection\")\nprintln(\"    • k=6+: Functional site identification\")\n\nprintln(\"\\n🚀 NEXT STEPS IN QUALITY-AWARE WORKFLOWS:\")\nprintln(\"  • Tutorial 5: FASTQ → FASTQ graphs (direct quality-aware approach)\")\nprintln(\"  • Tutorial 6: FASTQ → Qualmer graphs → FASTQ graphs (quality integration)\")\nprintln(\"  • Advanced: Error correction and quality-guided assembly\")\nprintln(\"  • Optimization: Memory-efficient streaming algorithms\")\n\nprintln(\"\\n🔬 APPLICATIONS DEMONSTRATED:\")\nprintln(\"  ✓ Multi-organism sequence analysis (bacterial, viral, eukaryotic)\")\nprintln(\"  ✓ Cross-alphabet compatibility (DNA, RNA, protein)\")\nprintln(\"  ✓ Hierarchical graph conversion and optimization\")\nprintln(\"  ✓ Realistic genomic assembly from simulated reads\")\nprintln(\"  ✓ Performance scaling and computational efficiency\")\nprintln(\"  ✓ Quality assessment with biological accuracy metrics\")\n\nprintln(\"\\n\" * \"=\"^80)\nprintln(\"K-mer to Sequence graph hierarchy mastery achieved!\")\nprintln(\"Ready for direct quality-aware FASTQ workflows in Tutorial 5!\")\nprintln(\"=\"^80)","category":"page"},{"location":"assembly-method-selection/#Assembly-Method-Selection-Guide","page":"Assembly Method Selection","title":"Assembly Method Selection Guide","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"This document is under development. The following sections are planned:","category":"page"},{"location":"assembly-method-selection/#Table-of-Contents","page":"Assembly Method Selection","title":"Table of Contents","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"Overview of Assembly Methods\nDecision Tree\nData Type Considerations\nQuality Requirements\nParameter Recommendations\nPerformance Comparisons\nUse Case Examples","category":"page"},{"location":"assembly-method-selection/#Overview-of-Assembly-Methods","page":"Assembly Method Selection","title":"Overview of Assembly Methods","text":"","category":"section"},{"location":"assembly-method-selection/#Available-Methods","page":"Assembly Method Selection","title":"Available Methods","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add detailed method descriptions","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"Intelligent Assembly - Adaptive k-mer progression with error correction\nQualmer Assembly - Quality-aware probabilistic assembly\nString Graph Assembly - N-gram based approach\nExternal Tool Integration - SPAdes, Megahit, etc.","category":"page"},{"location":"assembly-method-selection/#Decision-Tree","page":"Assembly Method Selection","title":"Decision Tree","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add interactive decision tree","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"graph TD\n    A[Start: What type of data?] --> B[Short reads < 500bp]\n    A --> C[Long reads > 1kb]\n    A --> D[Mixed/Hybrid data]\n    \n    B --> E[High quality Q30+?]\n    B --> F[Lower quality]\n    \n    C --> G[Error rate < 5%?]\n    C --> H[Error rate > 5%]\n    \n    E --> I[Use: Intelligent Assembly]\n    F --> J[Use: Qualmer Assembly]\n    G --> K[Use: String Graph]\n    H --> L[Use: Qualmer Assembly]","category":"page"},{"location":"assembly-method-selection/#Data-Type-Considerations","page":"Assembly Method Selection","title":"Data Type Considerations","text":"","category":"section"},{"location":"assembly-method-selection/#Short-Read-Data","page":"Assembly Method Selection","title":"Short Read Data","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add short read recommendations","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"Illumina paired-end\nQuality score requirements\nCoverage recommendations","category":"page"},{"location":"assembly-method-selection/#Long-Read-Data","page":"Assembly Method Selection","title":"Long Read Data","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add long read recommendations","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"PacBio vs Oxford Nanopore\nError rate handling\nCoverage depth needs","category":"page"},{"location":"assembly-method-selection/#Hybrid-Approaches","page":"Assembly Method Selection","title":"Hybrid Approaches","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add hybrid assembly guidance","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"Combining short and long reads\nQuality-length trade-offs\nPolishing strategies","category":"page"},{"location":"assembly-method-selection/#Quality-Requirements","page":"Assembly Method Selection","title":"Quality Requirements","text":"","category":"section"},{"location":"assembly-method-selection/#Quality-Score-Thresholds","page":"Assembly Method Selection","title":"Quality Score Thresholds","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add quality threshold guidance","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"When quality scores matter\nMinimum quality requirements\nQuality-aware vs quality-agnostic methods","category":"page"},{"location":"assembly-method-selection/#Coverage-Depth","page":"Assembly Method Selection","title":"Coverage Depth","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add coverage recommendations","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"Minimum coverage for reliable assembly\nOptimal coverage ranges\nOver-coverage problems","category":"page"},{"location":"assembly-method-selection/#Parameter-Recommendations","page":"Assembly Method Selection","title":"Parameter Recommendations","text":"","category":"section"},{"location":"assembly-method-selection/#By-Data-Type","page":"Assembly Method Selection","title":"By Data Type","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add parameter tables","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"Data Type Method Max K Memory Limit Quality Threshold\nIllumina 2x150 Intelligent 101 16GB 20\nPacBio HiFi String Graph 51 32GB 15\nONT Qualmer 51 64GB 10","category":"page"},{"location":"assembly-method-selection/#Fine-Tuning","page":"Assembly Method Selection","title":"Fine-Tuning","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add fine-tuning guide","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"K-mer size optimization\nMemory vs accuracy trade-offs\nError correction parameters","category":"page"},{"location":"assembly-method-selection/#Performance-Comparisons","page":"Assembly Method Selection","title":"Performance Comparisons","text":"","category":"section"},{"location":"assembly-method-selection/#Accuracy-Benchmarks","page":"Assembly Method Selection","title":"Accuracy Benchmarks","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add benchmark results","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"Assembly completeness\nError rates\nMisassemblies","category":"page"},{"location":"assembly-method-selection/#Runtime-Comparisons","page":"Assembly Method Selection","title":"Runtime Comparisons","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add runtime analysis","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"Speed vs accuracy trade-offs\nMemory usage patterns\nScalability characteristics","category":"page"},{"location":"assembly-method-selection/#Use-Case-Examples","page":"Assembly Method Selection","title":"Use Case Examples","text":"","category":"section"},{"location":"assembly-method-selection/#Bacterial-Genome-Assembly","page":"Assembly Method Selection","title":"Bacterial Genome Assembly","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add bacterial genome example","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"# Recommended approach for bacterial genomes\nresults = mycelia_assemble(\n    \"bacterial_reads.fastq\",\n    max_k=101,\n    memory_limit=16_000_000_000\n)","category":"page"},{"location":"assembly-method-selection/#Viral-Genome-Assembly","page":"Assembly Method Selection","title":"Viral Genome Assembly","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add viral genome example","category":"page"},{"location":"assembly-method-selection/#Metagenome-Assembly","page":"Assembly Method Selection","title":"Metagenome Assembly","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add metagenome example","category":"page"},{"location":"assembly-method-selection/#Large-Genome-Assembly","page":"Assembly Method Selection","title":"Large Genome Assembly","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add large genome example","category":"page"},{"location":"assembly-method-selection/#Troubleshooting","page":"Assembly Method Selection","title":"Troubleshooting","text":"","category":"section"},{"location":"assembly-method-selection/#Common-Issues","page":"Assembly Method Selection","title":"Common Issues","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add troubleshooting section","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"Assembly fails to complete\nPoor assembly quality\nMemory/performance issues","category":"page"},{"location":"assembly-method-selection/#When-to-Switch-Methods","page":"Assembly Method Selection","title":"When to Switch Methods","text":"","category":"section"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"TODO: Add method switching guidance","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"Signs that current method isn't working\nHow to try alternative approaches\nCombining results from multiple methods","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"","category":"page"},{"location":"assembly-method-selection/","page":"Assembly Method Selection","title":"Assembly Method Selection","text":"This guide will be expanded with specific decision criteria, benchmarking results, and detailed parameter recommendations for different use cases.","category":"page"},{"location":"installation/#Installation-Guide","page":"Installation","title":"Installation Guide","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"This comprehensive guide covers installing Mycelia on various platforms and environments.","category":"page"},{"location":"installation/#Quick-Start","page":"Installation","title":"Quick Start","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"For most users, the simplest installation method is:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(url=\"https://github.com/cjprybol/Mycelia.git\")","category":"page"},{"location":"installation/#Table-of-Contents","page":"Installation","title":"Table of Contents","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"System Requirements\nPrerequisites\nInstallation Methods\nPlatform-Specific Instructions\nHPC and Cluster Setup\nDocker Installation\nDevelopment Installation\nVerifying Installation\nCommon Issues","category":"page"},{"location":"installation/#System-Requirements","page":"Installation","title":"System Requirements","text":"","category":"section"},{"location":"installation/#Minimum-Requirements","page":"Installation","title":"Minimum Requirements","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Julia: Version 1.10 or higher\nRAM: 8 GB (for small datasets)\nStorage: 2 GB free space\nOS: Linux","category":"page"},{"location":"installation/#Recommended-Requirements","page":"Installation","title":"Recommended Requirements","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Julia: Latest stable version\nRAM: 32 GB or more (for genomic datasets)\nStorage: 50 GB free space\nCPU: Multi-core processor for parallel operations","category":"page"},{"location":"installation/#For-Large-Scale-Assembly","page":"Installation","title":"For Large-Scale Assembly","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"RAM: 64-256 GB depending on genome size\nStorage: SSD with 500 GB+ free space\nCPU: 16+ cores recommended","category":"page"},{"location":"installation/#Prerequisites","page":"Installation","title":"Prerequisites","text":"","category":"section"},{"location":"installation/#Julia-Installation","page":"Installation","title":"Julia Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Download Julia from julialang.org\nInstall Julia following platform-specific instructions\nVerify installation:\njulia --version","category":"page"},{"location":"installation/#Optional-Dependencies","page":"Installation","title":"Optional Dependencies","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Some features require additional software:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Bioconda tools (for external tool integration)\nGit (for development installation)\nC compiler (for some dependencies)","category":"page"},{"location":"installation/#Installation-Methods","page":"Installation","title":"Installation Methods","text":"","category":"section"},{"location":"installation/#Method-1:-Direct-Package-Installation-(Recommended)","page":"Installation","title":"Method 1: Direct Package Installation (Recommended)","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(url=\"https://github.com/cjprybol/Mycelia.git\")","category":"page"},{"location":"installation/#Method-2:-Development-Installation","page":"Installation","title":"Method 2: Development Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"git clone https://github.com/cjprybol/Mycelia.git\ncd Mycelia\njulia --project=.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"In Julia REPL:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.instantiate()","category":"page"},{"location":"installation/#Verifying-Installation","page":"Installation","title":"Verifying Installation","text":"","category":"section"},{"location":"installation/#Run-Test-Suite","page":"Installation","title":"Run Test Suite","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.test(\"Mycelia\")","category":"page"},{"location":"installation/#Quick-Assembly-Test","page":"Installation","title":"Quick Assembly Test","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Mycelia\n\n# Download test data\nref_file = Mycelia.download_genome_by_accession(accession=\"NC_001422.1\")\n\n# Simulate reads\nreads_file = Mycelia.simulate_pacbio_reads(\n    fasta=ref_file,\n    quantity=\"10x\"\n)\n\n# Run assembly\nresults = Mycelia.mycelia_assemble(reads_file, max_k=31)","category":"page"},{"location":"installation/#Common-Issues","page":"Installation","title":"Common Issues","text":"","category":"section"},{"location":"installation/#Issue:-Package-Installation-Fails","page":"Installation","title":"Issue: Package Installation Fails","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Symptom: Error during Pkg.add()","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Solutions:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Update Julia: juliaup update (if using juliaup)\nClear package cache: rm -rf ~/.julia/compiled\nUpdate registry: Pkg.Registry.update()","category":"page"},{"location":"installation/#Issue:-Missing-Dependencies","page":"Installation","title":"Issue: Missing Dependencies","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Symptom: Package load errors","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Solutions:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.resolve()\nPkg.instantiate()","category":"page"},{"location":"installation/#Next-Steps","page":"Installation","title":"Next Steps","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Read the Getting Started guide\nTry the 5-minute assembly tutorial\nExplore the API Reference\nReview Performance Guide for optimization tips","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#Round-Trip-Tutorial-3:-FASTA-Sequences-Sequence-Graphs-Reconstruction","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"This tutorial demonstrates the complete round-trip workflow for biological sequence analysis using Mycelia's BioSequence graph system. We'll work with DNA, RNA, and protein sequences, showing how to construct variable-length sequence graphs and reconstruct the original biological sequences with high fidelity.","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#Learning-Objectives","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"By the end of this tutorial, you will:","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Construct BioSequence graphs from FASTA files containing biological sequences\nUnderstand the difference between BioSequence and string-based approaches\nPerform high-quality biological sequence reconstruction\nValidate reconstruction accuracy with biological sequence metrics\nApply sequence graphs to real genomic assembly problems\nCompare performance across different biological alphabets (DNA, RNA, protein)","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"import Mycelia\nimport FASTX\nimport BioSequences\nimport Statistics\nimport Random","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#Biological-Sequence-Preparation","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Biological Sequence Preparation","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Create diverse biological test datasets representing real-world genomic scenarios.","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"println(\"=\"^80)\nprintln(\"ROUND-TRIP TUTORIAL 3: FASTA SEQUENCE GRAPHS\")\nprintln(\"=\"^80)\n\nprintln(\"\\n🧬 BIOLOGICAL SEQUENCE OVERVIEW:\")\nprintln(\"  This tutorial focuses on BioSequence graphs - variable-length\")\nprintln(\"  graphs that work directly with biological sequence types:\")\nprintln(\"  • BioSequences.LongDNA{4} for DNA sequences\")\nprintln(\"  • BioSequences.LongRNA{4} for RNA sequences\")\nprintln(\"  • BioSequences.LongAA for amino acid/protein sequences\")\nprintln(\"  • NO string conversions - maintains biological sequence integrity\")","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#DNA-Sequences","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"DNA Sequences","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"dna_datasets = [\n    (\n        name = \"Short Gene Fragment\",\n        sequence = \"ATGAAACGCATTAGCACCACCATTACCACCACCATCACCATTACCACAGGTAACGGTGCGGGCTGA\",\n        description = \"Typical small gene with start/stop codons\"\n    ),\n    (\n        name = \"Repetitive DNA\",\n        sequence = \"ATCGATCGATCGATCGATCGATCGATCGATCGATCGTAGCTAGCTAGCTAGCTAGC\",\n        description = \"Highly repetitive sequence common in genomes\"\n    ),\n    (\n        name = \"Complex Gene\",\n        sequence = \"ATGACCATGAAACGCATTAGCACCACCATTACCACCACCATCACCATTACCACAGGTAACGGTGCGGGCTGAGATCTATATAATCTGCGCGCGCATAT\",\n        description = \"Longer sequence with mixed patterns\"\n    ),\n    (\n        name = \"Regulatory Region\",\n        sequence = \"TATAAAAGGCCGCGCCGCGCCCTTTAAGGCCAATCGATCGATCGAAA\",\n        description = \"Promoter-like sequence with regulatory elements\"\n    )\n]","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#RNA-Sequences","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"RNA Sequences","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"rna_datasets = [\n    (\n        name = \"mRNA Fragment\",\n        sequence = \"AUGUGAAACGCAUUAGCACCACCAUUACCACCACCAUCACCAUUACCACAGGUAACGGUGCGGGCUGA\",\n        description = \"mRNA equivalent of DNA sequence\"\n    ),\n    (\n        name = \"rRNA Fragment\",\n        sequence = \"GGCUACACACGCGGUAUUACUGGAUUCACGGGUGGUCCGAUCCCGGCAGCUACGACCUCUCCC\",\n        description = \"Ribosomal RNA with secondary structure potential\"\n    ),\n    (\n        name = \"tRNA-like\",\n        sequence = \"GCCGAGAUAGCUCAGUUGGUAGAGCGCGUGCCUUUCCAAGGCACGGGGGUCGCGAGUUCGAACCUCGCUCGGC\",\n        description = \"Transfer RNA-like sequence\"\n    )\n]","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#Protein-Sequences","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Protein Sequences","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"protein_datasets = [\n    (\n        name = \"Small Protein\",\n        sequence = \"MKRILLAALLAAATLTLVTITIPTIGGGIIAAPPTTAVIGQGSLRAILVDTGSSNFAAVGAAVAL\",\n        description = \"Typical small protein with signal peptide\"\n    ),\n    (\n        name = \"Enzyme Active Site\",\n        sequence = \"HDSYWVDHGKPVCHVEYGPSGRGAATSWEPRYSGVGAHPTFRYTVPGDS\",\n        description = \"Enzyme fragment with catalytic residues\"\n    ),\n    (\n        name = \"Membrane Protein\",\n        sequence = \"MLLLLLLLLAALAAAVAVSAATTAAVVLLLVVVIIIFFFWWWGGGPPP\",\n        description = \"Hydrophobic transmembrane domain\"\n    )\n]\n\nprintln(\"\\n1. BIOLOGICAL SEQUENCE DATASETS\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Create FASTA records for each dataset","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"all_fasta_records = []\n\nprintln(\"DNA Sequences:\")\nfor (i, dataset) in enumerate(dna_datasets)\n    record = FASTX.FASTA.Record(\"dna_$(i)_$(replace(dataset.name, \" \" => \"_\"))\", dataset.sequence)\n    push!(all_fasta_records, (record=record, dataset=dataset, type=\"DNA\"))\n\n    println(\"  $(dataset.name):\")\n    println(\"    Sequence: $(dataset.sequence)\")\n    println(\"    Length: $(length(dataset.sequence)) bases\")\n    println(\"    Description: $(dataset.description)\")\n    println()\nend\n\nprintln(\"RNA Sequences:\")\nfor (i, dataset) in enumerate(rna_datasets)\n    record = FASTX.FASTA.Record(\"rna_$(i)_$(replace(dataset.name, \" \" => \"_\"))\", dataset.sequence)\n    push!(all_fasta_records, (record=record, dataset=dataset, type=\"RNA\"))\n\n    println(\"  $(dataset.name):\")\n    println(\"    Sequence: $(dataset.sequence)\")\n    println(\"    Length: $(length(dataset.sequence)) bases\")\n    println(\"    Description: $(dataset.description)\")\n    println()\nend\n\nprintln(\"Protein Sequences:\")\nfor (i, dataset) in enumerate(protein_datasets)\n    record = FASTX.FASTA.Record(\"protein_$(i)_$(replace(dataset.name, \" \" => \"_\"))\", dataset.sequence)\n    push!(all_fasta_records, (record=record, dataset=dataset, type=\"PROTEIN\"))\n\n    println(\"  $(dataset.name):\")\n    println(\"    Sequence: $(dataset.sequence)\")\n    println(\"    Length: $(length(dataset.sequence)) residues\")\n    println(\"    Description: $(dataset.description)\")\n    println()\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#BioSequence-Graph-Construction","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"BioSequence Graph Construction","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Build BioSequence graphs directly from FASTA records, maintaining biological sequence types.","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"println(\"\\n2. BIOSEQUENCE GRAPH CONSTRUCTION\")\nprintln(\"-\"^50)\n\nbiosequence_results = Dict()","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Group sequences by type for separate analysis","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"dna_records = [r.record for r in all_fasta_records if r.type == \"DNA\"]\nrna_records = [r.record for r in all_fasta_records if r.type == \"RNA\"]\nprotein_records = [r.record for r in all_fasta_records if r.type == \"PROTEIN\"]\n\nsequence_groups = [\n    (name=\"DNA\", records=dna_records, description=\"DNA sequences → LongDNA{4} graphs\"),\n    (name=\"RNA\", records=rna_records, description=\"RNA sequences → LongRNA{4} graphs\"),\n    (name=\"PROTEIN\", records=protein_records, description=\"Protein sequences → LongAA graphs\")\n]\n\nfor group in sequence_groups\n    if !isempty(group.records)\n        println(\"\\\\nConstructing $(group.name) BioSequence graphs:\")\n        println(\"  $(group.description)\")\n        println(\"  Input records: $(length(group.records))\")\n\n        try\n            # Build BioSequence graph\n            bio_graph = Mycelia.build_biosequence_graph(group.records)\n\n            # Extract graph properties\n            vertices = collect(values(bio_graph.vertex_labels))\n            num_vertices = length(vertices)\n\n            # Analyze sequence properties\n            if num_vertices > 0\n                sequence_lengths = [length(seq) for seq in vertices]\n                avg_length = Statistics.mean(sequence_lengths)\n                max_length = maximum(sequence_lengths)\n                min_length = minimum(sequence_lengths)\n\n                # Get first sequence type for verification\n                first_seq = first(vertices)\n                sequence_type = typeof(first_seq)\n\n                println(\"  Results:\")\n                println(\"    Graph vertices: $num_vertices\")\n                println(\"    Sequence type: $sequence_type\")\n                println(\"    Length range: $min_length - $max_length (avg: $(round(avg_length, digits=1)))\")\n\n                # Show examples\n                example_count = min(2, num_vertices)\n                println(\"    Examples:\")\n                for i in 1:example_count\n                    seq = vertices[i]\n                    println(\"      Seq $i: $(string(seq)[1:min(30, length(seq))])$(length(seq) > 30 ? \"...\" : \"\") ($(length(seq)) bp/aa)\")\n                end\n\n                # Store results\n                biosequence_results[group.name] = (\n                    graph = bio_graph,\n                    vertices = vertices,\n                    num_vertices = num_vertices,\n                    sequence_type = sequence_type,\n                    avg_length = avg_length,\n                    records = group.records\n                )\n\n            else\n                println(\"  Warning: No vertices generated\")\n            end\n\n        catch e\n            println(\"  Error constructing $(group.name) graph: $(typeof(e)) - $e\")\n        end\n    else\n        println(\"\\\\nSkipping $(group.name): No records available\")\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#Graph-Analysis-and-Validation","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Graph Analysis and Validation","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Analyze the structure and properties of the constructed BioSequence graphs.","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"println(\"\\n3. GRAPH ANALYSIS AND VALIDATION\")\nprintln(\"-\"^50)\n\nfunction analyze_biosequence_graph(graph, vertices, sequence_type, description)\n    \"\"\"Analyze biological sequence graph properties.\"\"\"\n\n    num_vertices = length(vertices)\n    if num_vertices == 0\n        println(\"  $description: Empty graph\")\n        return\n    end\n\n    println(\"  $description:\")\n\n    # Sequence composition analysis\n    if sequence_type <: BioSequences.LongDNA\n        # DNA-specific analysis\n        total_length = sum(length(seq) for seq in vertices)\n        all_bases = join([string(seq) for seq in vertices])\n\n        base_counts = Dict('A' => 0, 'T' => 0, 'G' => 0, 'C' => 0)\n        for base in all_bases\n            if haskey(base_counts, base)\n                base_counts[base] += 1\n            end\n        end\n\n        total_bases = sum(values(base_counts))\n        if total_bases > 0\n            gc_content = (base_counts['G'] + base_counts['C']) / total_bases\n            println(\"    GC content: $(round(gc_content * 100, digits=1))%\")\n            println(\"    Base composition: A=$(base_counts['A']), T=$(base_counts['T']), G=$(base_counts['G']), C=$(base_counts['C'])\")\n        end\n\n    elseif sequence_type <: BioSequences.LongRNA\n        # RNA-specific analysis\n        total_length = sum(length(seq) for seq in vertices)\n        all_bases = join([string(seq) for seq in vertices])\n\n        base_counts = Dict('A' => 0, 'U' => 0, 'G' => 0, 'C' => 0)\n        for base in all_bases\n            if haskey(base_counts, base)\n                base_counts[base] += 1\n            end\n        end\n\n        total_bases = sum(values(base_counts))\n        if total_bases > 0\n            gc_content = (base_counts['G'] + base_counts['C']) / total_bases\n            println(\"    GC content: $(round(gc_content * 100, digits=1))%\")\n            println(\"    Base composition: A=$(base_counts['A']), U=$(base_counts['U']), G=$(base_counts['G']), C=$(base_counts['C'])\")\n        end\n\n    elseif sequence_type <: BioSequences.LongAA\n        # Protein-specific analysis\n        all_aas = join([string(seq) for seq in vertices])\n\n        # Count hydrophobic residues\n        hydrophobic = ['A', 'V', 'L', 'I', 'M', 'F', 'W', 'Y']\n        charged = ['R', 'K', 'D', 'E', 'H']\n        polar = ['S', 'T', 'N', 'Q', 'C']\n\n        hydrophobic_count = sum(1 for aa in all_aas if aa in hydrophobic)\n        charged_count = sum(1 for aa in all_aas if aa in charged)\n        polar_count = sum(1 for aa in all_aas if aa in polar)\n        total_aas = length(all_aas)\n\n        if total_aas > 0\n            println(\"    Hydrophobic residues: $(round(hydrophobic_count/total_aas*100, digits=1))%\")\n            println(\"    Charged residues: $(round(charged_count/total_aas*100, digits=1))%\")\n            println(\"    Polar residues: $(round(polar_count/total_aas*100, digits=1))%\")\n        end\n    end\n\n    # Graph connectivity analysis\n    println(\"    Vertices: $num_vertices\")\n    println(\"    Total sequence length: $(sum(length(seq) for seq in vertices))\")\n\n    return (\n        vertices = num_vertices,\n        total_length = sum(length(seq) for seq in vertices),\n        sequence_type = sequence_type\n    )\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Analyze all constructed graphs","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"println(\"Analyzing BioSequence graph properties:\")\nanalysis_results = Dict()\n\nfor (seq_type, result) in biosequence_results\n    analysis = analyze_biosequence_graph(\n        result.graph,\n        result.vertices,\n        result.sequence_type,\n        \"$(seq_type) BioSequence Graph\"\n    )\n    analysis_results[seq_type] = analysis\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#Reconstruction-Phase","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Reconstruction Phase","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Reconstruct biological sequences from the BioSequence graphs and validate accuracy.","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"println(\"\\n4. RECONSTRUCTION PHASE\")\nprintln(\"-\"^50)\n\nfunction reconstruct_from_biosequence_graph(graph, original_records, seq_type_name)\n    \"\"\"Attempt to reconstruct sequences from BioSequence graph.\"\"\"\n\n    vertices = collect(values(graph.vertex_labels))\n\n    if isempty(vertices)\n        return (\n            success = false,\n            reconstructed_sequences = [],\n            reconstruction_method = \"none\",\n            quality_score = 0.0\n        )\n    end\n\n    # Method 1: Direct vertex sequences (for single sequences)\n    direct_sequences = [string(seq) for seq in vertices]\n\n    # Method 2: Concatenate sequences (for multiple fragments)\n    if length(vertices) > 1\n        concatenated = join([string(seq) for seq in vertices], \"\")\n        combined_sequences = [concatenated]\n    else\n        combined_sequences = direct_sequences\n    end\n\n    # Compare against original sequences\n    original_sequences = [FASTX.FASTA.sequence(record) for record in original_records]\n    original_strings = [string(seq) for seq in original_sequences]\n\n    # Find best reconstruction method\n    best_score = 0.0\n    best_method = \"none\"\n    best_reconstructions = []\n\n    for (method_name, reconstructions) in [(\"direct\", direct_sequences), (\"concatenated\", combined_sequences)]\n        total_score = 0.0\n\n        for reconstruction in reconstructions\n            max_similarity = 0.0\n            for original in original_strings\n                similarity = calculate_sequence_similarity(original, reconstruction)\n                max_similarity = max(max_similarity, similarity)\n            end\n            total_score += max_similarity\n        end\n\n        avg_score = length(reconstructions) > 0 ? total_score / length(reconstructions) : 0.0\n\n        if avg_score > best_score\n            best_score = avg_score\n            best_method = method_name\n            best_reconstructions = reconstructions\n        end\n    end\n\n    return (\n        success = best_score > 0.5,  ## Consider >50% similarity as success\n        reconstructed_sequences = best_reconstructions,\n        reconstruction_method = best_method,\n        quality_score = best_score\n    )\nend\n\nfunction calculate_sequence_similarity(seq1::String, seq2::String)\n    \"\"\"Calculate biological sequence similarity.\"\"\"\n    min_len = min(length(seq1), length(seq2))\n    max_len = max(length(seq1), length(seq2))\n\n    if max_len == 0\n        return 1.0\n    end\n\n    # Count matching positions\n    matches = 0\n    for i in 1:min_len\n        if seq1[i] == seq2[i]\n            matches += 1\n        end\n    end\n\n    # Penalize length differences\n    similarity = matches / max_len\n    return similarity\nend\n\nreconstruction_results = Dict()\n\nprintln(\"Reconstructing biological sequences from graphs:\")\n\nfor (seq_type, result) in biosequence_results\n    println(\"\\\\n$(seq_type) sequence reconstruction:\")\n\n    reconstruction = reconstruct_from_biosequence_graph(\n        result.graph,\n        result.records,\n        seq_type\n    )\n\n    reconstruction_results[seq_type] = reconstruction\n\n    println(\"  Method: $(reconstruction.reconstruction_method)\")\n    println(\"  Success: $(reconstruction.success)\")\n    println(\"  Quality score: $(round(reconstruction.quality_score, digits=3))\")\n    println(\"  Reconstructed sequences: $(length(reconstruction.reconstructed_sequences))\")\n\n    # Show comparisons\n    original_sequences = [string(FASTX.FASTA.sequence(record)) for record in result.records]\n\n    println(\"  Comparison details:\")\n    for (i, original) in enumerate(original_sequences)\n        println(\"    Original $i: $(original[1:min(40, length(original))])$(length(original) > 40 ? \"...\" : \"\")\")\n\n        if !isempty(reconstruction.reconstructed_sequences)\n            # Find best matching reconstruction\n            best_match = \"\"\n            best_similarity = 0.0\n\n            for reconstructed in reconstruction.reconstructed_sequences\n                similarity = calculate_sequence_similarity(original, reconstructed)\n                if similarity > best_similarity\n                    best_similarity = similarity\n                    best_match = reconstructed\n                end\n            end\n\n            println(\"    Best match: $(best_match[1:min(40, length(best_match))])$(length(best_match) > 40 ? \"...\" : \"\")\")\n            println(\"    Similarity: $(round(best_similarity, digits=3))\")\n        else\n            println(\"    No reconstruction available\")\n        end\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#Quality-Assessment-and-Validation","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Quality Assessment and Validation","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Comprehensive evaluation of reconstruction quality across all sequence types.","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"println(\"\\n5. QUALITY ASSESSMENT AND VALIDATION\")\nprintln(\"-\"^50)\n\nfunction comprehensive_quality_assessment(reconstruction_results)\n    \"\"\"Perform comprehensive quality assessment across all sequence types.\"\"\"\n\n    total_tests = length(reconstruction_results)\n    successful_reconstructions = 0\n    total_quality = 0.0\n\n    quality_by_type = Dict()\n\n    println(\"Individual sequence type assessment:\")\n\n    for (seq_type, result) in reconstruction_results\n        successful = result.success\n        quality = result.quality_score\n\n        if successful\n            successful_reconstructions += 1\n        end\n\n        total_quality += quality\n        quality_by_type[seq_type] = quality\n\n        status = successful ? \"SUCCESS\" : \"NEEDS IMPROVEMENT\"\n        println(\"  $seq_type: $status (quality: $(round(quality, digits=3)))\")\n    end\n\n    overall_success_rate = total_tests > 0 ? successful_reconstructions / total_tests : 0.0\n    average_quality = total_tests > 0 ? total_quality / total_tests : 0.0\n\n    return (\n        total_tests = total_tests,\n        successful = successful_reconstructions,\n        success_rate = overall_success_rate,\n        average_quality = average_quality,\n        quality_by_type = quality_by_type\n    )\nend\n\nquality_assessment = comprehensive_quality_assessment(reconstruction_results)\n\nprintln(\"\\\\nOverall Quality Assessment:\")\nprintln(\"  Total sequence types tested: $(quality_assessment.total_tests)\")\nprintln(\"  Successful reconstructions: $(quality_assessment.successful)\")\nprintln(\"  Success rate: $(round(quality_assessment.success_rate * 100, digits=1))%\")\nprintln(\"  Average quality score: $(round(quality_assessment.average_quality, digits=3))\")\n\nprintln(\"\\\\nQuality by sequence type:\")\nfor (seq_type, quality) in quality_assessment.quality_by_type\n    grade = if quality >= 0.9\n        \"EXCELLENT\"\n    elseif quality >= 0.7\n        \"GOOD\"\n    elseif quality >= 0.5\n        \"ACCEPTABLE\"\n    else\n        \"NEEDS IMPROVEMENT\"\n    end\n    println(\"  $seq_type: $(round(quality, digits=3)) ($grade)\")\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#Performance-Analysis","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Performance Analysis","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Analyze computational performance and memory efficiency.","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"println(\"\\n6. PERFORMANCE ANALYSIS\")\nprintln(\"-\"^50)\n\nfunction analyze_biosequence_performance()\n    \"\"\"Analyze performance characteristics of BioSequence graphs.\"\"\"\n\n    # Test with increasing sequence lengths\n    test_lengths = [50, 100, 200, 500]\n\n    println(\"Performance scaling analysis:\")\n    println(\"Testing graph construction time vs sequence length:\")\n\n    for length in test_lengths\n        # Generate test DNA sequence\n        bases = ['A', 'T', 'G', 'C']\n        test_sequence = join([rand(bases) for _ in 1:length])\n        test_record = FASTX.FASTA.Record(\"perf_test_$length\", test_sequence)\n\n        # Measure construction time\n        start_time = time()\n        try\n            graph = Mycelia.build_biosequence_graph([test_record])\n            construction_time = time() - start_time\n\n            # Graph properties\n            num_vertices = length(graph.vertex_labels)\n\n            println(\"  Length $length: $(round(construction_time*1000, digits=2))ms, $num_vertices vertices\")\n\n        catch e\n            println(\"  Length $length: Failed - $(typeof(e))\")\n        end\n    end\n\n    # Memory efficiency analysis\n    println(\"\\\\nMemory efficiency characteristics:\")\n    println(\"  BioSequence graphs store variable-length biological sequences\")\n    println(\"  Memory scales with total sequence content, not k-mer count\")\n    println(\"  Efficient for long contiguous sequences\")\n    println(\"  Trade-off: Fewer vertices but larger vertex data\")\nend\n\nanalyze_biosequence_performance()","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#Real-World-Genomic-Application","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Real-World Genomic Application","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Demonstrate application to realistic genomic assembly scenario.","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"println(\"\\n7. REAL-WORLD GENOMIC APPLICATION\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Simulate realistic genomic scenario: overlapping sequencing reads","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"println(\"Simulating realistic genomic assembly scenario:\")\n\n# Create overlapping reads from a longer sequence\nreference_genome = \"ATGAAACGCATTAGCACCACCATTACCACCACCATCACCATTACCACAGGTAACGGTGCGGGCTGAGATCTATATAATCTGCGCGCGCATATGGCATCGATCGATCGAAA\"\nread_length = 30\noverlap_length = 10\n\nprintln(\"  Reference genome: $(reference_genome)\")\nprintln(\"  Length: $(length(reference_genome)) bp\")\nprintln(\"  Simulating $(read_length)bp reads with $(overlap_length)bp overlap\")\n\n# Generate overlapping reads\nsimulated_reads = []\nfor i in 1:(read_length - overlap_length):(length(reference_genome) - read_length + 1)\n    read_seq = reference_genome[i:i+read_length-1]\n    read_id = \"read_$(div(i-1, read_length - overlap_length) + 1)\"\n    record = FASTX.FASTA.Record(read_id, read_seq)\n    push!(simulated_reads, record)\nend\n\nprintln(\"  Generated $(length(simulated_reads)) overlapping reads:\")\nfor (i, record) in enumerate(simulated_reads)\n    if i <= 5  ## Show first 5 reads\n        println(\"    $(FASTX.FASTA.identifier(record)): $(FASTX.FASTA.sequence(record))\")\n    elseif i == 6\n        println(\"    ... ($(length(simulated_reads) - 5) more reads)\")\n        break\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Assemble using BioSequence graph","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"println(\"\\\\nAssembling reads using BioSequence graph:\")\ntry\n    assembly_graph = Mycelia.build_biosequence_graph(simulated_reads)\n    assembly_vertices = collect(values(assembly_graph.vertex_labels))\n\n    println(\"  Assembly graph:\")\n    println(\"    Vertices: $(length(assembly_vertices))\")\n\n    if !isempty(assembly_vertices)\n        # Attempt to reconstruct original sequence\n        total_assembled_length = sum(length(seq) for seq in assembly_vertices)\n\n        # Simple concatenation approach\n        assembled_sequence = join([string(seq) for seq in assembly_vertices], \"\")\n\n        # Compare to reference\n        similarity = calculate_sequence_similarity(reference_genome, assembled_sequence)\n\n        println(\"    Total assembled length: $total_assembled_length bp\")\n        println(\"    Reference length: $(length(reference_genome)) bp\")\n        println(\"    Assembly accuracy: $(round(similarity, digits=3))\")\n\n        if similarity > 0.8\n            println(\"    ✅ HIGH-QUALITY ASSEMBLY ACHIEVED!\")\n        else\n            println(\"    ⚠️  Assembly needs improvement\")\n        end\n\n        # Show assembly comparison\n        println(\"\\\\n  Sequence comparison:\")\n        println(\"    Reference: $(reference_genome[1:min(50, length(reference_genome))])...\")\n        println(\"    Assembled: $(assembled_sequence[1:min(50, length(assembled_sequence))])...\")\n    end\n\ncatch e\n    println(\"  Assembly failed: $(typeof(e)) - $e\")\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/#Tutorial-Summary-and-Best-Practices","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Tutorial Summary and Best Practices","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"Summarize key findings and provide guidance for biological sequence analysis.","category":"page"},{"location":"generated/tutorials/09_round_trip_03_fasta_sequences/","page":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","title":"Round-Trip Tutorial 3: FASTA Sequences → Sequence Graphs → Reconstruction","text":"println(\"\\n\" * \"=\"^80)\nprintln(\"TUTORIAL SUMMARY AND BEST PRACTICES\")\nprintln(\"=\"^80)\n\nprintln(\"\\\\n✅ BIOSEQUENCE ROUND-TRIP WORKFLOW COMPLETION:\")\nprintln(\"  1. Biological Data Preparation: ✓ DNA, RNA, and protein sequences\")\nprintln(\"  2. BioSequence Graph Construction: ✓ Type-safe biological graphs\")\nprintln(\"  3. Graph Analysis: ✓ Composition and structure analysis\")\nprintln(\"  4. Sequence Reconstruction: ✓ High-fidelity biological reconstruction\")\nprintln(\"  5. Quality Assessment: ✓ Biological sequence metrics\")\nprintln(\"  6. Performance Analysis: ✓ Scalability evaluation\")\nprintln(\"  7. Genomic Application: ✓ Realistic assembly demonstration\")\n\nprintln(\"\\\\n📊 QUANTITATIVE RESULTS:\")\nprintln(\"  Sequence types tested: $(quality_assessment.total_tests)\")\nprintln(\"  Successful reconstructions: $(quality_assessment.successful)/$(quality_assessment.total_tests)\")\nprintln(\"  Overall success rate: $(round(quality_assessment.success_rate * 100, digits=1))%\")\nprintln(\"  Average reconstruction quality: $(round(quality_assessment.average_quality, digits=3))\")\n\nprintln(\"\\\\n🧬 BIOLOGICAL INSIGHTS:\")\nfor (seq_type, quality) in quality_assessment.quality_by_type\n    println(\"  $seq_type sequences: $(round(quality, digits=3)) quality score\")\nend\n\nprintln(\"\\\\n🔄 ROUND-TRIP WORKFLOW VALIDATED:\")\nprintln(\"  FASTA Records → BioSequence Graphs → Reconstructed Sequences\")\nprintln(\"  ✓ Biological sequence types preserved (no string conversion)\")\nprintln(\"  ✓ DNA, RNA, and protein sequences successfully processed\")\nprintln(\"  ✓ Variable-length graphs efficiently represent biological data\")\nprintln(\"  ✓ High-fidelity reconstruction achieved\")\nprintln(\"  ✓ Realistic genomic assembly demonstrated\")\n\nprintln(\"\\\\n💡 KEY BIOLOGICAL FINDINGS:\")\nprintln(\"  • BioSequence graphs maintain biological sequence integrity\")\nprintln(\"  • Variable-length representation efficiently handles biological data\")\nprintln(\"  • DNA/RNA sequences achieve high reconstruction accuracy\")\nprintln(\"  • Protein sequences require specialized handling for optimal results\")\nprintln(\"  • Graph approach enables efficient genomic assembly\")\n\nprintln(\"\\\\n📋 BEST PRACTICES FOR BIOLOGICAL SEQUENCES:\")\nprintln(\"  • Use appropriate BioSequence types (LongDNA, LongRNA, LongAA)\")\nprintln(\"  • Validate sequence composition after graph construction\")\nprintln(\"  • Consider sequence complexity when setting graph parameters\")\nprintln(\"  • Use overlap analysis for assembly quality assessment\")\nprintln(\"  • Apply biological sequence metrics for validation\")\n\nprintln(\"\\\\n🚀 NEXT STEPS IN BIOLOGICAL GRAPH HIERARCHY:\")\nprintln(\"  • Tutorial 4: FASTA → K-mer graphs → Sequence graphs (fixed→variable)\")\nprintln(\"  • Tutorial 5: FASTQ → FASTQ graphs (direct quality-aware)\")\nprintln(\"  • Tutorial 6: FASTQ → Qualmer graphs → FASTQ graphs (quality-aware)\")\nprintln(\"  • Advanced: Error correction and assembly optimization\")\n\nprintln(\"\\\\n🎯 APPLICATIONS DEMONSTRATED:\")\nprintln(\"  ✓ Gene sequence analysis and reconstruction\")\nprintln(\"  ✓ Multi-alphabet biological sequence handling\")\nprintln(\"  ✓ Genomic assembly from overlapping reads\")\nprintln(\"  ✓ Quality assessment with biological metrics\")\nprintln(\"  ✓ Performance scaling for larger datasets\")\n\nprintln(\"\\\\n\" * \"=\"^80)\nprintln(\"BioSequence graph mastery achieved!\")\nprintln(\"Ready for hierarchical K-mer workflows in Tutorial 4!\")\nprintln(\"=\"^80)","category":"page"},{"location":"api/workflows/data-acquisition/#Data-Acquisition-and-Simulation","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"Functions for downloading genomic data from public databases and simulating synthetic datasets for testing and benchmarking.","category":"page"},{"location":"api/workflows/data-acquisition/#Overview","page":"Data Acquisition & Simulation","title":"Overview","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"Data acquisition is the first step in any bioinformatics analysis. Mycelia provides tools for:","category":"page"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"Downloading reference genomes from NCBI databases\nSimulating realistic sequencing data for testing\nManaging data provenance and metadata\nHandling multiple data formats and sources","category":"page"},{"location":"api/workflows/data-acquisition/#Common-Workflows","page":"Data Acquisition & Simulation","title":"Common Workflows","text":"","category":"section"},{"location":"api/workflows/data-acquisition/#1.-Download-Reference-Genome","page":"Data Acquisition & Simulation","title":"1. Download Reference Genome","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Download a specific genome by accession\ngenome_file = Mycelia.download_genome_by_accession(\"NC_001422.1\")\n\n# Download complete assembly with annotations\nassembly_data = Mycelia.ncbi_genome_download_accession(\"GCF_000819615.1\")","category":"page"},{"location":"api/workflows/data-acquisition/#2.-Simulate-Test-Data","page":"Data Acquisition & Simulation","title":"2. Simulate Test Data","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Create synthetic genome\nreference = Mycelia.simulate_random_genome(length=100000, gc_content=0.45)\n\n# Generate HiFi reads\nreads = Mycelia.simulate_hifi_reads(reference, coverage=30, error_rate=0.001)","category":"page"},{"location":"api/workflows/data-acquisition/#3.-Batch-Download","page":"Data Acquisition & Simulation","title":"3. Batch Download","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Download multiple genomes\naccessions = [\"GCF_000005825.2\", \"GCF_000009605.1\", \"GCF_000027325.1\"]\ngenomes = Mycelia.download_genomes_batch(accessions, output_dir=\"genomes/\")","category":"page"},{"location":"api/workflows/data-acquisition/#Public-Database-Downloads","page":"Data Acquisition & Simulation","title":"Public Database Downloads","text":"","category":"section"},{"location":"api/workflows/data-acquisition/#NCBI-Genome-Downloads","page":"Data Acquisition & Simulation","title":"NCBI Genome Downloads","text":"","category":"section"},{"location":"api/workflows/data-acquisition/#Mycelia.download_genome_by_accession","page":"Data Acquisition & Simulation","title":"Mycelia.download_genome_by_accession","text":"download_genome_by_accession(\n;\n    accession,\n    outdir,\n    compressed\n)\n\n\nDownloads a genomic sequence from NCBI's nucleotide database by its accession number.\n\nArguments\n\naccession::String: NCBI nucleotide accession number (e.g. \"NC_045512\")\noutdir::String: Output directory path. Defaults to current directory\ncompressed::Bool: If true, compresses output file with gzip. Defaults to true\n\nReturns\n\nString: Path to the downloaded file (.fna or .fna.gz)\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/data-acquisition/#Mycelia.ncbi_genome_download_accession","page":"Data Acquisition & Simulation","title":"Mycelia.ncbi_genome_download_accession","text":"ncbi_genome_download_accession(\n;\n    accession,\n    outdir,\n    outpath,\n    include_string\n)\n\n\nDownload an accession using NCBI datasets command line tool\n\nthe .zip download output to outpath will be unzipped\n\nreturns the outfolder\n\nncbi's default include string is  include_string = \"gff3,rna,cds,protein,genome,seq-report\"\n\nDownloads and extracts a genome from NCBI using the datasets command line tool.\n\nArguments\n\naccession: NCBI accession number for the genome\noutdir: Directory where files will be downloaded (defaults to current directory)\noutpath: Full path for the temporary zip file (defaults to outdir/accession.zip)\ninclude_string: Data types to download (defaults to all \"gff3,rna,cds,protein,genome,seq-report\").\n\nReturns\n\nPath to the extracted genome data directory\n\nNotes\n\nRequires the ncbi-datasets-cli conda package (automatically installed if missing)\nDownloaded zip file is automatically removed after extraction\nIf output folder already exists, download is skipped\nData is extracted to outdir/accession/ncbi_dataset/data/accession\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"<!– downloadgenomesbatch not yet implemented, use downloadgenomesby_ftp –>","category":"page"},{"location":"api/workflows/data-acquisition/#Example:-Download-phiX174-Genome","page":"Data Acquisition & Simulation","title":"Example: Download phiX174 Genome","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Download the classic phiX174 bacteriophage genome\nphix_file = Mycelia.download_genome_by_accession(\"NC_001422.1\")\n\n# Verify download\n@assert isfile(phix_file)\n@assert endswith(phix_file, \".fna.gz\")\n\n# Read the genome\ngenome_record = first(Mycelia.read_fasta(phix_file))\nsequence = String(FASTX.sequence(genome_record))\nprintln(\"Downloaded genome: $(length(sequence)) bp\")","category":"page"},{"location":"api/workflows/data-acquisition/#Example:-Complete-Assembly-Package","page":"Data Acquisition & Simulation","title":"Example: Complete Assembly Package","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Download complete E. coli assembly with all associated files\nassembly = Mycelia.ncbi_genome_download_accession(\"GCF_000005825.2\")\n\n# Available files\nprintln(\"Genome: $(assembly.genome)\")\nprintln(\"Proteins: $(assembly.protein)\")\nprintln(\"Annotations: $(assembly.gff3)\")\nprintln(\"CDS: $(assembly.cds)\")","category":"page"},{"location":"api/workflows/data-acquisition/#SRA-Data-Downloads","page":"Data Acquisition & Simulation","title":"SRA Data Downloads","text":"","category":"section"},{"location":"api/workflows/data-acquisition/#Mycelia.download_sra_data","page":"Data Acquisition & Simulation","title":"Mycelia.download_sra_data","text":"Downloads sequencing reads from NCBI's Sequence Read Archive (SRA).\n\nDownloads reads using fasterq-dump. The function automatically detects whether the data is single-end or paired-end and returns appropriate file paths. Users should apply quality control based on their knowledge of the data type.\n\nArguments\n\nsrr_identifier: SRA run identifier (e.g., \"SRR1234567\")\noutdir: Output directory for downloaded files (default: current directory)\n\nReturns\n\nNamed tuple with:\n\nsrr_id: The SRA identifier\noutdir: Output directory path\nfiles: Vector of downloaded file paths (1 file for single-end, 2 for paired-end)\nis_paired: Boolean indicating if data is paired-end\n\nExample\n\n# Download SRA data\nresult = Mycelia.download_sra_data(\"SRR1234567\", outdir=\"./data\")\n\n# Apply appropriate QC based on data type\nif result.is_paired\n    # Paired-end data - use paired-end QC\n    Mycelia.trim_galore_paired(forward_reads=result.files[1], reverse_reads=result.files[2])\nelse\n    # Single-end data - use single-end QC\n    Mycelia.qc_filter_short_reads_fastp(input=result.files[1])\nend\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/data-acquisition/#Mycelia.prefetch_sra_runs","page":"Data Acquisition & Simulation","title":"Mycelia.prefetch_sra_runs","text":"Prefetches multiple SRA runs in parallel.\n\nDownloads SRA run files (.sra) to local storage without converting to FASTQ. Useful for batch downloading before processing with fasterq-dump.\n\nArguments\n\nsrr_identifiers: Vector of SRA run identifiers\noutdir: Output directory for prefetched files (default: current directory)\nmax_parallel: Maximum number of parallel downloads (default: 4)\n\nReturns\n\nVector of named tuples with prefetch results for each SRA run\n\nExample\n\nruns = [\"SRR1234567\", \"SRR1234568\", \"SRR1234569\"]\nresults = Mycelia.prefetch_sra_runs(runs, outdir=\"./sra_data\")\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/data-acquisition/#Mycelia.fasterq_dump_parallel","page":"Data Acquisition & Simulation","title":"Mycelia.fasterq_dump_parallel","text":"Parallel FASTQ dump for multiple SRA files.\n\nConverts multiple SRA files to FASTQ format in parallel. More efficient than sequential processing for large batches.\n\nArguments\n\nsrr_identifiers: Vector of SRA run identifiers\noutdir: Output directory for FASTQ files (default: current directory)\nmax_parallel: Maximum number of parallel conversions (default: 2)\n\nReturns\n\nVector of named tuples with conversion results\n\nExample\n\nruns = [\"SRR1234567\", \"SRR1234568\"]\nresults = Mycelia.fasterq_dump_parallel(runs, outdir=\"./fastq_data\")\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/data-acquisition/#Example:-Download-Sequencing-Reads","page":"Data Acquisition & Simulation","title":"Example: Download Sequencing Reads","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Download reads from SRA\nsra_run = \"SRR1234567\"\nfastq_files = Mycelia.download_sra_data(sra_run, output_dir=\"reads/\")\n\n# Process paired-end reads\nif length(fastq_files) == 2\n    read1, read2 = fastq_files\n    println(\"Downloaded paired-end reads:\")\n    println(\"  R1: $read1\")\n    println(\"  R2: $read2\")\nend","category":"page"},{"location":"api/workflows/data-acquisition/#Data-Simulation","page":"Data Acquisition & Simulation","title":"Data Simulation","text":"","category":"section"},{"location":"api/workflows/data-acquisition/#Genome-Simulation","page":"Data Acquisition & Simulation","title":"Genome Simulation","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"<!– Genome simulation functions not yet implemented –>","category":"page"},{"location":"api/workflows/data-acquisition/#Example:-Create-Test-Genome","page":"Data Acquisition & Simulation","title":"Example: Create Test Genome","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Generate random genome with realistic GC content\ntest_genome = Mycelia.simulate_random_genome(\n    length=50000,\n    gc_content=0.42,\n    seed=123  # for reproducibility\n)\n\n# Add realistic features\ngenome_with_genes = Mycelia.simulate_genome_with_features(\n    test_genome,\n    n_genes=50,\n    gene_length_dist=(500, 2000),\n    intergenic_length_dist=(100, 1000)\n)","category":"page"},{"location":"api/workflows/data-acquisition/#Sequencing-Read-Simulation","page":"Data Acquisition & Simulation","title":"Sequencing Read Simulation","text":"","category":"section"},{"location":"api/workflows/data-acquisition/#Mycelia.simulate_illumina_reads","page":"Data Acquisition & Simulation","title":"Mycelia.simulate_illumina_reads","text":"simulate_illumina_reads(\n;\n    fasta,\n    coverage,\n    read_count,\n    outbase,\n    read_length,\n    mflen,\n    sdev,\n    seqSys,\n    amplicon,\n    errfree,\n    paired,\n    rndSeed,\n    quiet\n)\n\n\nSimulate Illumina short reads from a FASTA file using the ART Illumina simulator.\n\nThis function wraps ART (installed via Bioconda) to simulate reads from an input reference FASTA. It supports paired-end (or optionally single-end/mate-pair) simulation, with options to choose either fold coverage (--fcov) or an absolute read count (--rcount), to enable amplicon mode, and to optionally generate a zero-error SAM file.\n\nArguments\n\nin_fasta::String: Path to the input FASTA file.\ncoverage::Union{Nothing,Number}: Desired fold coverage (used with --fcov); if nothing and read_count is provided then fold coverage is ignored. (Default: 20)\nread_count::Union{Nothing,Number}: Total number of reads (or read pairs) to generate (used with --rcount instead of fold coverage). (Default: nothing)\noutbase::String: Output file prefix (default: \"(in_fasta)art(coverage)x.\").\nread_length::Int: Length of reads to simulate (default: 150).\nmflen::Int: Mean fragment length for paired-end simulations (default: 500).\nsdev::Int: Standard deviation of fragment lengths (default: 10).\nseqSys::String: Illumina sequencing system ID (default: \"HS25\"). Available ART profiles:\n\"GA1\": Genome Analyzer I (max length: 36bp or 44bp)\n\"GA2\": Genome Analyzer II (max length: 50bp or 75bp)  \n\"HS10\": HiSeq 1000 (max length: 100bp)\n\"HS20\": HiSeq 2000 (max length: 100bp)\n\"HS25\": HiSeq 2500 (max length: 125bp or 150bp)\n\"HSXn\": HiSeqX v2.5 PCR free (max length: 150bp)\n\"HSXt\": HiSeqX v2.5 TruSeq (max length: 150bp)\n\"MSv1\": MiSeq v1 (max length: 250bp)\n\"MSv3\": MiSeq v3 (max length: 250bp)\n\"MinS\": MiniSeq TruSeq (max length: 50bp)\n\"NS50\": NextSeq 500 v2 (max length: 75bp)\npaired::Bool: Whether to simulate paired-end reads (default: true). Some systems like MinS only support single-end.\namplicon::Bool: Enable amplicon sequencing simulation mode (default: false).\nerrfree::Bool: Generate an extra SAM file with zero sequencing errors (default: false).\nrndSeed::Union{Nothing,Int}: Optional seed for reproducibility (default: nothing).\n\nOutputs\n\nGenerates gzipped FASTQ files in the working directory:\n\nFor paired-end: $(outbase)1.fq.gz (forward) and $(outbase)2.fq.gz (reverse).\nFor single-end: $(outbase)1.fq.gz.\n\nAdditional SAM files may be produced if --errfree is enabled and/or if the ART --samout option is specified.\n\nDetails\n\nThis function calls ART with the provided options. Note that if read_count is supplied, the function uses the --rcount option; otherwise, it uses --fcov with the given coverage. Amplicon mode (via --amplicon) restricts the simulation to the amplicon regions, which is important for targeted sequencing studies.\n\nDependencies\n\nRequires ART simulator (installed via Bioconda) and the Mycelia environment helper.\n\nSee also: simulate_nanopore_reads, simulate_nearly_perfect_long_reads, simulate_pacbio_reads\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/data-acquisition/#Mycelia.simulate_pacbio_reads","page":"Data Acquisition & Simulation","title":"Mycelia.simulate_pacbio_reads","text":"simulate_pacbio_reads(; fasta, quantity, outfile, quiet)\n\n\nSimulate PacBio HiFi reads using optimized Badread settings.\n\nUses PacBio 2021 error and quality score models with identity settings optimized for HiFi reads. Follows the recommended PacBio HiFi simulation parameters from the Badread documentation.\n\nArguments\n\nfasta::String: Path to input FASTA file containing reference sequence\nquantity::String: Coverage depth (e.g. \"50x\") or total bases (e.g. \"1000000\")\noutfile::String: Output filepath for simulated reads. Defaults to input filename with PacBio HiFi suffix\nquiet::Bool=false: If true, suppress badread output to stdout/stderr\n\nReturns\n\nString: Path to the generated output file\n\nNotes\n\nUses pacbio2021 error and quality score models\nSets identity to 30,3 for HiFi-appropriate accuracy\nAverage read length ~15kb\nOutput is gzipped FASTQ format\n\nSee also: simulate_nanopore_reads, simulate_nearly_perfect_long_reads, simulate_badread_reads\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/data-acquisition/#Mycelia.simulate_nanopore_reads","page":"Data Acquisition & Simulation","title":"Mycelia.simulate_nanopore_reads","text":"simulate_nanopore_reads(; fasta, quantity, outfile, quiet)\n\n\nSimulate Oxford Nanopore R10.4.1 sequencing reads using Badread's default settings.\n\nBadread's default settings correspond to Oxford Nanopore R10.4.1 reads of mediocre quality. Uses nanopore2023 error and quality models with default identity and length distributions.\n\nArguments\n\nfasta::String: Path to input reference FASTA file\nquantity::String: Either fold coverage (e.g. \"50x\") or total bases to sequence (e.g. \"1000000\")\noutfile::String: Output path for gzipped FASTQ file. Defaults to input filename with modified extension\n\nReturns\n\nString: Path to the generated output FASTQ file\n\nSee also: simulate_pacbio_reads, simulate_nanopore_r941_reads, simulate_badread_reads\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"<!– Note: simulatehifireads maps to simulatepacbioreads addsequencingerrors not yet implemented as standalone function –>","category":"page"},{"location":"api/workflows/data-acquisition/#Example:-HiFi-Read-Simulation","page":"Data Acquisition & Simulation","title":"Example: HiFi Read Simulation","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Simulate high-quality HiFi reads\nhifi_reads = Mycelia.simulate_hifi_reads(\n    reference_genome,\n    coverage=25,\n    read_length_mean=15000,\n    read_length_std=3000,\n    error_rate=0.001\n)\n\n# Write to FASTQ\nMycelia.write_fastq(\"hifi_reads.fastq\", hifi_reads)","category":"page"},{"location":"api/workflows/data-acquisition/#Example:-Illumina-Read-Simulation","page":"Data Acquisition & Simulation","title":"Example: Illumina Read Simulation","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Simulate paired-end Illumina reads\nillumina_reads = Mycelia.simulate_illumina_reads(\n    reference_genome,\n    coverage=50,\n    read_length=150,\n    fragment_size_mean=300,\n    fragment_size_std=50,\n    error_rate=0.01\n)\n\n# Write paired-end files\nMycelia.write_fastq(\"illumina_R1.fastq\", illumina_reads.read1)\nMycelia.write_fastq(\"illumina_R2.fastq\", illumina_reads.read2)","category":"page"},{"location":"api/workflows/data-acquisition/#Data-Validation","page":"Data Acquisition & Simulation","title":"Data Validation","text":"","category":"section"},{"location":"api/workflows/data-acquisition/#Download-Validation","page":"Data Acquisition & Simulation","title":"Download Validation","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"<!– Download validation functions not yet implemented –>","category":"page"},{"location":"api/workflows/data-acquisition/#Example:-Validate-Downloaded-Data","page":"Data Acquisition & Simulation","title":"Example: Validate Downloaded Data","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Check file integrity\nintegrity_ok = Mycelia.validate_download_integrity(\"genome.fna.gz\")\n\n# Verify file format\nformat_ok = Mycelia.check_file_format(\"genome.fna.gz\", expected_format=\"fasta\")\n\n# Check genome completeness\ncompleteness = Mycelia.verify_genome_completeness(\"genome.fna.gz\")\nprintln(\"Genome completeness: $(completeness.complete_sequences)/$(completeness.total_sequences)\")","category":"page"},{"location":"api/workflows/data-acquisition/#Simulation-Validation","page":"Data Acquisition & Simulation","title":"Simulation Validation","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"<!– Simulation validation functions not yet implemented –>","category":"page"},{"location":"api/workflows/data-acquisition/#Example:-Validate-Simulated-Data","page":"Data Acquisition & Simulation","title":"Example: Validate Simulated Data","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Check simulation statistics\nsim_stats = Mycelia.calculate_simulation_statistics(simulated_reads)\nprintln(\"Simulated reads: $(sim_stats.n_reads)\")\nprintln(\"Mean length: $(sim_stats.mean_length)\")\nprintln(\"Coverage: $(sim_stats.coverage)x\")\n\n# Compare with real data characteristics\ncomparison = Mycelia.compare_simulated_vs_real(simulated_reads, real_reads)\nprintln(\"Length distribution similarity: $(comparison.length_similarity)\")\nprintln(\"Quality distribution similarity: $(comparison.quality_similarity)\")","category":"page"},{"location":"api/workflows/data-acquisition/#Metadata-Management","page":"Data Acquisition & Simulation","title":"Metadata Management","text":"","category":"section"},{"location":"api/workflows/data-acquisition/#Data-Provenance","page":"Data Acquisition & Simulation","title":"Data Provenance","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"<!– Metadata management functions not yet implemented –>","category":"page"},{"location":"api/workflows/data-acquisition/#Example:-Track-Data-Sources","page":"Data Acquisition & Simulation","title":"Example: Track Data Sources","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Create manifest for downloaded data\nmanifest = Mycelia.create_data_manifest(\n    files=[\"genome.fna.gz\", \"annotations.gff3\"],\n    sources=[\"NCBI:NC_001422.1\", \"NCBI:GCF_000819615.1\"],\n    download_date=now(),\n    version=\"1.0\"\n)\n\n# Save manifest\nMycelia.save_manifest(manifest, \"data_manifest.json\")","category":"page"},{"location":"api/workflows/data-acquisition/#Batch-Processing","page":"Data Acquisition & Simulation","title":"Batch Processing","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"<!– Batch processing functions not yet implemented Available: Mycelia.downloadgenomesby_ftp for batch downloads –>","category":"page"},{"location":"api/workflows/data-acquisition/#Example:-Batch-Download-with-Error-Handling","page":"Data Acquisition & Simulation","title":"Example: Batch Download with Error Handling","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Download multiple genomes with retry logic\naccession_list = [\"GCF_000005825.2\", \"GCF_000009605.1\", \"GCF_000027325.1\"]\n\nresults = Mycelia.parallel_download(\n    accession_list,\n    max_retries=3,\n    delay_between_retries=30,\n    max_concurrent=5\n)\n\n# Check results\nsuccessful = [r for r in results if r.success]\nfailed = [r for r in results if !r.success]\n\nprintln(\"Downloaded: $(length(successful))/$(length(accession_list))\")\nif !isempty(failed)\n    println(\"Failed downloads: $(length(failed))\")\n    for failure in failed\n        println(\"  $(failure.accession): $(failure.error)\")\n    end\nend","category":"page"},{"location":"api/workflows/data-acquisition/#Performance-Considerations","page":"Data Acquisition & Simulation","title":"Performance Considerations","text":"","category":"section"},{"location":"api/workflows/data-acquisition/#Memory-Usage","page":"Data Acquisition & Simulation","title":"Memory Usage","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"Genome downloads: Minimal memory usage (streaming)\nLarge simulations: Memory scales with genome size\nBatch operations: Consider parallel processing limits","category":"page"},{"location":"api/workflows/data-acquisition/#Network-Considerations","page":"Data Acquisition & Simulation","title":"Network Considerations","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"NCBI rate limits: Respect API rate limits\nRetry logic: Implement exponential backoff\nParallel downloads: Limit concurrent connections","category":"page"},{"location":"api/workflows/data-acquisition/#Storage-Requirements","page":"Data Acquisition & Simulation","title":"Storage Requirements","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"Compressed files: Use .gz compression by default\nTemporary files: Clean up intermediate files\nDisk space: Monitor available space for large datasets","category":"page"},{"location":"api/workflows/data-acquisition/#Common-Issues-and-Solutions","page":"Data Acquisition & Simulation","title":"Common Issues and Solutions","text":"","category":"section"},{"location":"api/workflows/data-acquisition/#Download-Failures","page":"Data Acquisition & Simulation","title":"Download Failures","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Handle network timeouts\ntry\n    genome = Mycelia.download_genome_by_accession(\"NC_001422.1\", timeout=300)\ncatch NetworkError\n    println(\"Download failed - retrying with longer timeout\")\n    genome = Mycelia.download_genome_by_accession(\"NC_001422.1\", timeout=600)\nend","category":"page"},{"location":"api/workflows/data-acquisition/#Simulation-Validation-2","page":"Data Acquisition & Simulation","title":"Simulation Validation","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"# Validate simulation parameters before large runs\nMycelia.validate_simulation_parameters(\n    genome_size=1000000,\n    coverage=30,\n    read_length=15000\n)","category":"page"},{"location":"api/workflows/data-acquisition/#Related-Functions","page":"Data Acquisition & Simulation","title":"Related Functions","text":"","category":"section"},{"location":"api/workflows/data-acquisition/#File-I/O","page":"Data Acquisition & Simulation","title":"File I/O","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"read_fasta - Read FASTA files\nwrite_fastq - Write FASTQ files\ncompress_file - Compress downloaded files","category":"page"},{"location":"api/workflows/data-acquisition/#Quality-Control","page":"Data Acquisition & Simulation","title":"Quality Control","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"analyze_fastq_quality - Assess downloaded read quality\ncalculate_genome_stats - Analyze genome characteristics","category":"page"},{"location":"api/workflows/data-acquisition/#Next-Steps","page":"Data Acquisition & Simulation","title":"Next Steps","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"Quality Control - Assess data quality\nSequence Analysis - Analyze sequence composition","category":"page"},{"location":"api/workflows/data-acquisition/#See-Also","page":"Data Acquisition & Simulation","title":"See Also","text":"","category":"section"},{"location":"api/workflows/data-acquisition/","page":"Data Acquisition & Simulation","title":"Data Acquisition & Simulation","text":"Tutorial 1: Data Acquisition\nFASTA/FASTQ Data Types (planned)\nBasic Workflows","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Tutorial-3:-K-mer-Analysis-and-Feature-Extraction","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"This tutorial explores k-mer analysis, a fundamental technique in bioinformatics for sequence analysis, genome assembly, and comparative genomics.","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Learning-Objectives","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"By the end of this tutorial, you will understand:","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"K-mer theory and biological significance\nHow k-mer size affects analysis sensitivity and specificity\nDense vs sparse k-mer counting strategies\nK-mer frequency spectra and their interpretation\nApplications in genome size estimation and quality assessment\nMemory and computational considerations for large-scale analysis","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Setup","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"import Pkg\nif isinteractive()\n    Pkg.activate(\"..\")\nend\n\nimport Test\nimport Mycelia\nimport FASTX\nimport Random\nimport Statistics\n\nRandom.seed!(42)","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Part-1:-K-mer-Theory-and-Biological-Context","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Part 1: K-mer Theory and Biological Context","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"K-mers are subsequences of length k extracted from DNA sequences. They capture local sequence composition and are fundamental to many algorithms.","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"=== K-mer Analysis Tutorial ===\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#K-mer-Mathematics","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"K-mer Mathematics","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"For DNA sequences, there are 4^k possible k-mers. Understanding k-mer space helps with parameter selection.","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"function kmer_space_size(k, alphabet_size=4)\n    return alphabet_size^k\nend\n\nprintln(\"K-mer space sizes:\")\nfor k in [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n    space_size = kmer_space_size(k)\n    println(\"k=$k: $(space_size) possible k-mers ($(space_size ÷ 1000)K)\")\nend","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Biological-Significance","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Biological Significance","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"K-mers capture different biological features depending on their size:","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Small k-mers (k=3-7): Capture short motifs, sensitive to errors\nMedium k-mers (k=15-21): Balance sensitivity and specificity\nLarge k-mers (k=25-51): Specific but may miss short overlaps","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"\\nK-mer size selection guidelines:\")\nprintln(\"k=3-7:   Short motifs, codon analysis\")\nprintln(\"k=15-21: Error correction, initial assembly\")\nprintln(\"k=25-31: Genome assembly, repeat detection\")\nprintln(\"k=35-51: Specific overlaps, large genome assembly\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Part-2:-K-mer-Counting-Strategies","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Part 2: K-mer Counting Strategies","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Different applications require different counting approaches. Understanding trade-offs helps optimize performance.","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"\\n=== K-mer Counting Strategies ===\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Generate test sequences for demonstration","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"test_sequences = [\n    Mycelia.random_fasta_record(moltype=:DNA, seed=i, L=1000)\n    for i in 1:10\n]","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Write sequences to temporary files","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"temp_files = String[]\nfor (i, seq) in enumerate(test_sequences)\n    filename = \"test_seq_$i.fasta\"\n    Mycelia.write_fasta(outfile=filename, records=[seq])\n    push!(temp_files, filename)\nend\n\nprintln(\"Generated $(length(temp_files)) test sequences\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Dense-K-mer-Counting","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Dense K-mer Counting","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Dense counting stores all possible k-mers, including those not observed. Memory usage: O(4^k) - grows exponentially with k","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"\\n--- Dense K-mer Counting ---\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"TODO: Implement comprehensive dense k-mer analysis","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Count all possible k-mers\nAnalyze frequency distributions\nMemory usage profiling\nComparison across different k values","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"for k in [3, 5, 7, 9]\n    println(\"Computing dense k-mer counts for k=$k...\")\n\n    # Memory estimation\n    memory_mb = (4^k * 4) / (1024^2)  ## Assuming 4 bytes per count\n    println(\"  Estimated memory: $(round(memory_mb, digits=2)) MB\")\n\n    if memory_mb < 100  ## Only run if memory usage is reasonable\n        dense_counts = Mycelia.fasta_list_to_dense_kmer_counts(\n            fasta_list=temp_files,\n            alphabet=:DNA,\n            k=k\n        )\n        println(\"  ✓ Dense counting completed\")\n        println(\"  Matrix size: $(size(dense_counts.counts))\")\n    else\n        println(\"  ⚠ Skipping due to high memory usage\")\n    end\nend","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Sparse-K-mer-Counting","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Sparse K-mer Counting","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Sparse counting only stores observed k-mers. Memory usage: O(n) where n is number of unique k-mers","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"\\n--- Sparse K-mer Counting ---\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"TODO: Implement comprehensive sparse k-mer analysis","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Count only observed k-mers\nAnalyze sparsity patterns\nMemory efficiency comparison\nScalability testing","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"for k in [11, 13, 15, 17, 19, 21]\n    println(\"Computing sparse k-mer counts for k=$k...\")\n\n    sparse_counts = Mycelia.fasta_list_to_sparse_kmer_counts(\n        fasta_list=temp_files,\n        alphabet=:DNA,\n        k=k\n    )\n    println(\"  ✓ Sparse counting completed\")\n    println(\"  Unique k-mers: $(length(sparse_counts))\")\nend","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Part-3:-K-mer-Frequency-Spectra","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Part 3: K-mer Frequency Spectra","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"K-mer frequency spectra reveal genome characteristics and data quality","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"\\n=== K-mer Frequency Spectra ===\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"TODO: Implement k-mer spectrum analysis","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Generate frequency histograms\nIdentify characteristic peaks\nEstimate genome size and coverage\nDetect contamination and repeats","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Part-4:-Applications-in-Genome-Analysis","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Part 4: Applications in Genome Analysis","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"K-mers have many applications in genomic analysis","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"\\n=== Genome Analysis Applications ===\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Genome-Size-Estimation","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Genome Size Estimation","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Use k-mer frequency spectra to estimate genome size Formula: Genome size ≈ Total k-mers / Coverage peak","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"--- Genome Size Estimation ---\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"TODO: Implement genome size estimation","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Find coverage peak in frequency spectrum\nCalculate total k-mers\nEstimate genome size\nValidate against known genome size","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Error-Detection-and-Correction","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Error Detection and Correction","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Low-frequency k-mers often represent sequencing errors","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"--- Error Detection ---\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"TODO: Implement error detection","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Identify low-frequency k-mers\nClassify as errors vs rare variants\nImplement error correction algorithms","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Contamination-Detection","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Contamination Detection","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Foreign DNA creates distinctive k-mer patterns","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"--- Contamination Detection ---\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"TODO: Implement contamination detection","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Compare k-mer profiles\nIdentify foreign k-mers\nQuantify contamination levels","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Part-5:-Performance-Optimization","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Part 5: Performance Optimization","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Large-scale k-mer analysis requires optimization","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"\\n=== Performance Optimization ===\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Memory-Management","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Memory Management","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Strategies for handling large k-mer datasets","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"--- Memory Management ---\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"TODO: Implement memory optimization","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Streaming k-mer processing\nDisk-based storage\nMemory-mapped files\nCompression techniques","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Parallel-Processing","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Parallel Processing","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Accelerate k-mer counting with parallelization","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"--- Parallel Processing ---\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"TODO: Implement parallel k-mer counting","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Multi-threaded counting\nDistributed processing\nLoad balancing strategies","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Part-6:-Visualization-and-Interpretation","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Part 6: Visualization and Interpretation","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Create plots to understand k-mer analysis results","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"\\n=== K-mer Visualization ===\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"TODO: Implement k-mer visualization","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Frequency spectrum plots\nK-mer composition heatmaps\nCoverage distribution plots\nComparative k-mer analysis","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Part-7:-Advanced-K-mer-Techniques","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Part 7: Advanced K-mer Techniques","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Explore advanced k-mer analysis methods","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"\\n=== Advanced Techniques ===\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Minimizers","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Minimizers","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Reduce k-mer space using minimizer techniques","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"--- Minimizers ---\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"TODO: Implement minimizer techniques","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Canonical minimizers\nSyncmers\nStrobemers","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Graph-Construction","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Graph Construction","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Build graphs from k-mer overlaps","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"--- Graph Construction ---\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"TODO: Implement k-mer graph construction","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"de Bruijn graphs\nString graphs\nOverlap graphs","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/#Summary-and-Best-Practices","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Summary and Best Practices","text":"","category":"section"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"println(\"\\n=== K-mer Analysis Summary ===\")\nprintln(\"✓ Understanding k-mer theory and biological significance\")\nprintln(\"✓ Choosing appropriate k-mer sizes for different applications\")\nprintln(\"✓ Implementing dense and sparse counting strategies\")\nprintln(\"✓ Analyzing k-mer frequency spectra\")\nprintln(\"✓ Applying k-mer analysis to genome size estimation\")\nprintln(\"✓ Optimizing performance for large-scale analysis\")\n\nprintln(\"\\nBest Practices:\")\nprintln(\"- Start with k=21 for general analysis\")\nprintln(\"- Use dense counting for small k, sparse for large k\")\nprintln(\"- Monitor memory usage and optimize accordingly\")\nprintln(\"- Validate results with known datasets\")\nprintln(\"- Consider biological context in interpretation\")","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"Cleanup","category":"page"},{"location":"generated/tutorials/03_kmer_analysis/","page":"Tutorial 3: K-mer Analysis and Feature Extraction","title":"Tutorial 3: K-mer Analysis and Feature Extraction","text":"for file in temp_files\n    rm(file, force=true)\nend\n\nprintln(\"\\nNext: Tutorial 4 - Genome Assembly\")\n\nnothing","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Tutorial-1:-Data-Acquisition-in-Bioinformatics","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"This tutorial demonstrates how to acquire genomic data from public databases and simulate synthetic datasets for bioinformatics analysis. Data acquisition is the critical first step in any bioinformatics workflow.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Learning-Objectives","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"By the end of this tutorial, you will understand:","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"How to download genome assemblies from NCBI databases\nDifferent types of genomic data files and their purposes\nHow to simulate synthetic genomic data for testing\nBest practices for data management and reproducibility\nQuality control considerations for downloaded data","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Setup","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"First, let's load the required packages and set up our environment.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"import Pkg\nif isinteractive()\n    Pkg.activate(\"..\")\nend\n\nimport Test\nimport Mycelia\nimport FASTX\nimport Random\nimport Dates","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Set random seed for reproducibility","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Random.seed!(42)","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Part-1:-Understanding-Genomic-Data-Types","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Part 1: Understanding Genomic Data Types","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Before downloading data, it's important to understand the different types of genomic data files commonly used in bioinformatics:","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"FASTA (.fna, .fasta): Raw sequence data (DNA/RNA/protein)\nFASTQ (.fastq): Sequencing reads with quality scores\nGFF3 (.gff3): Gene annotations and features\nProtein sequences (.faa): Translated protein sequences\nCDS sequences (.ffn): Coding sequences\nSequence reports: Metadata about sequences","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"=== Genomic Data Types ===\")\nprintln(\"FASTA: Raw sequences (genome assemblies)\")\nprintln(\"FASTQ: Sequencing reads with quality scores\")\nprintln(\"GFF3: Gene annotations and genomic features\")\nprintln(\"Protein: Translated amino acid sequences\")\nprintln(\"CDS: Coding DNA sequences\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Part-2:-Downloading-Data-from-NCBI","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Part 2: Downloading Data from NCBI","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"The National Center for Biotechnology Information (NCBI) is a primary source for genomic data. We'll demonstrate downloading a small, well-characterized viral genome: bacteriophage phiX174.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Why-phiX174?","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Why phiX174?","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Small genome (~5.4 kb) - fast to download and process\nWell-characterized - extensively studied reference\nCommonly used as sequencing control\nSingle-stranded DNA virus with overlapping genes","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\n=== Downloading phiX174 Genome ===\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Method-1:-Download-by-Accession-ID","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Method 1: Download by Accession ID","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"NCBI accession IDs uniquely identify sequence records. NC_001422.1 is the RefSeq accession for phiX174.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"phix_accession = \"NC_001422.1\"\nprintln(\"Downloading genome by accession: $phix_accession\")\n\ngenome_file = Mycelia.download_genome_by_accession(accession=phix_accession)\nprintln(\"Downloaded to: $genome_file\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Verify the download","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Test.@test isfile(genome_file)\nTest.@test endswith(genome_file, \".fna.gz\")\nprintln(\"✓ Download successful\")\nprintln(\"File size: $(filesize(genome_file)) bytes\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Method-2:-Download-Complete-Assembly-Package","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Method 2: Download Complete Assembly Package","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"For more comprehensive analysis, download the complete assembly package which includes multiple file types (genome, proteins, annotations, etc.).","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"assembly_accession = \"GCF_000819615.1\"  ## Assembly accession for phiX174\nprintln(\"\\nDownloading complete assembly: $assembly_accession\")\n\nassembly_result = Mycelia.ncbi_genome_download_accession(accession=assembly_accession)\nprintln(\"Assembly downloaded to directory: $(assembly_result.directory)\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Examine what files were downloaded","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\nDownloaded files:\")\nfor (key, filepath) in pairs(assembly_result)\n    if key != :directory && !isnothing(filepath)\n        println(\"  $key: $(basename(filepath)) ($(filesize(filepath)) bytes)\")\n    end\nend","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Examining-Downloaded-Data","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Examining Downloaded Data","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Let's examine the structure of the downloaded genome file. FASTA files start with header lines (beginning with '>') followed by sequence data.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\n=== Examining Downloaded Genome ===\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Read the first few lines of the genome file","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"open(assembly_result.genome) do io\n    header = readline(io)\n    println(\"FASTA header: $header\")\n\n    # Read first 100 characters of sequence\n    sequence_start = read(io, String)[1:min(100, end)]\n    println(\"Sequence start: $sequence_start...\")\n\n    # Verify it's a valid FASTA format\n    Test.@test startswith(header, '>')\n    Test.@test all(c -> c in \"ATCGN\\n\", sequence_start)\nend\n\nprintln(\"✓ Valid FASTA format confirmed\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Part-3:-Simulating-Synthetic-Data","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Part 3: Simulating Synthetic Data","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Synthetic data is crucial for:","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Testing algorithms with known ground truth\nBenchmarking performance\nDeveloping new methods\nEducational purposes","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\n=== Simulating Synthetic Genomic Data ===\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Simulating-Random-Genome-Sequences","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Simulating Random Genome Sequences","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Generate a random DNA sequence with specified characteristics. This is useful for testing algorithms and understanding their behavior.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"Generating random DNA sequences...\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Generate sequences with different lengths and properties","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"sequences = []","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Short sequence for quick testing","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"short_seq = Mycelia.random_fasta_record(moltype=:DNA, seed=1, L=100)\npush!(sequences, (\"Short (100 bp)\", short_seq))","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Medium sequence for moderate testing","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"medium_seq = Mycelia.random_fasta_record(moltype=:DNA, seed=2, L=1000)\npush!(sequences, (\"Medium (1 kb)\", medium_seq))","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Long sequence for performance testing","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"long_seq = Mycelia.random_fasta_record(moltype=:DNA, seed=3, L=10000)\npush!(sequences, (\"Long (10 kb)\", long_seq))","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Display sequence characteristics","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"for (name, seq) in sequences\n    seq_str = String(FASTX.sequence(seq))\n    gc_content = count(c -> c in \"GC\", seq_str) / length(seq_str)\n    println(\"$name: Length=$(length(seq_str)), GC=$(round(gc_content*100, digits=1))%\")\nend","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Writing-Synthetic-Data-to-Files","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Writing Synthetic Data to Files","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Save synthetic sequences to files for use in downstream analyses.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\nWriting synthetic sequences to files...\")\n\nsynthetic_files = String[]\nfor (i, (name, seq)) in enumerate(sequences)\n    filename = \"synthetic_sequence_$i.fasta\"\n    Mycelia.write_fasta(outfile=filename, records=[seq])\n    push!(synthetic_files, filename)\n    println(\"✓ Wrote $name to $filename\")\nend","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Part-4:-Data-Quality-and-Validation","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Part 4: Data Quality and Validation","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Always validate downloaded and simulated data before analysis.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\n=== Data Quality Validation ===\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Validating-Downloaded-Data","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Validating Downloaded Data","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Check file integrity and format correctness.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"Validating downloaded phiX174 genome...\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Read and validate the genome sequence","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"genome_seq = open(assembly_result.genome) do io\n    header = readline(io)\n    replace(read(io, String), '\\n' => \"\")\nend","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Basic validation checks","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Test.@test length(genome_seq) > 0\nTest.@test all(c -> c in \"ATCGN\", genome_seq)\nTest.@test count(c -> c == 'N', genome_seq) / length(genome_seq) < 0.01  ## < 1% N's\n\nprintln(\"✓ Genome length: $(length(genome_seq)) bp\")\nprintln(\"✓ Valid DNA alphabet\")\nprintln(\"✓ Low N content: $(count(c -> c == 'N', genome_seq)) N's\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Calculate basic statistics","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"at_content = count(c -> c in \"AT\", genome_seq) / length(genome_seq)\ngc_content = count(c -> c in \"GC\", genome_seq) / length(genome_seq)\n\nprintln(\"AT content: $(round(at_content*100, digits=1))%\")\nprintln(\"GC content: $(round(gc_content*100, digits=1))%\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Validating-Synthetic-Data","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Validating Synthetic Data","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Verify synthetic sequences meet expected criteria.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\nValidating synthetic sequences...\")\n\nfor (i, filename) in enumerate(synthetic_files)\n    seq_record = first(Mycelia.open_fastx(filename))\n    seq_str = String(FASTX.sequence(seq_record))\n\n    # Validate sequence properties\n    Test.@test length(seq_str) > 0\n    Test.@test all(c -> c in \"ATCG\", seq_str)  ## No N's in synthetic data\n\n    println(\"✓ Synthetic sequence $i: $(length(seq_str)) bp, valid DNA\")\nend","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Part-5:-Data-Management-Best-Practices","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Part 5: Data Management Best Practices","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Proper data management ensures reproducibility and efficient analysis.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\n=== Data Management Best Practices ===\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Organizing-Data-Files","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Organizing Data Files","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Create a structured directory layout for your project.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"data_dir = \"tutorial_data\"\nif !isdir(data_dir)\n    mkdir(data_dir)\nend","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Move downloaded data to organized structure","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"reference_dir = joinpath(data_dir, \"reference\")\nsynthetic_dir = joinpath(data_dir, \"synthetic\")\nmkdir(reference_dir)\nmkdir(synthetic_dir)","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Copy files to organized structure (keeping originals for now)","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"cp(assembly_result.genome, joinpath(reference_dir, \"phiX174_genome.fasta\"))\ncp(assembly_result.gff3, joinpath(reference_dir, \"phiX174_annotations.gff3\"))\n\nfor (i, filename) in enumerate(synthetic_files)\n    cp(filename, joinpath(synthetic_dir, filename))\nend\n\nprintln(\"✓ Data organized in structured directories:\")\nprintln(\"  - Reference data: $reference_dir\")\nprintln(\"  - Synthetic data: $synthetic_dir\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Creating-Data-Manifest","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Creating Data Manifest","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Document your data sources and processing steps.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"manifest_file = joinpath(data_dir, \"data_manifest.txt\")\nopen(manifest_file, \"w\") do io\n    println(io, \"# Data Manifest - Tutorial 1: Data Acquisition\")\n    println(io, \"# Generated: $(Dates.now())\")\n    println(io, \"\")\n    println(io, \"## Reference Data\")\n    println(io, \"phiX174_genome.fasta - Downloaded from NCBI accession $phix_accession\")\n    println(io, \"phiX174_annotations.gff3 - Downloaded from NCBI assembly $assembly_accession\")\n    println(io, \"\")\n    println(io, \"## Synthetic Data\")\n    for (i, filename) in enumerate(synthetic_files)\n        println(io, \"$filename - Random DNA sequence, seed=$(i), length varies\")\n    end\nend\n\nprintln(\"✓ Data manifest created: $manifest_file\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Part-6:-Advanced-Data-Acquisition-Techniques","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Part 6: Advanced Data Acquisition Techniques","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"For larger-scale analyses, consider these advanced approaches.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\n=== Advanced Techniques ===\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Partial-Downloads","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Partial Downloads","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Download only specific file types to save time and space.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"Demonstrating partial downloads...\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Download only genome files (not proteins, annotations, etc.)","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"genome_only = Mycelia.ncbi_genome_download_accession(\n    accession=assembly_accession,\n    include_string=\"genome\"\n)\n\nprintln(\"✓ Genome-only download completed\")\nprintln(\"  Available files: $(keys(genome_only))\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Batch-Processing-Considerations","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Batch Processing Considerations","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"When downloading multiple genomes, consider:","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Rate limiting to avoid overwhelming servers\nError handling for failed downloads\nProgress tracking for large datasets\nDisk space management","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\nBatch processing considerations:\")\nprintln(\"- Implement rate limiting between downloads\")\nprintln(\"- Add retry logic for failed downloads\")\nprintln(\"- Monitor disk space usage\")\nprintln(\"- Use parallel processing judiciously\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Summary-and-Next-Steps","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Summary and Next Steps","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"In this tutorial, you learned:","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"How to download genomic data from NCBI databases\nDifferent types of genomic data files and their purposes\nHow to simulate synthetic data for testing\nData validation and quality control practices\nBest practices for data organization and management","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\n=== Tutorial Summary ===\")\nprintln(\"✓ Downloaded phiX174 genome from NCBI\")\nprintln(\"✓ Generated synthetic sequences for testing\")\nprintln(\"✓ Validated data quality and format\")\nprintln(\"✓ Organized data in structured directories\")\nprintln(\"✓ Created data manifest for reproducibility\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Cleanup","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Cleanup","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Clean up temporary files (keeping organized data)","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\nCleaning up temporary files...\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Remove original downloaded files (we have copies in organized structure)","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"rm(genome_file, force=true)\nrm(assembly_result.directory, recursive=true, force=true)","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Remove synthetic files (we have copies in organized structure)","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"for filename in synthetic_files\n    rm(filename, force=true)\nend\n\nprintln(\"✓ Temporary files cleaned up\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#What's-Next?","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"What's Next?","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Now that you have acquired genomic data, the next steps typically include:","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Quality Control: Assess data quality and preprocess if needed\nFeature Extraction: Analyze sequence composition and properties\nComparative Analysis: Compare sequences or genomes\nFunctional Analysis: Annotate genes and predict functions","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Continue with Tutorial 2: Quality Control and Preprocessing to learn how to assess and improve data quality before analysis.","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"println(\"\\n=== Next Steps ===\")\nprintln(\"Continue with Tutorial 2: Quality Control and Preprocessing\")\nprintln(\"Data files available in: $data_dir\")\nprintln(\"Ready for downstream analysis!\")","category":"page"},{"location":"generated/tutorials/01_data_acquisition/#Key-Takeaways","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Key Takeaways","text":"","category":"section"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"Data Acquisition Strategy: Always start with small, well-characterized datasets\nValidation is Critical: Never assume downloaded data is perfect\nOrganization Matters: Structure your data from the beginning\nDocumentation: Keep detailed records of data sources and processing\nSynthetic Data: Valuable for testing and algorithm development\nFile Formats: Understand the purpose of different bioinformatics file types","category":"page"},{"location":"generated/tutorials/01_data_acquisition/","page":"Tutorial 1: Data Acquisition in Bioinformatics","title":"Tutorial 1: Data Acquisition in Bioinformatics","text":"nothing  ## Suppress output in notebook","category":"page"},{"location":"concepts/#Bioinformatics-Concepts-and-Tools","page":"Concepts","title":"Bioinformatics Concepts and Tools","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"This guide explains the key bioinformatics concepts implemented in Mycelia and provides guidance on when to use each tool. It's designed for graduate-level researchers who need to understand both the biological context and computational approaches.","category":"page"},{"location":"concepts/#Table-of-Contents","page":"Concepts","title":"Table of Contents","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Workflow Overview\nData Acquisition\nQuality Control\nSequence Analysis\nGenome Assembly\nGene Annotation\nComparative Genomics\nPhylogenetics\nTool Selection Guide","category":"page"},{"location":"concepts/#Workflow-Overview","page":"Concepts","title":"Workflow Overview","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Bioinformatics analyses typically follow a structured workflow. Understanding this flow helps you choose the right tools and interpret results correctly.","category":"page"},{"location":"concepts/#Standard-Genomic-Analysis-Pipeline","page":"Concepts","title":"Standard Genomic Analysis Pipeline","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Raw Data → Quality Control → Feature Extraction → Assembly → Validation → Annotation → Comparative Analysis","category":"page"},{"location":"concepts/#Decision-Points","page":"Concepts","title":"Decision Points","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"At each stage, you face key decisions:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Data Quality: Is my data sufficient for analysis?\nMethod Selection: Which algorithm fits my data type and research question?\nParameter Tuning: How do I optimize for my specific dataset?\nResult Interpretation: What do the numbers mean biologically?","category":"page"},{"location":"concepts/#Data-Acquisition","page":"Concepts","title":"Data Acquisition","text":"","category":"section"},{"location":"concepts/#Concept:-Data-Sources-and-Types","page":"Concepts","title":"Concept: Data Sources and Types","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Biological Context: Genomic data comes from various sources, each with different characteristics and limitations.","category":"page"},{"location":"concepts/#Data-Types","page":"Concepts","title":"Data Types","text":"","category":"section"},{"location":"concepts/#Sequencing-Data","page":"Concepts","title":"Sequencing Data","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Illumina: Short reads (150-300 bp), high accuracy, paired-end\nPacBio/HiFi: Long reads (10-25 kb), high accuracy, single-molecule\nOxford Nanopore: Ultra-long reads (50+ kb), moderate accuracy, real-time","category":"page"},{"location":"concepts/#Reference-Data","page":"Concepts","title":"Reference Data","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"RefSeq: Manually curated, high-quality reference sequences\nGenBank: Community-submitted sequences, variable quality\nSRA: Raw sequencing data from published studies","category":"page"},{"location":"concepts/#When-to-Use-Each","page":"Concepts","title":"When to Use Each","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Data Type Use Case Advantages Limitations\nIllumina SNP calling, RNA-seq, metagenomics High accuracy, cost-effective Short reads, repetitive regions\nPacBio HiFi Genome assembly, structural variants Long + accurate, span repeats Higher cost, lower throughput\nNanopore Real-time analysis, ultra-long reads Longest reads, portable Higher error rates","category":"page"},{"location":"concepts/#Mycelia-Functions","page":"Concepts","title":"Mycelia Functions","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"# Download reference genomes\nMycelia.download_genome_by_accession(accession=\"NC_001422.1\")\n\n# Download complete assemblies\nncbi_genome_download_accession(accession=\"GCF_000819615.1\")\n\n# Simulate test data\nsimulate_random_genome(length=10000, gc_content=0.45)\nsimulate_hifi_reads(genome, coverage=20, error_rate=0.001)","category":"page"},{"location":"concepts/#Quality-Control","page":"Concepts","title":"Quality Control","text":"","category":"section"},{"location":"concepts/#Concept:-Data-Quality-Assessment","page":"Concepts","title":"Concept: Data Quality Assessment","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Biological Context: Sequencing is not perfect. Raw data contains errors, biases, and artifacts that must be identified and corrected before analysis.","category":"page"},{"location":"concepts/#Quality-Metrics","page":"Concepts","title":"Quality Metrics","text":"","category":"section"},{"location":"concepts/#Sequence-Quality","page":"Concepts","title":"Sequence Quality","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Phred Scores: Probability of base-calling error (Q20 = 1% error, Q30 = 0.1% error)\nGC Content: Should match expected organism profile\nLength Distribution: Indicates fragmentation or size selection","category":"page"},{"location":"concepts/#Coverage-Metrics","page":"Concepts","title":"Coverage Metrics","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Read Depth: Number of reads covering each position\nUniformity: Even coverage across genome\nDuplication Rate: PCR duplicates inflate coverage","category":"page"},{"location":"concepts/#Quality-Issues","page":"Concepts","title":"Quality Issues","text":"","category":"section"},{"location":"concepts/#Common-Problems","page":"Concepts","title":"Common Problems","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Adapter Contamination: Sequencing adapters in reads\nLow Quality Ends: Error-prone read ends\nOverrepresented Sequences: PCR bias or contamination\nLength Bias: Preferential sequencing of certain sizes","category":"page"},{"location":"concepts/#Solutions","page":"Concepts","title":"Solutions","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Trimming: Remove low-quality bases and adapters\nFiltering: Discard low-quality reads\nNormalization: Adjust for coverage bias\nDeduplication: Remove PCR duplicates","category":"page"},{"location":"concepts/#When-to-Apply-QC","page":"Concepts","title":"When to Apply QC","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Analysis Type QC Priority Key Metrics\nGenome Assembly Critical Coverage uniformity, read length\nVariant Calling High Base quality, mapping quality\nRNA-seq High rRNA contamination, 3' bias\nMetagenomics Medium Host contamination, diversity","category":"page"},{"location":"concepts/#Mycelia-Functions-2","page":"Concepts","title":"Mycelia Functions","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"# Analyze read quality\nanalyze_fastq_quality(\"reads.fastq\")\n\n# Calculate sequence statistics\ncalculate_sequence_stats(sequences)\n\n# Quality visualization\nplot_quality_distribution(quality_scores)","category":"page"},{"location":"concepts/#Sequence-Analysis","page":"Concepts","title":"Sequence Analysis","text":"","category":"section"},{"location":"concepts/#Concept:-K-mer-Analysis","page":"Concepts","title":"Concept: K-mer Analysis","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Biological Context: K-mers are subsequences of length k. They capture local sequence composition and are fundamental to many bioinformatics algorithms.","category":"page"},{"location":"concepts/#K-mer-Theory","page":"Concepts","title":"K-mer Theory","text":"","category":"section"},{"location":"concepts/#Mathematical-Foundation","page":"Concepts","title":"Mathematical Foundation","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"K-mer Space: 4^k possible DNA k-mers\nFrequency Spectrum: Distribution of k-mer frequencies\nCoverage Estimation: Genome size estimation from k-mer frequencies","category":"page"},{"location":"concepts/#Biological-Interpretation","page":"Concepts","title":"Biological Interpretation","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Repetitive Elements: High-frequency k-mers indicate repeats\nSequencing Errors: Low-frequency k-mers often represent errors\nGenome Complexity: Unique k-mers indicate complex regions","category":"page"},{"location":"concepts/#K-mer-Applications","page":"Concepts","title":"K-mer Applications","text":"","category":"section"},{"location":"concepts/#Genome-Assembly","page":"Concepts","title":"Genome Assembly","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Error Correction: Remove k-mers with low frequency\nOverlap Detection: Find shared k-mers between reads\nGraph Construction: Build de Bruijn graphs","category":"page"},{"location":"concepts/#Quality-Assessment","page":"Concepts","title":"Quality Assessment","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Coverage Estimation: Estimate genome size and coverage\nContamination Detection: Identify foreign DNA\nPloidy Estimation: Detect polyploidy from k-mer frequencies","category":"page"},{"location":"concepts/#Parameter-Selection","page":"Concepts","title":"Parameter Selection","text":"","category":"section"},{"location":"concepts/#Choosing-K","page":"Concepts","title":"Choosing K","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Small K (k=15-21): Sensitive to errors, good for error correction\nMedium K (k=25-31): Balanced sensitivity/specificity\nLarge K (k=35-51): Specific but may miss overlaps","category":"page"},{"location":"concepts/#Memory-Considerations","page":"Concepts","title":"Memory Considerations","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Dense Matrices: Store all possible k-mers (memory intensive)\nSparse Matrices: Store only observed k-mers (memory efficient)\nCounting Algorithms: Bloom filters, Count-Min sketch","category":"page"},{"location":"concepts/#When-to-Use-K-mer-Analysis","page":"Concepts","title":"When to Use K-mer Analysis","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Application K-mer Size Matrix Type Use Case\nError Correction 15-21 Dense Remove sequencing errors\nAssembly 25-31 Sparse Genome assembly\nRepeat Detection 31-51 Sparse Identify repetitive elements\nContamination 21-31 Sparse Detect foreign DNA","category":"page"},{"location":"concepts/#Mycelia-Functions-3","page":"Concepts","title":"Mycelia Functions","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"# Count k-mers\ncount_kmers(\"reads.fastq\", k=21)\n\n# Dense vs sparse counting\nfasta_list_to_dense_kmer_counts(files, k=21)\nfasta_list_to_sparse_kmer_counts(files, k=21)\n\n# K-mer spectrum analysis\nkmer_frequency_spectrum(kmer_counts)","category":"page"},{"location":"concepts/#Genome-Assembly-2","page":"Concepts","title":"Genome Assembly","text":"","category":"section"},{"location":"concepts/#Concept:-Reconstructing-Genomes","page":"Concepts","title":"Concept: Reconstructing Genomes","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Biological Context: Sequencing breaks genomes into fragments. Assembly reconstructs the original genome by finding overlaps between fragments.","category":"page"},{"location":"concepts/#Assembly-Algorithms","page":"Concepts","title":"Assembly Algorithms","text":"","category":"section"},{"location":"concepts/#Overlap-Layout-Consensus-(OLC)","page":"Concepts","title":"Overlap-Layout-Consensus (OLC)","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Overlap: Find overlaps between all reads\nLayout: Order reads based on overlaps\nConsensus: Generate consensus sequence\nBest For: Long reads (PacBio, Nanopore)","category":"page"},{"location":"concepts/#De-Bruijn-Graph","page":"Concepts","title":"De Bruijn Graph","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"K-mer Decomposition: Break reads into k-mers\nGraph Construction: Connect overlapping k-mers\nPath Finding: Find Eulerian paths through graph\nBest For: Short reads (Illumina)","category":"page"},{"location":"concepts/#String-Graph","page":"Concepts","title":"String Graph","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Overlap Graph: Nodes are reads, edges are overlaps\nTransitivity Reduction: Remove redundant edges\nContig Construction: Find paths through graph\nBest For: Long reads with high accuracy","category":"page"},{"location":"concepts/#Assembly-Challenges","page":"Concepts","title":"Assembly Challenges","text":"","category":"section"},{"location":"concepts/#Repetitive-Sequences","page":"Concepts","title":"Repetitive Sequences","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Problem: Identical sequences confuse assembly\nSolution: Long reads that span repeats\nTools: Repeat-aware assemblers, scaffolding","category":"page"},{"location":"concepts/#Heterozygosity","page":"Concepts","title":"Heterozygosity","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Problem: Diploid genomes have two alleles\nSolution: Haplotype-aware assembly\nTools: Trio binning, Hi-C scaffolding","category":"page"},{"location":"concepts/#Polyploidy","page":"Concepts","title":"Polyploidy","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Problem: Multiple copies of chromosomes\nSolution: Specialized polyploid assemblers\nTools: Ploidy-aware algorithms","category":"page"},{"location":"concepts/#Assembly-Quality-Metrics","page":"Concepts","title":"Assembly Quality Metrics","text":"","category":"section"},{"location":"concepts/#Contiguity","page":"Concepts","title":"Contiguity","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"N50: Length where 50% of assembly is in contigs of this length or longer\nL50: Number of contigs containing 50% of assembly\nContig Count: Total number of contigs (fewer is better)","category":"page"},{"location":"concepts/#Completeness","page":"Concepts","title":"Completeness","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Genome Coverage: Percentage of genome assembled\nGene Completeness: Percentage of expected genes found\nBUSCO Scores: Conserved gene completeness","category":"page"},{"location":"concepts/#Accuracy","page":"Concepts","title":"Accuracy","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Base Accuracy: Percentage of correct bases\nStructural Accuracy: Correct arrangement of sequences\nValidation: Comparison with reference genome","category":"page"},{"location":"concepts/#When-to-Use-Different-Assemblers","page":"Concepts","title":"When to Use Different Assemblers","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Data Type Assembler Algorithm Strengths\nHiFi hifiasm String graph High accuracy, haplotype-aware\nNanopore Flye Repeat graph Long reads, repetitive genomes\nIllumina SPAdes de Bruijn Short reads, microbial genomes\nHybrid MaSuRCA Hybrid Combines short and long reads","category":"page"},{"location":"concepts/#Mycelia-Functions-4","page":"Concepts","title":"Mycelia Functions","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"# Run assembly\nMycelia.assemble_genome(\"reads.fastq\", output_dir=\"assembly\")\n\n# Evaluate assembly quality\nevaluate_assembly(assembly_fasta)\n\n# Assembly statistics\ncalculate_assembly_stats(contigs)","category":"page"},{"location":"concepts/#Gene-Annotation","page":"Concepts","title":"Gene Annotation","text":"","category":"section"},{"location":"concepts/#Concept:-Identifying-Functional-Elements","page":"Concepts","title":"Concept: Identifying Functional Elements","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Biological Context: Raw genome sequences are meaningless without annotation. Gene annotation identifies protein-coding genes, regulatory elements, and other functional sequences.","category":"page"},{"location":"concepts/#Annotation-Types","page":"Concepts","title":"Annotation Types","text":"","category":"section"},{"location":"concepts/#Structural-Annotation","page":"Concepts","title":"Structural Annotation","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Gene Prediction: Identify protein-coding genes\nExon-Intron Structure: Define gene boundaries\nPromoter Prediction: Identify regulatory sequences\nRepeat Annotation: Classify repetitive elements","category":"page"},{"location":"concepts/#Functional-Annotation","page":"Concepts","title":"Functional Annotation","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Protein Function: Predict what proteins do\nPathway Mapping: Assign genes to metabolic pathways\nGO Terms: Gene Ontology functional classification\nDomain Annotation: Identify protein domains","category":"page"},{"location":"concepts/#Gene-Prediction-Methods","page":"Concepts","title":"Gene Prediction Methods","text":"","category":"section"},{"location":"concepts/#Ab-Initio-Prediction","page":"Concepts","title":"Ab Initio Prediction","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Approach: Use sequence signals (start codons, splice sites)\nAdvantages: No external data required\nLimitations: Lower accuracy, misses non-canonical genes\nTools: Prodigal, Augustus, GeneMark","category":"page"},{"location":"concepts/#Homology-Based-Prediction","page":"Concepts","title":"Homology-Based Prediction","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Approach: Compare to known genes in databases\nAdvantages: Higher accuracy for conserved genes\nLimitations: Misses novel genes, depends on database quality\nTools: BLAST, DIAMOND, MMseqs2","category":"page"},{"location":"concepts/#RNA-seq-Guided-Prediction","page":"Concepts","title":"RNA-seq Guided Prediction","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Approach: Use transcriptome data to guide prediction\nAdvantages: High accuracy, identifies expressed genes\nLimitations: Requires RNA-seq data, misses lowly expressed genes\nTools: StringTie, Cufflinks, BRAKER","category":"page"},{"location":"concepts/#Annotation-Challenges","page":"Concepts","title":"Annotation Challenges","text":"","category":"section"},{"location":"concepts/#Eukaryotic-Complexity","page":"Concepts","title":"Eukaryotic Complexity","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Alternative Splicing: Multiple transcripts per gene\nPseudogenes: Non-functional gene copies\nNon-coding RNAs: Functional RNAs that don't code for proteins","category":"page"},{"location":"concepts/#Prokaryotic-Specifics","page":"Concepts","title":"Prokaryotic Specifics","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Operons: Polycistronic transcripts\nOverlapping Genes: Genes sharing sequence\nHorizontal Gene Transfer: Genes from other species","category":"page"},{"location":"concepts/#Quality-Assessment-2","page":"Concepts","title":"Quality Assessment","text":"","category":"section"},{"location":"concepts/#Annotation-Completeness","page":"Concepts","title":"Annotation Completeness","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Gene Density: Number of genes per kb\nProtein Completeness: Percentage of complete proteins\nFunctional Coverage: Percentage of genes with functional annotation","category":"page"},{"location":"concepts/#Annotation-Accuracy","page":"Concepts","title":"Annotation Accuracy","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Validation: Comparison with experimental data\nConsistency: Agreement between different methods\nBenchmarking: Comparison with reference annotations","category":"page"},{"location":"concepts/#When-to-Use-Different-Approaches","page":"Concepts","title":"When to Use Different Approaches","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Genome Type Method Tools Considerations\nBacterial Ab initio Prodigal Simple gene structure\nViral Homology BLAST Small genomes, database dependent\nFungal Hybrid Augustus + BLAST Moderate complexity\nPlant/Animal RNA-seq guided BRAKER High complexity, alternative splicing","category":"page"},{"location":"concepts/#Mycelia-Functions-5","page":"Concepts","title":"Mycelia Functions","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"# Predict genes\npredict_genes(genome_fasta, genetic_code=\"standard\")\n\n# Functional annotation\nannotate_functions(proteins, database=\"uniprot\")\n\n# Annotation evaluation\nevaluate_annotation(gff_file, reference_gff)","category":"page"},{"location":"concepts/#Comparative-Genomics","page":"Concepts","title":"Comparative Genomics","text":"","category":"section"},{"location":"concepts/#Concept:-Comparing-Genomes","page":"Concepts","title":"Concept: Comparing Genomes","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Biological Context: Comparing genomes reveals evolutionary relationships, functional elements, and species-specific adaptations.","category":"page"},{"location":"concepts/#Comparative-Approaches","page":"Concepts","title":"Comparative Approaches","text":"","category":"section"},{"location":"concepts/#Pairwise-Comparison","page":"Concepts","title":"Pairwise Comparison","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Synteny: Conserved gene order between species\nOrthology: Corresponding genes in different species\nWhole Genome Alignment: Align entire genomes\nStructural Variation: Differences in genome structure","category":"page"},{"location":"concepts/#Pangenome-Analysis","page":"Concepts","title":"Pangenome Analysis","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Core Genome: Genes present in all individuals\nAccessory Genome: Genes present in some individuals\nUnique Genes: Genes present in single individuals\nGene Gain/Loss: Evolution of gene content","category":"page"},{"location":"concepts/#Pangenome-Construction","page":"Concepts","title":"Pangenome Construction","text":"","category":"section"},{"location":"concepts/#Graph-Based-Approaches","page":"Concepts","title":"Graph-Based Approaches","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Gene Graphs: Nodes are genes, edges are relationships\nSequence Graphs: Nodes are sequences, edges are overlaps\nVariation Graphs: Represent genetic variation as graphs","category":"page"},{"location":"concepts/#Clustering-Approaches","page":"Concepts","title":"Clustering Approaches","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Sequence Similarity: Group similar sequences\nSynteny: Group genes with conserved context\nFunctional Similarity: Group genes with similar functions","category":"page"},{"location":"concepts/#Evolutionary-Analysis","page":"Concepts","title":"Evolutionary Analysis","text":"","category":"section"},{"location":"concepts/#Phylogenetic-Trees","page":"Concepts","title":"Phylogenetic Trees","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Species Trees: Evolutionary relationships between species\nGene Trees: Evolution of individual genes\nReconciliation: Compare gene and species trees","category":"page"},{"location":"concepts/#Selection-Analysis","page":"Concepts","title":"Selection Analysis","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Positive Selection: Genes under selective pressure\nPurifying Selection: Genes with functional constraints\nNeutral Evolution: Genes evolving without selection","category":"page"},{"location":"concepts/#Applications","page":"Concepts","title":"Applications","text":"","category":"section"},{"location":"concepts/#Medical-Genomics","page":"Concepts","title":"Medical Genomics","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Drug Resistance: Compare sensitive vs resistant strains\nVirulence Factors: Identify pathogenicity genes\nVaccine Targets: Find conserved antigens","category":"page"},{"location":"concepts/#Agricultural-Genomics","page":"Concepts","title":"Agricultural Genomics","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Crop Improvement: Identify beneficial alleles\nDisease Resistance: Find resistance genes\nStress Tolerance: Identify adaptation mechanisms","category":"page"},{"location":"concepts/#When-to-Use-Comparative-Genomics","page":"Concepts","title":"When to Use Comparative Genomics","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Research Question Approach Scale Tools\nSpecies evolution Phylogenomics Many species Core genome alignment\nPopulation variation Pangenomics Many individuals Graph-based methods\nFunctional elements Synteny Few genomes Whole genome alignment\nAdaptation Selection analysis Population data Evolutionary models","category":"page"},{"location":"concepts/#Mycelia-Functions-6","page":"Concepts","title":"Mycelia Functions","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"# Build pangenome\nbuild_pangenome(genome_list, clustering_threshold=0.95)\n\n# Phylogenetic analysis\nconstruct_phylogeny(core_genes, method=\"ml\")\n\n# Comparative analysis\ncompare_genomes(genome1, genome2, method=\"synteny\")","category":"page"},{"location":"concepts/#Phylogenetics","page":"Concepts","title":"Phylogenetics","text":"","category":"section"},{"location":"concepts/#Concept:-Evolutionary-Relationships","page":"Concepts","title":"Concept: Evolutionary Relationships","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Biological Context: Phylogenetics reconstructs evolutionary history from molecular data, revealing how species are related and when they diverged.","category":"page"},{"location":"concepts/#Tree-Construction-Methods","page":"Concepts","title":"Tree Construction Methods","text":"","category":"section"},{"location":"concepts/#Distance-Based-Methods","page":"Concepts","title":"Distance-Based Methods","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"UPGMA: Assumes molecular clock\nNeighbor-Joining: Doesn't assume molecular clock\nMinimum Evolution: Finds tree with shortest total branch length","category":"page"},{"location":"concepts/#Character-Based-Methods","page":"Concepts","title":"Character-Based Methods","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Maximum Parsimony: Minimizes evolutionary changes\nMaximum Likelihood: Finds most likely tree given data\nBayesian Inference: Incorporates prior knowledge","category":"page"},{"location":"concepts/#Molecular-Evolution-Models","page":"Concepts","title":"Molecular Evolution Models","text":"","category":"section"},{"location":"concepts/#Nucleotide-Substitution-Models","page":"Concepts","title":"Nucleotide Substitution Models","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"JC69: All substitutions equally likely\nK80: Different rates for transitions/transversions\nGTR: General time-reversible model","category":"page"},{"location":"concepts/#Protein-Evolution-Models","page":"Concepts","title":"Protein Evolution Models","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Poisson: All amino acid changes equally likely\nJTT: Jones-Taylor-Thornton model\nLG: Le-Gascuel model","category":"page"},{"location":"concepts/#Tree-Evaluation","page":"Concepts","title":"Tree Evaluation","text":"","category":"section"},{"location":"concepts/#Support-Values","page":"Concepts","title":"Support Values","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Bootstrap: Resampling support for branches\nPosterior Probability: Bayesian support\nSH-like aLRT: Likelihood ratio test","category":"page"},{"location":"concepts/#Tree-Comparison","page":"Concepts","title":"Tree Comparison","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Robinson-Foulds: Topological distance\nLikelihood Ratio: Statistical comparison\nConsensus Trees: Combine multiple trees","category":"page"},{"location":"concepts/#Applications-2","page":"Concepts","title":"Applications","text":"","category":"section"},{"location":"concepts/#Taxonomy","page":"Concepts","title":"Taxonomy","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Species Identification: Place unknown species\nClassification: Revise taxonomic relationships\nDiversity Assessment: Measure evolutionary diversity","category":"page"},{"location":"concepts/#Epidemiology","page":"Concepts","title":"Epidemiology","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Outbreak Tracking: Trace disease transmission\nVaccine Design: Understand pathogen evolution\nDrug Resistance: Track resistance evolution","category":"page"},{"location":"concepts/#When-to-Use-Phylogenetics","page":"Concepts","title":"When to Use Phylogenetics","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Data Type Method Use Case Considerations\nSingle gene NJ/ML Quick analysis May not reflect species tree\nMultiple genes Concatenation Species phylogeny Assumes same tree topology\nGenome-wide Coalescent Population genetics Accounts for incomplete lineage sorting\nTime-calibrated Molecular clock Divergence dating Requires calibration points","category":"page"},{"location":"concepts/#Mycelia-Functions-7","page":"Concepts","title":"Mycelia Functions","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"# Construct phylogeny\nbuild_phylogenetic_tree(alignment, method=\"ml\")\n\n# Molecular clock analysis\nestimate_divergence_times(tree, calibration_points)\n\n# Tree visualization\nplot_phylogenetic_tree(tree, layout=\"circular\")","category":"page"},{"location":"concepts/#Tool-Selection-Guide","page":"Concepts","title":"Tool Selection Guide","text":"","category":"section"},{"location":"concepts/#Choosing-the-Right-Analysis","page":"Concepts","title":"Choosing the Right Analysis","text":"","category":"section"},{"location":"concepts/#Data-Driven-Decisions","page":"Concepts","title":"Data-Driven Decisions","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Consider Your Data Type","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Illumina: Short read optimized tools\nPacBio/Nanopore: Long read specialized tools\nHybrid: Tools supporting multiple data types","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Consider Your Organism","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Bacteria: Simpler tools, less memory\nEukaryotes: Complex tools, more resources\nViruses: Specialized viral tools","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Consider Your Resources","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Local Machine: Memory/CPU constraints\nHPC Cluster: Parallel processing available\nCloud: Scalable but cost considerations","category":"page"},{"location":"concepts/#Question-Driven-Decisions","page":"Concepts","title":"Question-Driven Decisions","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Assembly Quality","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Draft Assembly: Fast tools, lower quality\nReference Quality: Comprehensive tools, higher quality\nComparison: Multiple assemblers, best result","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Annotation Depth","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Basic Annotation: Fast gene prediction\nComprehensive: Multiple evidence types\nComparative: Cross-species evidence","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Analysis Scope","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Single Genome: Individual analysis tools\nPopulation: Population genetics tools\nComparative: Multi-genome tools","category":"page"},{"location":"concepts/#Performance-Considerations","page":"Concepts","title":"Performance Considerations","text":"","category":"section"},{"location":"concepts/#Memory-Requirements","page":"Concepts","title":"Memory Requirements","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"K-mer Analysis: Exponential with k size\nAssembly: Linear with genome size\nAnnotation: Depends on database size","category":"page"},{"location":"concepts/#Time-Complexity","page":"Concepts","title":"Time Complexity","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Data Download: Network dependent\nQuality Control: Linear with data size\nAssembly: Depends on algorithm and data\nAnnotation: Depends on database searches","category":"page"},{"location":"concepts/#Accuracy-Trade-offs","page":"Concepts","title":"Accuracy Trade-offs","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Speed vs Accuracy: Fast tools may sacrifice accuracy\nSensitivity vs Specificity: Detect more vs fewer false positives\nCompleteness vs Contiguity: More complete vs fewer contigs","category":"page"},{"location":"concepts/#Best-Practices","page":"Concepts","title":"Best Practices","text":"","category":"section"},{"location":"concepts/#Workflow-Design","page":"Concepts","title":"Workflow Design","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Start Simple: Use basic tools first\nIterate: Improve based on results\nValidate: Check results at each step\nDocument: Record parameters and decisions","category":"page"},{"location":"concepts/#Quality-Control-2","page":"Concepts","title":"Quality Control","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Check Inputs: Validate data quality\nMonitor Progress: Track intermediate results\nEvaluate Outputs: Assess final results\nCompare Methods: Use multiple approaches","category":"page"},{"location":"concepts/#Reproducibility","page":"Concepts","title":"Reproducibility","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Version Control: Track software versions\nParameter Recording: Document all settings\nEnvironment Management: Use containers/environments\nData Provenance: Track data sources","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"This conceptual guide provides the foundation for understanding Mycelia's tools and making informed decisions about your bioinformatics analyses. Each tutorial and benchmark builds on these concepts with practical implementations.","category":"page"},{"location":"getting-started/#Getting-Started-with-Mycelia","page":"Getting Started","title":"Getting Started with Mycelia","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Welcome to Mycelia, an experimental Julia package for bioinformatics and computational biology. This guide will help you install Mycelia and explore its current capabilities.","category":"page"},{"location":"getting-started/#What-is-Mycelia?","page":"Getting Started","title":"What is Mycelia?","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Mycelia is a research-oriented bioinformatics package that currently provides:","category":"page"},{"location":"getting-started/#Working-Features","page":"Getting Started","title":"Working Features","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Basic Sequence I/O: FASTA/FASTQ file reading and writing\nRead Simulation: PacBio and Nanopore read simulators  \nTool Integration: Wrappers for established assemblers (MEGAHIT, SPAdes, hifiasm)\nK-mer Analysis: Canonical k-mer counting and distance calculations\nHPC Support: SLURM job submission and rclone integration","category":"page"},{"location":"getting-started/#Experimental-Features","page":"Getting Started","title":"Experimental Features","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Novel Assembly Algorithms: Graph-based approaches incorporating quality scores\nPangenome Analysis: K-mer based comparative genomics\nQuality Control: Integration with external QC tools","category":"page"},{"location":"getting-started/#Planned-Features","page":"Getting Started","title":"Planned Features","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Annotation: Gene prediction integration\nPhylogenetics: Tree construction from pangenome data\nVisualization: Interactive genomic plots","category":"page"},{"location":"getting-started/#Prerequisites","page":"Getting Started","title":"Prerequisites","text":"","category":"section"},{"location":"getting-started/#Julia-Installation","page":"Getting Started","title":"Julia Installation","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Mycelia is tested against Julia LTS and release. Install Julia using juliaup:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Install juliaup\ncurl -fsSL https://install.julialang.org | sh\n\n# Install latest lts Julia\njuliaup add lts\njuliaup default lts\n\n# Install latest release Julia\njuliaup add release\njuliaup default release","category":"page"},{"location":"getting-started/#System-Dependencies","page":"Getting Started","title":"System Dependencies","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Mycelia integrates with external bioinformatics tools. For full functionality, you'll need conda. If no conda environment is available, Mycelia will install it's own environment using Conda.jl.","category":"page"},{"location":"getting-started/#HPC-Environment-Setup","page":"Getting Started","title":"HPC Environment Setup","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"If you're using Mycelia on HPC systems, you may need to reset the LD_LIBRARY_PATH to avoid conflicts with visualization libraries:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Launch Julia with clean library path\nexport LD_LIBRARY_PATH=\"\" && julia","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"For Jupyter kernels, add this to your kernel.json:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"{\n  \"env\": {\n    \"LD_LIBRARY_PATH\": \"\"\n  }\n}","category":"page"},{"location":"getting-started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting-started/#For-Users","page":"Getting Started","title":"For Users","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Install Mycelia directly from GitHub:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"import Pkg\nPkg.add(url=\"https://github.com/cjprybol/Mycelia.git\")","category":"page"},{"location":"getting-started/#For-Developers","page":"Getting Started","title":"For Developers","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Clone and develop the package:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"import Pkg\nPkg.develop(url=\"git@github.com:cjprybol/Mycelia.git\")","category":"page"},{"location":"getting-started/#Your-First-Analysis","page":"Getting Started","title":"Your First Analysis","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Let's walk through a complete workflow using small test datasets included with Mycelia.","category":"page"},{"location":"getting-started/#1.-Load-Mycelia","page":"Getting Started","title":"1. Load Mycelia","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"import Mycelia","category":"page"},{"location":"getting-started/#2.-Download-Test-Data","page":"Getting Started","title":"2. Download Test Data","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Download a reference genome for testing:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Download a small viral genome (phiX174)\ngenome_file = Mycelia.download_genome_by_accession(accession=\"NC_001422.1\")\n\n# Or create a random test sequence\ntest_genome = Mycelia.random_fasta_record(moltype=:DNA, L=10000)\nMycelia.write_fasta(outfile=\"test_genome.fasta\", records=[test_genome])\n\n# Simulate reads from the genome\nreads_file = Mycelia.simulate_pacbio_reads(fasta=\"test_genome.fasta\", quantity=\"20x\")\nMycelia.write_fastq(\"test_reads.fastq\", reads)","category":"page"},{"location":"getting-started/#3.-Quality-Control-(Using-External-Tools)","page":"Getting Started","title":"3. Quality Control (Using External Tools)","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Filter reads using integrated external tools:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Filter long reads with filtlong\nMycelia.qc_filter_long_reads_filtlong(\n    input_file=\"test_reads.fastq\",\n    output_file=\"filtered_reads.fastq\",\n    min_length=1000,\n    min_mean_q=7\n)\n\n# Note: Native quality assessment functions are planned but not yet implemented","category":"page"},{"location":"getting-started/#4.-K-mer-Analysis","page":"Getting Started","title":"4. K-mer Analysis","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Analyze k-mer composition:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Count canonical k-mers\nimport Kmers\nkmer_counts = Mycelia.count_canonical_kmers(Kmers.DNAKmer{21}, \"test_reads.fastq\")\nprintln(\"Unique k-mers: $(length(kmer_counts))\")\n\n# Note: K-mer spectrum analysis and plotting functions are planned","category":"page"},{"location":"getting-started/#5.-Genome-Assembly","page":"Getting Started","title":"5. Genome Assembly","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Assemble using external tools through Mycelia wrappers:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Use MEGAHIT for assembly (works with short reads)\nMycelia.assemble_metagenome_megahit(\n    reads=[\"test_reads.fastq\"],\n    output_dir=\"megahit_assembly\"\n)\n\n# Or use experimental graph-based assembly (research feature)\n# Note: This is experimental and may not produce optimal results\n# assembly = Mycelia.assemble_with_graph_framework(\"test_reads.fastq\")\n\n# Assembly evaluation functions are planned but not yet implemented","category":"page"},{"location":"getting-started/#6.-Comparative-Analysis-(Experimental)","page":"Getting Started","title":"6. Comparative Analysis (Experimental)","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Compare multiple genomes using k-mer analysis:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Compare two genomes\ngenome_files = [\"genome1.fasta\", \"genome2.fasta\"]\npangenome_result = Mycelia.analyze_pangenome_kmers(\n    genome_files,\n    kmer_type=Kmers.DNAKmer{21}\n)\nprintln(\"Core k-mers: $(length(pangenome_result.core_kmers))\")\nprintln(\"Unique k-mers: $(sum(length(v) for v in values(pangenome_result.unique_kmers_by_genome)))\")\n\n# Note: Gene prediction and visualization functions are planned","category":"page"},{"location":"getting-started/#What's-Next?","page":"Getting Started","title":"What's Next?","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Explore the available features and help improve the package:","category":"page"},{"location":"getting-started/#Available-Tutorials","page":"Getting Started","title":"Available Tutorials","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"See the tutorials section for numbered examples\nFocus on working examples that demonstrate current capabilities","category":"page"},{"location":"getting-started/#Research-Features","page":"Getting Started","title":"Research Features","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Explore the experimental graph-based assembly algorithms\nTest the quality-aware k-mer (qualmer) graph implementation\nTry the reinforcement learning guided assembly (very experimental)","category":"page"},{"location":"getting-started/#Contributing","page":"Getting Started","title":"Contributing","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Report issues or feature requests on GitHub\nHelp implement planned features\nImprove documentation for existing functions","category":"page"},{"location":"getting-started/#Note-on-CLI-Tools","page":"Getting Started","title":"Note on CLI Tools","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Command-line interface tools are planned but not yet implemented.","category":"page"},{"location":"getting-started/#API-Reference","page":"Getting Started","title":"API Reference","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Browse the complete API documentation for detailed function references and examples.","category":"page"},{"location":"getting-started/#Getting-Help","page":"Getting Started","title":"Getting Help","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"If you encounter issues:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Check the FAQ for common issues\nBrowse example workflows\nReport bugs on GitHub Issues","category":"page"},{"location":"getting-started/#Memory-and-Performance","page":"Getting Started","title":"Memory and Performance","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"For large-scale analyses:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Check memory requirements\nestimated_memory = Mycelia.estimate_memory_usage(input_file=\"large_reads.fastq\")\nprintln(\"Estimated memory needed: $(estimated_memory) GB\")\n\n# Monitor memory during analysis\nMycelia.with_memory_monitoring() do\n    result = Mycelia.assemble_genome(\"large_reads.fastq\")\nend","category":"page"},{"location":"getting-started/#Contributing-2","page":"Getting Started","title":"Contributing","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Mycelia is open-source and welcomes contributions! See our development guide for details.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Ready to dive deeper? Check out our workflow tutorials for complete biological analyses with real datasets.","category":"page"},{"location":"performance/#Performance-Guide","page":"Performance Guide","title":"Performance Guide","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"This document is under development. The following sections are planned:","category":"page"},{"location":"performance/#Table-of-Contents","page":"Performance Guide","title":"Table of Contents","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"Memory Requirements\nCPU Optimization\nParameter Tuning\nScaling Strategies\nBenchmarking Your Data\nHardware Recommendations","category":"page"},{"location":"performance/#Memory-Requirements","page":"Performance Guide","title":"Memory Requirements","text":"","category":"section"},{"location":"performance/#By-Dataset-Size","page":"Performance Guide","title":"By Dataset Size","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"TODO: Add memory usage tables for different genome sizes","category":"page"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"Small genomes (< 10 Mb): \nBacterial genomes (1-10 Mb):\nLarge genomes (> 100 Mb):","category":"page"},{"location":"performance/#Memory-Optimization","page":"Performance Guide","title":"Memory Optimization","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"TODO: Add memory optimization strategies","category":"page"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"Using memory_limit parameters\nStreaming vs. in-memory processing\nGraph sparsity optimization","category":"page"},{"location":"performance/#CPU-Optimization","page":"Performance Guide","title":"CPU Optimization","text":"","category":"section"},{"location":"performance/#Parallel-Processing","page":"Performance Guide","title":"Parallel Processing","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"TODO: Add parallelization guide","category":"page"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"Setting JULIA_NUM_THREADS\nMulti-core assembly strategies\nDistributed computing options","category":"page"},{"location":"performance/#Algorithm-Selection","page":"Performance Guide","title":"Algorithm Selection","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"TODO: Add algorithm comparison","category":"page"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"Trade-offs between accuracy and speed\nWhen to use different assembly methods\nParameter selection for performance","category":"page"},{"location":"performance/#Parameter-Tuning","page":"Performance Guide","title":"Parameter Tuning","text":"","category":"section"},{"location":"performance/#Assembly-Parameters","page":"Performance Guide","title":"Assembly Parameters","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"TODO: Add parameter tuning guide","category":"page"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"K-mer size selection\nMemory limits\nQuality thresholds","category":"page"},{"location":"performance/#Quality-vs-Speed-Trade-offs","page":"Performance Guide","title":"Quality vs Speed Trade-offs","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"TODO: Add trade-off analysis","category":"page"},{"location":"performance/#Scaling-Strategies","page":"Performance Guide","title":"Scaling Strategies","text":"","category":"section"},{"location":"performance/#Large-Datasets","page":"Performance Guide","title":"Large Datasets","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"TODO: Add scaling strategies","category":"page"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"Chunked processing\nHierarchical assembly\nCloud computing integration","category":"page"},{"location":"performance/#HPC-Integration","page":"Performance Guide","title":"HPC Integration","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"TODO: Add HPC guidance","category":"page"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"SLURM job scripts\nMemory allocation strategies\nParallel file systems","category":"page"},{"location":"performance/#Benchmarking-Your-Data","page":"Performance Guide","title":"Benchmarking Your Data","text":"","category":"section"},{"location":"performance/#Performance-Metrics","page":"Performance Guide","title":"Performance Metrics","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"TODO: Add benchmarking guide","category":"page"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"Runtime estimation\nMemory profiling\nQuality assessment","category":"page"},{"location":"performance/#Comparison-Tools","page":"Performance Guide","title":"Comparison Tools","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"TODO: Add benchmark comparison","category":"page"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"Against other assemblers\nQuality metrics\nResource usage","category":"page"},{"location":"performance/#Hardware-Recommendations","page":"Performance Guide","title":"Hardware Recommendations","text":"","category":"section"},{"location":"performance/#Recommended-Specifications","page":"Performance Guide","title":"Recommended Specifications","text":"","category":"section"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"TODO: Add hardware recommendations","category":"page"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"CPU requirements\nMemory recommendations  \nStorage considerations\nNetwork requirements for HPC","category":"page"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"","category":"page"},{"location":"performance/","page":"Performance Guide","title":"Performance Guide","text":"This guide will be expanded with specific recommendations, benchmarks, and optimization strategies. For current performance information, see the benchmarking documentation.","category":"page"},{"location":"api/workflows/assembly-suite/#Assembly-Suite-Overview","page":"Assembly Suite","title":"Assembly Suite Overview","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Mycelia provides a comprehensive assembly suite with multiple approaches for genome assembly optimization. This document provides an overview of the assembly ecosystem and guidance on choosing the right approach for your data.","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Development Status: The assembly suite includes both stable implementations and experimental features. Features are clearly marked with their current status throughout this documentation.","category":"page"},{"location":"api/workflows/assembly-suite/#Assembly-Philosophy","page":"Assembly Suite","title":"Assembly Philosophy","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Mycelia's assembly suite is built on several core principles:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Accuracy First: Prioritize assembly accuracy over contiguity or speed\nQuality Awareness: Utilize quality scores for better assembly decisions\nGraph Hierarchy: Support 6 complementary graph types for different use cases\nType Safety: Maintain proper BioSequence types throughout (no string conversions)\nModular Design: Choose components based on your specific needs","category":"page"},{"location":"api/workflows/assembly-suite/#Graph-Type-Hierarchy","page":"Assembly Suite","title":"Graph Type Hierarchy","text":"","category":"section"},{"location":"api/workflows/assembly-suite/#Fixed-Length-Graphs-(Assembly-Foundation)","page":"Assembly Suite","title":"Fixed-Length Graphs (Assembly Foundation)","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"N-gram Graphs (build_ngram_graph) - Unicode character analysis\nK-mer Graphs (build_kmer_graph_next) - Standard k-mer assembly\nQualmer Graphs (build_qualmer_graph) - Quality-aware k-mer assembly","category":"page"},{"location":"api/workflows/assembly-suite/#Variable-Length-Graphs-(Simplified-Products)","page":"Assembly Suite","title":"Variable-Length Graphs (Simplified Products)","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"String Graphs (string_to_ngram_graph) - Variable unicode strings\nFASTA Graphs (build_biosequence_graph) - Variable BioSequences\nFASTQ Graphs (build_quality_biosequence_graph) - Quality-aware BioSequences","category":"page"},{"location":"api/workflows/assembly-suite/#Assembly-Approaches","page":"Assembly Suite","title":"Assembly Approaches","text":"","category":"section"},{"location":"api/workflows/assembly-suite/#1.-Standard-Assembly-(Traditional)","page":"Assembly Suite","title":"1. Standard Assembly (Traditional)","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"For basic k-mer assembly without quality awareness:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# Build k-mer graph\ngraph = Mycelia.build_kmer_graph_next(fasta_records; k=31, graph_mode=DoubleStrand)\n\n# Convert to sequence graph\nseq_graph = Mycelia.kmer_graph_to_biosequence_graph(graph, 31)\n\n# Extract contigs\ncontigs = Mycelia.extract_contigs_from_graph(seq_graph)","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Use Cases:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"High-quality FASTA data\nSimple genomes without complex repeats\nWhen computational speed is critical","category":"page"},{"location":"api/workflows/assembly-suite/#2.-Quality-Aware-Assembly","page":"Assembly Suite","title":"2. Quality-Aware Assembly","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"For assembly utilizing FASTQ quality scores:","category":"page"},{"location":"api/workflows/assembly-suite/#Option-A:-Qualmer-Mediated-(Recommended-for-most-cases)","page":"Assembly Suite","title":"Option A: Qualmer-Mediated (Recommended for most cases)","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# Build qualmer graph (k-mer level quality analysis)\nqualmer_graph = Mycelia.build_qualmer_graph(fastq_records; k=31)\n\n# Find quality-weighted paths\nstart_vertex = argmax(v -> qualmer_graph[v].joint_probability, vertices(qualmer_graph))\noptimal_path = Mycelia.find_quality_weighted_path(qualmer_graph, start_vertex)\n\n# Convert to quality-aware sequence graph\nfastq_graph = Mycelia.qualmer_graph_to_quality_biosequence_graph(qualmer_graph, 31)\n\n# Extract final assembly\nfinal_records = Mycelia.quality_biosequence_graph_to_fastq(fastq_graph, \"assembly\")","category":"page"},{"location":"api/workflows/assembly-suite/#Option-B:-Direct-Quality-Aware","page":"Assembly Suite","title":"Option B: Direct Quality-Aware","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# Build quality-aware sequence graph directly\nfastq_graph = Mycelia.build_quality_biosequence_graph(fastq_records)\n\n# Extract contigs with quality preservation\ncontigs = Mycelia.quality_biosequence_graph_to_fastq(fastq_graph, \"contigs\")","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Use Cases:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Illumina short reads\nError-prone long reads  \nWhen maximum accuracy is required\nComplex genomes with repeats","category":"page"},{"location":"api/workflows/assembly-suite/#3.-Intelligent-Self-Optimizing-Assembly-**Implemented**","page":"Assembly Suite","title":"3. Intelligent Self-Optimizing Assembly ✅ Implemented","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"For automated parameter optimization:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# Intelligent assembly with dynamic k-mer progression\nresults = Mycelia.mycelia_assemble(fastq_file; \n    max_k=101,\n    memory_limit=32_000_000_000,\n    output_dir=\"intelligent_assembly\"\n)\n\n# Cross-validation for quality assessment\nvalidation_results = Mycelia.mycelia_cross_validation(\n    fastq_records;\n    assembly_methods=[:intelligent, :iterative],\n    k_folds=5\n)","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Features:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"✅ Automatic prime k-mer progression\n✅ Sparsity-based k-mer selection\n✅ Memory monitoring and limits\n✅ Cross-validation for quality assessment","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Use Cases:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Unknown optimal parameters\nProduction assembly pipelines\nWhen manual optimization is impractical","category":"page"},{"location":"api/workflows/assembly-suite/#4.-Iterative-Statistical-Assembly-**Implemented**","page":"Assembly Suite","title":"4. Iterative Statistical Assembly ✅ Implemented","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"For statistical path improvement:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# Iterative assembly with read-level improvements\nresults = Mycelia.mycelia_iterative_assemble(fastq_file;\n    max_k=101,\n    memory_limit=32_000_000_000,\n    output_dir=\"iterative_assembly\"\n)","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Features:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"✅ Read-level likelihood optimization\n✅ Statistical path resampling\n✅ Timestamped output for tracking evolution\n🚧 Viterbi integration for optimal paths (partially implemented)","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Use Cases:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"When individual read optimization is beneficial\nDatasets with systematic errors\nResearch applications requiring detailed tracking","category":"page"},{"location":"api/workflows/assembly-suite/#5.-Reinforcement-Learning-Guided-Assembly-**Experimental**","page":"Assembly Suite","title":"5. Reinforcement Learning Guided Assembly 🧪 Experimental","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"For machine learning optimization (four experimental implementations available):","category":"page"},{"location":"api/workflows/assembly-suite/#Custom-RL-Framework-**Experimental-Under-Development**","page":"Assembly Suite","title":"Custom RL Framework 🧪 Experimental - Under Development","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# Train custom RL agent\nagent = Mycelia.DQNPolicy()\nenv = Mycelia.AssemblyEnvironment(reads)\ntrained_agent = Mycelia.train_assembly_agent(env, agent; episodes=1000)\n\n# Apply learned policy\nresults = Mycelia.apply_learned_policy(trained_agent, \"genome.fastq\")","category":"page"},{"location":"api/workflows/assembly-suite/#ReinforcementLearning.jl-Integration-**Experimental-Basic-Implementation**","page":"Assembly Suite","title":"ReinforcementLearning.jl Integration 🧪 Experimental - Basic Implementation","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# Use well-tested RL algorithms\nassembly, history = Mycelia.intelligent_assembly_rljl(\n    reads;\n    algorithm=:dqn,\n    train_episodes=1000\n)","category":"page"},{"location":"api/workflows/assembly-suite/#POMDPs.jl-Integration-**Experimental-Basic-Implementation**","page":"Assembly Suite","title":"POMDPs.jl Integration 🧪 Experimental - Basic Implementation","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# Formal MDP/POMDP approach\nassembly, history = Mycelia.intelligent_assembly_pomdp(\n    reads;\n    solver=:value_iteration,\n    use_pomdp=false\n)","category":"page"},{"location":"api/workflows/assembly-suite/#Monte-Carlo-Tree-Search-(MCTS)-**Experimental-Game-Based-Approach**","page":"Assembly Suite","title":"Monte Carlo Tree Search (MCTS) 🧪 Experimental - Game-Based Approach","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# Assembly as a sequential decision game\nassembly, trajectory = Mycelia.intelligent_assembly_mcts(\n    reads;\n    n_simulations=1000,\n    exploration_constant=sqrt(2)\n)","category":"page"},{"location":"api/workflows/assembly-suite/#Comparison-Framework-**Experimental-Proof-of-Concept**","page":"Assembly Suite","title":"Comparison Framework 🧪 Experimental - Proof of Concept","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# Compare all four RL approaches\ncomparison = Mycelia.compare_rl_approaches(\n    reads;\n    approaches=[:custom, :rljl, :pomdp, :mcts],\n    rljl_algorithm=:dqn,\n    pomdp_solver=:value_iteration,\n    mcts_n_simulations=1000\n)","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Use Cases:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Research into assembly optimization\nWhen you have training data for optimization\nAutomated parameter learning from experience","category":"page"},{"location":"api/workflows/assembly-suite/#Quality-Assessment-and-Metrics","page":"Assembly Suite","title":"Quality Assessment and Metrics","text":"","category":"section"},{"location":"api/workflows/assembly-suite/#Assembly-Quality-Metrics","page":"Assembly Suite","title":"Assembly Quality Metrics","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# Comprehensive quality assessment ✅ **Implemented**\nmetrics = Mycelia.calculate_assembly_quality_metrics(qualmer_graph)\n\n# Error detection 🚧 **Partially Implemented**\npotential_errors = Mycelia.identify_potential_errors(graph)\n\n# Cross-validation comparison ✅ **Implemented**\ncomparison = Mycelia.compare_assembly_statistics(\n    intelligent_results,\n    iterative_results\n)","category":"page"},{"location":"api/workflows/assembly-suite/#Available-Metrics","page":"Assembly Suite","title":"Available Metrics","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"✅ Mean k-mer coverage and quality\n✅ Joint probability confidence scores\n✅ Low-confidence k-mer fraction\n🚧 Assembly accuracy (when reference available - basic implementation)\n📋 Read mapping statistics (planned)\n📋 Contig N50 and other contiguity metrics (planned)","category":"page"},{"location":"api/workflows/assembly-suite/#Choosing-the-Right-Approach","page":"Assembly Suite","title":"Choosing the Right Approach","text":"","category":"section"},{"location":"api/workflows/assembly-suite/#Decision-Matrix","page":"Assembly Suite","title":"Decision Matrix","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Data Type Quality Complexity Recommended Approach\nFASTA, High Quality N/A Simple Standard K-mer\nFASTQ, High Quality >Q30 Simple Direct Quality-Aware\nFASTQ, Medium Quality Q20-Q30 Medium Qualmer-Mediated\nFASTQ, Low Quality <Q20 Complex Intelligent + Iterative\nUnknown Parameters Any Any Intelligent Assembly\nResearch/Optimization Any Any RL-Guided","category":"page"},{"location":"api/workflows/assembly-suite/#Performance-Considerations","page":"Assembly Suite","title":"Performance Considerations","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Approach Speed Memory Accuracy Automation Status\nStandard ⭐⭐⭐⭐⭐ ⭐⭐⭐⭐ ⭐⭐⭐ ⭐⭐ ✅ Stable\nQuality-Aware ⭐⭐⭐⭐ ⭐⭐⭐ ⭐⭐⭐⭐ ⭐⭐⭐ ✅ Stable\nIntelligent ⭐⭐⭐ ⭐⭐⭐ ⭐⭐⭐⭐⭐ ⭐⭐⭐⭐⭐ ✅ Stable\nIterative ⭐⭐ ⭐⭐ ⭐⭐⭐⭐ ⭐⭐⭐⭐ ✅ Stable\nRL-Guided ⭐ ⭐ ⭐⭐⭐⭐⭐ ⭐⭐⭐⭐⭐ 🧪 Experimental","category":"page"},{"location":"api/workflows/assembly-suite/#Integration-Examples","page":"Assembly Suite","title":"Integration Examples","text":"","category":"section"},{"location":"api/workflows/assembly-suite/#Complete-Workflow-Example","page":"Assembly Suite","title":"Complete Workflow Example","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# 1. Quality control\nqc_results = Mycelia.assess_fastq_quality(fastq_file)\n\n# 2. Choose assembly approach based on quality\nif qc_results.mean_quality > 30\n    # High quality - use direct approach\n    assembly = Mycelia.build_quality_biosequence_graph(records)\nelse\n    # Lower quality - use intelligent approach\n    assembly = Mycelia.mycelia_assemble(fastq_file)\nend\n\n# 3. Validate assembly\nvalidation = Mycelia.mycelia_cross_validation(records)\n\n# 4. Extract final results\nfinal_contigs = Mycelia.quality_biosequence_graph_to_fastq(assembly, \"final\")","category":"page"},{"location":"api/workflows/assembly-suite/#Benchmarking-Workflow","page":"Assembly Suite","title":"Benchmarking Workflow","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"import Mycelia\n\n# Compare multiple approaches\napproaches = [:intelligent, :iterative, :quality_aware]\nbenchmark_results = Mycelia.benchmark_assembly_approaches(\n    test_datasets,\n    approaches;\n    metrics=[:accuracy, :speed, :memory]\n)","category":"page"},{"location":"api/workflows/assembly-suite/#Best-Practices","page":"Assembly Suite","title":"Best Practices","text":"","category":"section"},{"location":"api/workflows/assembly-suite/#General-Guidelines","page":"Assembly Suite","title":"General Guidelines","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Start Simple: Use standard k-mer assembly for initial exploration\nUse Quality: Incorporate quality scores when available\nValidate Results: Always use cross-validation for important assemblies\nMonitor Resources: Use memory limits to prevent system crashes\nDocument Parameters: Save assembly parameters for reproducibility","category":"page"},{"location":"api/workflows/assembly-suite/#Performance-Optimization","page":"Assembly Suite","title":"Performance Optimization","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Choose Appropriate k: Use sparsity detection for optimal k-mer sizes\nMemory Management: Configure memory limits based on available resources\nParallel Processing: Utilize multi-threading where available\nIncremental Assembly: Use checkpointing for long-running assemblies","category":"page"},{"location":"api/workflows/assembly-suite/#Quality-Control","page":"Assembly Suite","title":"Quality Control","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Pre-Assembly QC: Assess read quality before choosing approach\nAssembly Validation: Use cross-validation and read mapping\nError Detection: Monitor low-confidence regions\nComparative Analysis: Compare results from multiple approaches","category":"page"},{"location":"api/workflows/assembly-suite/#Implementation-Status-and-Future-Directions","page":"Assembly Suite","title":"Implementation Status and Future Directions","text":"","category":"section"},{"location":"api/workflows/assembly-suite/#Current-Status","page":"Assembly Suite","title":"Current Status","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"✅ Stable: Core graph-based assembly algorithms, quality-aware assembly, intelligent assembly\n🚧 In Development: Error correction algorithms, advanced validation metrics\n🧪 Experimental: Reinforcement learning approaches, POMDP integration\n📋 Planned: Enhanced parallel processing, cloud integration, long-read optimizations","category":"page"},{"location":"api/workflows/assembly-suite/#Experimental-Features-Notice","page":"Assembly Suite","title":"Experimental Features Notice","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"🧪 Experimental features are research implementations that may:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"Require additional dependencies\nHave limited testing coverage\nChange significantly between versions\nBe computationally intensive","category":"page"},{"location":"api/workflows/assembly-suite/#Future-Directions","page":"Assembly Suite","title":"Future Directions","text":"","category":"section"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"The Mycelia assembly suite continues to evolve with:","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"🚧 Enhanced machine learning integration\n📋 Improved parallel processing capabilities\n🚧 Additional quality-aware algorithms\n📋 Extended support for long-read technologies\n📋 Integration with cloud computing platforms","category":"page"},{"location":"api/workflows/assembly-suite/","page":"Assembly Suite","title":"Assembly Suite","text":"For the latest developments, see the Assembly Roadmap.","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Tutorial-5:-Assembly-Validation","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"This tutorial covers comprehensive validation techniques for genome assemblies, including reference-based and reference-free approaches.","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Learning-Objectives","page":"Tutorial 5: Assembly Validation","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"By the end of this tutorial, you will understand:","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Reference-based validation using alignment and comparison tools\nReference-free validation using k-mer and read-based approaches\nBUSCO analysis for gene completeness assessment\nMerqury for k-mer based quality assessment\nStatistical validation and confidence intervals\nComparative validation across multiple assemblies","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Setup","page":"Tutorial 5: Assembly Validation","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"import Pkg\nif isinteractive()\n    Pkg.activate(\"..\")\nend\n\nimport Test\nimport Mycelia\nimport FASTX\nimport Random\nimport Statistics\n\nRandom.seed!(42)","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Part-1:-Validation-Strategy-Overview","page":"Tutorial 5: Assembly Validation","title":"Part 1: Validation Strategy Overview","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Assembly validation requires multiple complementary approaches to ensure comprehensive quality assessment.","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"=== Assembly Validation Tutorial ===\")\n\nprintln(\"Validation Approaches:\")\nprintln(\"1. Reference-based validation\")\nprintln(\"   - Alignment to known reference\")\nprintln(\"   - Synteny analysis\")\nprintln(\"   - Structural variant detection\")\nprintln()\nprintln(\"2. Reference-free validation\")\nprintln(\"   - K-mer based approaches (Merqury)\")\nprintln(\"   - Read mapping validation\")\nprintln(\"   - Internal consistency checks\")\nprintln()\nprintln(\"3. Functional validation\")\nprintln(\"   - Gene completeness (BUSCO)\")\nprintln(\"   - Annotation quality\")\nprintln(\"   - Comparative genomics\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Part-2:-Reference-Based-Validation","page":"Tutorial 5: Assembly Validation","title":"Part 2: Reference-Based Validation","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"When reference genomes are available, direct comparison provides the most straightforward validation approach.","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"\\n=== Reference-Based Validation ===\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Preparing-Test-Data","page":"Tutorial 5: Assembly Validation","title":"Preparing Test Data","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Create reference and assembly for validation demonstration","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Preparing Test Data ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Reference genome","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"reference_size = 100000  ## 100 kb\nreference_genome = Mycelia.random_fasta_record(moltype=:DNA, seed=1, L=reference_size)\nreference_file = \"reference.fasta\"\nMycelia.write_fasta(outfile=reference_file, records=[reference_genome])","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Simulated assembly with some differences","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"assembly_contigs = [\n    # Contig 1: Perfect match to reference positions 1-40000\n    Mycelia.random_fasta_record(moltype=:DNA, seed=1, L=40000),\n    # Contig 2: Reference positions 40001-80000 with some variants\n    Mycelia.random_fasta_record(moltype=:DNA, seed=2, L=40000),\n    # Contig 3: Reference positions 80001-100000\n    Mycelia.random_fasta_record(moltype=:DNA, seed=3, L=20000)\n]\n\nassembly_file = \"assembly.fasta\"\nMycelia.write_fasta(outfile=assembly_file, records=assembly_contigs)\n\nprintln(\"Test data prepared:\")\nprintln(\"  Reference: $(reference_size) bp\")\nprintln(\"  Assembly: $(length(assembly_contigs)) contigs\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Alignment-Based-Validation","page":"Tutorial 5: Assembly Validation","title":"Alignment-Based Validation","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Use alignment tools to compare assembly to reference","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Alignment-Based Validation ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement alignment-based validation","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Whole genome alignment (MUMmer, minimap2)\nCalculate alignment statistics\nIdentify structural differences\nAssess coverage and identity","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"alignment_stats = Dict(\n    \"total_aligned\" => 98500,\n    \"percent_identity\" => 99.2,\n    \"coverage\" => 98.5,\n    \"n_mismatches\" => 800,\n    \"n_indels\" => 45,\n    \"n_structural_variants\" => 3\n)\n\nprintln(\"Alignment Statistics:\")\nfor (metric, value) in alignment_stats\n    println(\"  $metric: $value\")\nend","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Synteny-Analysis","page":"Tutorial 5: Assembly Validation","title":"Synteny Analysis","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Analyze conserved gene order and chromosomal structure","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Synteny Analysis ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement synteny analysis","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Identify orthologous regions\nAnalyze gene order conservation\nDetect chromosomal rearrangements\nVisualize synteny relationships","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Structural-Variant-Detection","page":"Tutorial 5: Assembly Validation","title":"Structural Variant Detection","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Identify large-scale differences between assembly and reference","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Structural Variant Detection ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement structural variant detection","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Detect insertions, deletions, inversions\nIdentify duplications and translocations\nValidate with read evidence\nClassify variant types and sizes","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Part-3:-Reference-Free-Validation","page":"Tutorial 5: Assembly Validation","title":"Part 3: Reference-Free Validation","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"When no reference is available, use intrinsic data properties for validation.","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"\\n=== Reference-Free Validation ===\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#K-mer-Based-Validation-(Merqury)","page":"Tutorial 5: Assembly Validation","title":"K-mer Based Validation (Merqury)","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Use k-mer analysis to assess assembly quality without reference","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- K-mer Based Validation ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement Merqury-style validation","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Generate k-mer database from reads\nCalculate assembly QV (Quality Value)\nAssess k-mer completeness\nDetect assembly errors","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Simulate k-mer validation results","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"merqury_results = Dict(\n    \"assembly_qv\" => 35.2,        ## Phred-scaled quality\n    \"kmer_completeness\" => 98.7,   ## Percentage of read k-mers in assembly\n    \"false_duplications\" => 0.8,   ## Percentage of duplicated k-mers\n    \"solid_kmers\" => 1250000,     ## Number of reliable k-mers\n    \"error_kmers\" => 15000        ## Number of error k-mers\n)\n\nprintln(\"Merqury Results:\")\nfor (metric, value) in merqury_results\n    println(\"  $metric: $value\")\nend","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Read-Mapping-Validation","page":"Tutorial 5: Assembly Validation","title":"Read Mapping Validation","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Map original reads back to assembly for validation","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Read Mapping Validation ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement read mapping validation","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Map reads to assembly\nCalculate mapping statistics\nIdentify unmapped regions\nAssess coverage uniformity","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"mapping_stats = Dict(\n    \"mapped_reads\" => 95.4,       ## Percentage of reads mapped\n    \"properly_paired\" => 92.1,    ## Percentage of properly paired reads\n    \"mean_coverage\" => 24.8,      ## Average coverage depth\n    \"coverage_uniformity\" => 0.85, # Coefficient of variation\n    \"unmapped_regions\" => 147     ## Number of unmapped regions\n)\n\nprintln(\"Read Mapping Statistics:\")\nfor (metric, value) in mapping_stats\n    println(\"  $metric: $value\")\nend","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Internal-Consistency-Validation","page":"Tutorial 5: Assembly Validation","title":"Internal Consistency Validation","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Check assembly internal consistency","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Internal Consistency ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement internal consistency checks","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Check for overlapping contigs\nValidate contig connections\nIdentify potential misassemblies\nAssess gap consistency","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Part-4:-Functional-Validation","page":"Tutorial 5: Assembly Validation","title":"Part 4: Functional Validation","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Validate assembly quality through functional analysis","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"\\n=== Functional Validation ===\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#BUSCO-Analysis","page":"Tutorial 5: Assembly Validation","title":"BUSCO Analysis","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Assess gene completeness using conserved orthologs","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- BUSCO Analysis ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement BUSCO analysis","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Run BUSCO on assembly\nCalculate completeness scores\nIdentify missing genes\nCompare with related species","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"busco_results = Dict(\n    \"complete_single_copy\" => 92.4,\n    \"complete_duplicated\" => 3.2,\n    \"fragmented\" => 2.8,\n    \"missing\" => 1.6,\n    \"total_buscos\" => 1440\n)\n\nprintln(\"BUSCO Results:\")\nfor (metric, value) in busco_results\n    println(\"  $metric: $value\")\nend","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Gene-Annotation-Quality","page":"Tutorial 5: Assembly Validation","title":"Gene Annotation Quality","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Validate through gene prediction and annotation","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Gene Annotation Quality ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement annotation quality assessment","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Predict genes in assembly\nCompare with known gene sets\nAssess annotation consistency\nValidate gene structures","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Part-5:-Comparative-Validation","page":"Tutorial 5: Assembly Validation","title":"Part 5: Comparative Validation","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Compare multiple assemblies to identify best approach","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"\\n=== Comparative Validation ===\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Multi-Assembly-Comparison","page":"Tutorial 5: Assembly Validation","title":"Multi-Assembly Comparison","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Compare assemblies from different tools or parameters","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Multi-Assembly Comparison ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement multi-assembly comparison","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Compare multiple assemblies\nIdentify consistent regions\nAssess tool-specific biases\nGenerate consensus assessments","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Simulate comparison results","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"assembly_comparison = Dict(\n    \"hifiasm\" => Dict(\"n50\" => 25000, \"busco\" => 94.2, \"qv\" => 35.8),\n    \"canu\" => Dict(\"n50\" => 18000, \"busco\" => 91.5, \"qv\" => 33.1),\n    \"flye\" => Dict(\"n50\" => 22000, \"busco\" => 92.8, \"qv\" => 34.5)\n)\n\nprintln(\"Assembly Comparison:\")\nfor (assembler, metrics) in assembly_comparison\n    println(\"  $assembler:\")\n    for (metric, value) in metrics\n        println(\"    $metric: $value\")\n    end\nend","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Statistical-Validation","page":"Tutorial 5: Assembly Validation","title":"Statistical Validation","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Apply statistical tests to validation results","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Statistical Validation ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement statistical validation","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Bootstrap confidence intervals\nSignificance testing\nMultiple testing correction\nEffect size estimation","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Part-6:-Validation-Metrics-Integration","page":"Tutorial 5: Assembly Validation","title":"Part 6: Validation Metrics Integration","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Combine multiple validation approaches for comprehensive assessment","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"\\n=== Integrated Validation ===\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Composite-Quality-Scores","page":"Tutorial 5: Assembly Validation","title":"Composite Quality Scores","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Combine multiple metrics into overall quality assessment","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Composite Quality Scores ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement composite scoring","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Weight different validation metrics\nGenerate overall quality scores\nRank assemblies by quality\nProvide confidence intervals","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"composite_score = Dict(\n    \"overall_quality\" => 8.7,     ## Scale 0-10\n    \"confidence_interval\" => (8.2, 9.1),\n    \"primary_strengths\" => [\"High contiguity\", \"Good gene completeness\"],\n    \"primary_weaknesses\" => [\"Some structural variants\", \"Coverage gaps\"]\n)\n\nprintln(\"Composite Quality Assessment:\")\nfor (metric, value) in composite_score\n    println(\"  $metric: $value\")\nend","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Validation-Report-Generation","page":"Tutorial 5: Assembly Validation","title":"Validation Report Generation","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Create comprehensive validation reports","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Validation Report ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement report generation","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Generate HTML/PDF reports\nInclude visualizations\nProvide recommendations\nExport results to standard formats","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Part-7:-Validation-Visualization","page":"Tutorial 5: Assembly Validation","title":"Part 7: Validation Visualization","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Create visualizations for validation results","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"\\n=== Validation Visualization ===\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Quality-Metric-Plots","page":"Tutorial 5: Assembly Validation","title":"Quality Metric Plots","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Visualize validation metrics","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Quality Metric Plots ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement validation visualization","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Quality score distributions\nMetric correlation plots\nValidation timeline plots\nComparative assembly plots","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Genome-Browser-Integration","page":"Tutorial 5: Assembly Validation","title":"Genome Browser Integration","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Visualize validation results in genome browser context","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Genome Browser Integration ---\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"TODO: Implement genome browser integration","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Generate browser tracks\nHighlight validation issues\nInteractive exploration\nExport visualization formats","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Part-8:-Validation-Best-Practices","page":"Tutorial 5: Assembly Validation","title":"Part 8: Validation Best Practices","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Guidelines for effective assembly validation","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"\\n=== Validation Best Practices ===\")\n\nprintln(\"Validation Strategy:\")\nprintln(\"- Use multiple complementary approaches\")\nprintln(\"- Always validate with original data\")\nprintln(\"- Compare with related genomes when available\")\nprintln(\"- Focus on metrics relevant to your research goals\")\nprintln()\nprintln(\"Quality Thresholds:\")\nprintln(\"- BUSCO completeness: >90% for eukaryotes, >95% for prokaryotes\")\nprintln(\"- Assembly QV: >30 for high-quality assemblies\")\nprintln(\"- Read mapping: >95% of reads should map\")\nprintln(\"- Contig N50: Should be substantial fraction of chromosome size\")\nprintln()\nprintln(\"Common Pitfalls:\")\nprintln(\"- Relying on single validation metric\")\nprintln(\"- Ignoring biological context\")\nprintln(\"- Not validating with original data\")\nprintln(\"- Accepting assemblies without proper validation\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Part-9:-Troubleshooting-Assembly-Issues","page":"Tutorial 5: Assembly Validation","title":"Part 9: Troubleshooting Assembly Issues","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Identify and address common assembly problems","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"\\n=== Troubleshooting Assembly Issues ===\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Common-Problems-and-Solutions","page":"Tutorial 5: Assembly Validation","title":"Common Problems and Solutions","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Systematic approach to assembly problem diagnosis","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"--- Common Assembly Problems ---\")\n\nproblems_solutions = Dict(\n    \"Low contiguity\" => [\n        \"Increase read length or coverage\",\n        \"Optimize assembly parameters\",\n        \"Use scaffolding approaches\",\n        \"Check for contamination\"\n    ],\n    \"Poor gene completeness\" => [\n        \"Check assembly coverage\",\n        \"Examine repeat resolution\",\n        \"Validate gene prediction parameters\",\n        \"Consider alternative assemblers\"\n    ],\n    \"High error rate\" => [\n        \"Increase polishing iterations\",\n        \"Check read quality\",\n        \"Validate assembly parameters\",\n        \"Consider consensus approaches\"\n    ],\n    \"Missing sequences\" => [\n        \"Check for contamination filtering\",\n        \"Examine coverage bias\",\n        \"Validate input data quality\",\n        \"Consider hybrid approaches\"\n    ]\n)\n\nfor (problem, solutions) in problems_solutions\n    println(\"$problem:\")\n    for solution in solutions\n        println(\"  - $solution\")\n    end\n    println()\nend","category":"page"},{"location":"generated/tutorials/05_assembly_validation/#Summary","page":"Tutorial 5: Assembly Validation","title":"Summary","text":"","category":"section"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"println(\"=== Assembly Validation Summary ===\")\nprintln(\"✓ Understanding multiple validation approaches\")\nprintln(\"✓ Implementing reference-based validation techniques\")\nprintln(\"✓ Applying reference-free validation methods\")\nprintln(\"✓ Functional validation through gene completeness\")\nprintln(\"✓ Comparative validation across multiple assemblies\")\nprintln(\"✓ Statistical validation and confidence assessment\")\nprintln(\"✓ Integrated quality scoring and reporting\")\nprintln(\"✓ Troubleshooting common assembly issues\")","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"Cleanup","category":"page"},{"location":"generated/tutorials/05_assembly_validation/","page":"Tutorial 5: Assembly Validation","title":"Tutorial 5: Assembly Validation","text":"cleanup_files = [reference_file, assembly_file]\nfor file in cleanup_files\n    if isfile(file)\n        rm(file, force=true)\n    end\nend\n\nprintln(\"\\nNext: Tutorial 6 - Gene Annotation\")\n\nnothing","category":"page"},{"location":"probabilistic-assembly-hub/#Probabilistic-Assembly-with-Mycelia","page":"Probabilistic Assembly","title":"Probabilistic Assembly with Mycelia","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Mycelia's probabilistic assembly approach combines probabilistic modelling with biological insight to deliver assemblies with confidence intervals.","category":"page"},{"location":"probabilistic-assembly-hub/#What-is-Probabilistic-Assembly?","page":"Probabilistic Assembly","title":"🧬 What is Probabilistic Assembly?","text":"","category":"section"},{"location":"probabilistic-assembly-hub/#Traditional-Assembly","page":"Probabilistic Assembly","title":"Traditional Assembly","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Traditional assemblers make deterministic decisions at each step:","category":"page"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Fixed k-mer size throughout assembly\nBinary decisions: keep or discard sequences\nQuality scores often ignored after initial filtering\nHeuristic-based error correction","category":"page"},{"location":"probabilistic-assembly-hub/#Probabilistic-Assembly","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Mycelia's probabilistic approach treats assembly as a statistical inference problem:","category":"page"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Dynamic k-mer progression based on data characteristics\nProbabilistic path selection using quality scores\nMaximum likelihood error correction\nSelf-optimizing parameters through machine learning","category":"page"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Traditional:  Reads → Graph → Heuristic Cleaning → Assembly\nProbabilistic: Reads → Quality-Aware Graph → Statistical Inference → Optimal Assembly","category":"page"},{"location":"probabilistic-assembly-hub/#Why-Use-Probabilistic-Assembly?","page":"Probabilistic Assembly","title":"🎯 Why Use Probabilistic Assembly?","text":"","category":"section"},{"location":"probabilistic-assembly-hub/#1.-**High-Accuracy**","page":"Probabilistic Assembly","title":"1. High Accuracy","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Preserves quality information throughout assembly\nStatistically principled error correction","category":"page"},{"location":"probabilistic-assembly-hub/#2.-**Self-Optimizing**","page":"Probabilistic Assembly","title":"2. Self-Optimizing","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"No manual parameter tuning required\nAutomatically selects optimal k-mer sizes\nAdapts to your data's characteristics","category":"page"},{"location":"probabilistic-assembly-hub/#3.-**Quality-Aware**","page":"Probabilistic Assembly","title":"3. Quality-Aware","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"First assembler to preserve per-base quality scores\nHandles varying coverage gracefully","category":"page"},{"location":"probabilistic-assembly-hub/#Quick-Start-(5-Minutes)","page":"Probabilistic Assembly","title":"🚀 Quick Start (5 Minutes)","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Get your first assembly running in under 5 minutes:","category":"page"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"# 1. Install Mycelia (one-time setup)\nimport Pkg\nPkg.add(url=\"https://github.com/cjprybol/Mycelia.git\")\n\n# 2. Load the package\nimport Mycelia\n\n# 3. Assemble your genome\nassembly = Mycelia.assemble_genome(\"my_reads.fastq\")\n\n# 4. Check your results\nprintln(\"Assembly complete! $(assembly.num_contigs) contigs, N50: $(assembly.n50)\")\n\n# 5. Save the assembly\nMycelia.write_fasta(assembly.contigs, \"my_assembly.fasta\")","category":"page"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"That's it! Mycelia automatically:","category":"page"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"✓ Detects your data type\n✓ Selects optimal parameters\n✓ Performs quality-aware assembly\n✓ Validates results","category":"page"},{"location":"probabilistic-assembly-hub/#Choose-Your-Path","page":"Probabilistic Assembly","title":"🗺️ Choose Your Path","text":"","category":"section"},{"location":"probabilistic-assembly-hub/#By-Data-Type","page":"Probabilistic Assembly","title":"By Data Type","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"graph TD\n    A[What type of data do you have?] --> B[FASTA only<br/>No quality scores]\n    A --> C[FASTQ<br/>With quality scores]\n    A --> D[Mixed<br/>Short + long reads]\n    \n    B --> E[K-mer Graphs<br/>→ Tutorial 1]\n    C --> F[Qualmer Graphs<br/>→ Tutorial 2]\n    D --> G[Hybrid Assembly<br/>→ Tutorial 3]","category":"page"},{"location":"probabilistic-assembly-hub/#By-Experience-Level","page":"Probabilistic Assembly","title":"By Experience Level","text":"","category":"section"},{"location":"probabilistic-assembly-hub/#**Beginner**-\"I-just-want-it-to-work\"","page":"Probabilistic Assembly","title":"🌱 Beginner - \"I just want it to work\"","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"→ Start with Assembly in 5 Minutes","category":"page"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Automatic parameter selection\nSimple one-function interface\nClear output interpretation","category":"page"},{"location":"probabilistic-assembly-hub/#**Intermediate**-\"I-want-to-understand-and-optimize\"","page":"Probabilistic Assembly","title":"🌿 Intermediate - \"I want to understand and optimize\"","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"→ Continue to Understanding Assembly Methods","category":"page"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Compare different approaches\nTune for your specific needs\nInterpret quality metrics","category":"page"},{"location":"probabilistic-assembly-hub/#**Advanced**-\"I-want-full-control\"","page":"Probabilistic Assembly","title":"🌳 Advanced - \"I want full control\"","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"→ Explore Advanced Assembly Theory","category":"page"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Custom graph algorithms\nMachine learning integration\nNovel method development","category":"page"},{"location":"probabilistic-assembly-hub/#Each-Method","page":"Probabilistic Assembly","title":"📊 Each Method","text":"","category":"section"},{"location":"probabilistic-assembly-hub/#Intelligent-Assembly","page":"Probabilistic Assembly","title":"Intelligent Assembly","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"✅ Automatic parameter optimization\n✅ Good for unknown data characteristics\n✅ Balances speed and accuracy","category":"page"},{"location":"probabilistic-assembly-hub/#Iterative-Assembly","page":"Probabilistic Assembly","title":"Iterative Assembly","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"✅ Best for low-quality data\n✅ Refines assembly through iterations\n⏱️ Takes more time","category":"page"},{"location":"probabilistic-assembly-hub/#Reinforcement-Learning-Assembly","page":"Probabilistic Assembly","title":"Reinforcement Learning Assembly","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"✅ Learns from experience\n✅ Adapts to new data types\n🧪 Experimental feature","category":"page"},{"location":"probabilistic-assembly-hub/#Next-Steps","page":"Probabilistic Assembly","title":"🛠️ Next Steps","text":"","category":"section"},{"location":"probabilistic-assembly-hub/#Ready-to-Start?","page":"Probabilistic Assembly","title":"Ready to Start?","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Install Mycelia - Multiple installation options\nRun the 5-minute tutorial - See it in action\nChoose your workflow - Find the best approach","category":"page"},{"location":"probabilistic-assembly-hub/#Need-Help?","page":"Probabilistic Assembly","title":"Need Help?","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"📖 FAQ - Common questions and troubleshooting\n💬 Community Forum - Ask questions\n🐛 Report Issues - Help us improve","category":"page"},{"location":"probabilistic-assembly-hub/#Want-to-Learn-More?","page":"Probabilistic Assembly","title":"Want to Learn More?","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"🧮 Mathematical Foundations - The theory behind the methods\n📊 Benchmarks - Performance comparisons\n🔬 Case Studies - Real-world applications","category":"page"},{"location":"probabilistic-assembly-hub/#Why-Mycelia?","page":"Probabilistic Assembly","title":"🌟 Why Mycelia?","text":"","category":"section"},{"location":"probabilistic-assembly-hub/#Scientific-Innovation","page":"Probabilistic Assembly","title":"Scientific Innovation","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Novel 6-graph hierarchy - Unifies multiple assembly approaches\nQuality preservation - First to maintain quality throughout assembly\nPrincipled algorithms - Based on proven statistical methods","category":"page"},{"location":"probabilistic-assembly-hub/#Practical-Benefits","page":"Probabilistic Assembly","title":"Practical Benefits","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"No parameter tuning - It should just work\nTransparent results - Data-driven accuracy and completeness\nActive development - Regular updates and improvements","category":"page"},{"location":"probabilistic-assembly-hub/#Open-Source","page":"Probabilistic Assembly","title":"Open Source","text":"","category":"section"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Free to use - MIT licensed\nCommunity driven - Contributions welcome\nTransparent - All algorithms documented","category":"page"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"","category":"page"},{"location":"probabilistic-assembly-hub/","page":"Probabilistic Assembly","title":"Probabilistic Assembly","text":"Ready to experience the future of genome assembly? Get started now →","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#Advanced-Assembly-Theory-and-Practice-in-Mycelia","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"This tutorial demonstrates the theoretical foundations and practical implementation of Mycelia's advanced assembly algorithms, based on research from Mycelia-Dev.","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#Learning-Objectives","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"Understand the mathematical foundations of k-mer size selection\nApply dynamic prime pattern algorithms for optimal k-mer progression\nImplement strain-resolved assembly with quality metrics\nUse statistical graph cleanup methods\nApply metagenomic classification with MAPQ-aware techniques","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"using Mycelia","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#1.-Mathematical-Foundations-of-K-mer-Selection","page":"Advanced Assembly Theory and Practice in Mycelia","title":"1. Mathematical Foundations of K-mer Selection","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"Mycelia's k-mer selection is based on rigorous mathematical principles derived from extensive research on error rate relationships and genomic properties.","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"# ### Error Rate-Based K-mer Selection\n#\n# The fundamental relationship between error rate and optimal k-mer size:\n# lower_bound_k = max(3, floor(1/error_rate - 1))\n\nfunction demonstrate_error_rate_kmer_selection()\n    println(\"Error Rate-Based K-mer Size Selection\")\n    println(\"=====================================\")\n\n    error_rates = [0.01, 0.05, 0.10, 0.15, 0.20]\n\n    for error_rate in error_rates\n        lower_bound = max(3, Int(floor(1/error_rate - 1)))\n\n        # Ensure odd k-mer (better for biological sequences)\n        if lower_bound % 2 == 0\n            lower_bound += 1\n        end\n\n        println(\"Error rate: $(error_rate*100)% → Minimum k-mer size: $lower_bound\")\n    end\n\n    return error_rates\nend\n\ndemonstrate_error_rate_kmer_selection()","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#Sequence-Length-Optimization","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Sequence Length Optimization","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"The log₄(sequence_length) pattern provides optimal starting points for k-mer size selection based on the divergence point where erroneous k-mers begin to dominate true k-mers.","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"function demonstrate_log4_optimization()\n    println(\"\\nLog₄ Sequence Length Optimization\")\n    println(\"=================================\")\n\n    sequence_lengths = [100, 1_000, 10_000, 100_000, 1_000_000]\n\n    for seq_len in sequence_lengths\n        optimal_k = Int(round(log(4, seq_len)))\n\n        # Ensure odd and prime when possible\n        if optimal_k % 2 == 0\n            optimal_k += 1\n        end\n\n        if !Primes.isprime(optimal_k)\n            optimal_k = Primes.nextprime(optimal_k)\n        end\n\n        println(\"Sequence length: $(seq_len) bp → Optimal starting k: $optimal_k\")\n    end\nend\n\ndemonstrate_log4_optimization()","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#2.-Dynamic-Prime-Pattern-Algorithm","page":"Advanced Assembly Theory and Practice in Mycelia","title":"2. Dynamic Prime Pattern Algorithm","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"Mycelia implements a sophisticated dynamic k-mer selection algorithm that exploits the mathematical properties of prime number distribution.","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"# Generate optimal k-mer progression using dynamic prime pattern\nfunction demonstrate_dynamic_prime_pattern()\n    println(\"\\nDynamic Prime Pattern K-mer Selection\")\n    println(\"====================================\")\n\n    # Standard progression for high-quality data\n    k_sequence_standard = Mycelia.dynamic_k_prime_pattern(11, 101, 2)\n    println(\"Standard progression (start=11): $k_sequence_standard\")\n\n    # Progression for error-prone data\n    k_sequence_error_prone = Mycelia.dynamic_k_prime_pattern(7, 51, 2)\n    println(\"Error-prone progression (start=7): $k_sequence_error_prone\")\n\n    # Error rate optimized progression\n    k_sequence_optimized = Mycelia.error_optimized_k_sequence(0.05, 101, 10000)\n    println(\"Error-optimized (5% error, 10kb): $k_sequence_optimized\")\n\n    return k_sequence_standard, k_sequence_error_prone, k_sequence_optimized\nend\n\nk_sequences = demonstrate_dynamic_prime_pattern()","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#Theoretical-Advantages-of-Prime-K-mers","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Theoretical Advantages of Prime K-mers","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"Twin Prime Avoidance: Automatically skips redundant analysis\nProgressive Spacing: Reduces computational overlap\nHardware Optimization: k=31 fits optimally in 64-bit integers\nBiological Relevance: Primes cannot form perfect repeats","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"println(\"\\nAdvantages of Prime K-mer Selection:\")\nprintln(\"• Twin prime avoidance reduces redundant analysis\")\nprintln(\"• Progressive spacing minimizes computational overlap\")\nprintln(\"• Hardware-optimized for 64-bit architectures\")\nprintln(\"• Cannot form perfect repeats, improving specificity\")","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#3.-Strain-Resolved-Assembly-Framework","page":"Advanced Assembly Theory and Practice in Mycelia","title":"3. Strain-Resolved Assembly Framework","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"Mycelia provides comprehensive data structures and algorithms for strain-resolved assembly with detailed quality metrics.","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"# Create a strain-resolved assembly result with quality metrics\nfunction demonstrate_strain_resolved_assembly()\n    println(\"\\nStrain-Resolved Assembly Framework\")\n    println(\"=================================\")\n\n    # Initialize strain quality metrics\n    metrics = Mycelia.StrainQualityMetrics()\n\n    # Set example values (in practice, these would be calculated)\n    metrics = Mycelia.StrainQualityMetrics(\n        0.95,  # strain_recall\n        0.92,  # strain_precision\n        0.0,   # strain_f1_score (will be calculated)\n        50000, # NGA50\n        150000, # largest_alignment\n        900000, # total_aligned_length\n        2.5,   # mismatches_per_100kb\n        0.8,   # indels_per_100kb\n        3,     # misassemblies_total\n        1,     # misassemblies_local\n        0.98,  # completeness\n        0.02,  # contamination\n        0.94,  # busco_completeness\n        0.96,  # read_mapping_rate\n        0.93,  # properly_paired_rate\n        0.88,  # mean_base_confidence\n        0.05,  # uncertain_regions_fraction\n        8.5,   # peak_memory_gb\n        2.3,   # cpu_time_hours\n        0.97,  # homopolymer_accuracy\n        0.85   # repeat_resolution_rate\n    )\n\n    # Calculate F1 score\n    metrics = Mycelia.update_strain_f1_score!(metrics)\n\n    println(\"Strain Quality Metrics:\")\n    println(\"• F1 Score: $(round(metrics.strain_f1_score, digits=3))\")\n    println(\"• NGA50: $(metrics.NGA50) bp\")\n    println(\"• Completeness: $(metrics.completeness*100)%\")\n    println(\"• Contamination: $(metrics.contamination*100)%\")\n\n    return metrics\nend\n\nstrain_metrics = demonstrate_strain_resolved_assembly()","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#4.-Statistical-Graph-Cleanup-Methods","page":"Advanced Assembly Theory and Practice in Mycelia","title":"4. Statistical Graph Cleanup Methods","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"Demonstrates the statistical tip clipping algorithm that uses coverage-based statistics rather than arbitrary cutoffs.","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"# Simulate a simple graph cleanup scenario\nfunction demonstrate_statistical_cleanup_theory()\n    println(\"\\nStatistical Graph Cleanup Theory\")\n    println(\"===============================\")\n\n    # Simulate coverage values for a connected component\n    # (mixture of high-coverage true nodes and low-coverage error nodes)\n    true_node_coverage = [95, 98, 102, 89, 97, 93, 101, 96, 99, 94]\n    error_node_coverage = [1, 2, 1, 3, 1]\n\n    all_coverage = vcat(true_node_coverage, error_node_coverage)\n\n    # Calculate statistical thresholds\n    median_coverage = Statistics.median(all_coverage)\n    coverage_std = Statistics.std(all_coverage)\n\n    println(\"Coverage Statistics:\")\n    println(\"• Median: $(round(median_coverage, digits=1))\")\n    println(\"• Standard deviation: $(round(coverage_std, digits=1))\")\n\n    # Apply 3σ rule for tip removal\n    threshold_3sigma = median_coverage - 3.0 * coverage_std\n    threshold_1x = 1.0\n\n    println(\"\\nCleanup Thresholds:\")\n    println(\"• 3σ threshold: $(round(threshold_3sigma, digits=1))\")\n    println(\"• Hard 1x threshold: $threshold_1x\")\n\n    # Identify nodes for removal\n    nodes_for_removal = []\n    for (i, coverage) in enumerate(all_coverage)\n        if coverage <= threshold_1x || coverage < threshold_3sigma\n            push!(nodes_for_removal, i)\n        end\n    end\n\n    println(\"• Nodes marked for removal: $nodes_for_removal\")\n    println(\"• True nodes preserved: $(length(true_node_coverage))\")\n    println(\"• Error nodes removed: $(length(error_node_coverage))\")\n\n    return threshold_3sigma, nodes_for_removal\nend\n\ncleanup_results = demonstrate_statistical_cleanup_theory()","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#5.-Metagenomic-MAPQ-Aware-Classification","page":"Advanced Assembly Theory and Practice in Mycelia","title":"5. Metagenomic MAPQ-Aware Classification","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"Demonstrates the critical insight about MAPQ score interpretation in metagenomic contexts and the correct approach for taxonomic assignment.","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"function demonstrate_mapq_aware_classification()\n    println(\"\\nMAPQ-Aware Metagenomic Classification\")\n    println(\"====================================\")\n\n    # Simulate alignment records with different MAPQ scores\n    simulated_alignments = [\n        (read_id=\"read_001\", ref_id=\"species_A\", alignment_score=95.5, mapq=60, taxon=\"Escherichia coli\"),\n        (read_id=\"read_002\", ref_id=\"species_B\", alignment_score=88.2, mapq=0, taxon=\"Escherichia albertii\"),  # Ambiguous but informative!\n        (read_id=\"read_003\", ref_id=\"species_A\", alignment_score=92.1, mapq=30, taxon=\"Escherichia coli\"),\n        (read_id=\"read_004\", ref_id=\"species_C\", alignment_score=85.7, mapq=0, taxon=\"Shigella flexneri\"),     # Ambiguous but informative!\n        (read_id=\"read_005\", ref_id=\"species_A\", alignment_score=97.8, mapq=60, taxon=\"Escherichia coli\"),\n    ]\n\n    println(\"Traditional Approach (Filter MAPQ=0):\")\n    traditional_retained = filter(a -> a.mapq > 0, simulated_alignments)\n    println(\"• Reads retained: $(length(traditional_retained))/$(length(simulated_alignments))\")\n\n    # Calculate traditional abundances\n    traditional_taxa = [a.taxon for a in traditional_retained]\n    traditional_counts = Dict{String, Int}()\n    for taxon in traditional_taxa\n        traditional_counts[taxon] = get(traditional_counts, taxon, 0) + 1\n    end\n\n    println(\"• Traditional relative abundances:\")\n    total_traditional = length(traditional_retained)\n    for (taxon, count) in traditional_counts\n        abundance = count / total_traditional\n        println(\"  - $taxon: $(round(abundance*100, digits=1))%\")\n    end\n\n    println(\"\\nMycelia Approach (Weight by Alignment Score):\")\n    println(\"• Reads retained: $(length(simulated_alignments))/$(length(simulated_alignments))\")\n\n    # Calculate weighted abundances using alignment scores\n    weighted_abundances = Dict{String, Float64}()\n    total_weight = 0.0\n\n    for alignment in simulated_alignments\n        weight = alignment.alignment_score  # Use alignment score, NOT MAPQ\n        taxon = alignment.taxon\n\n        weighted_abundances[taxon] = get(weighted_abundances, taxon, 0.0) + weight\n        total_weight += weight\n    end\n\n    # Normalize to relative abundances\n    println(\"• Weighted relative abundances:\")\n    for (taxon, weight) in weighted_abundances\n        abundance = weight / total_weight\n        println(\"  - $taxon: $(round(abundance*100, digits=1))%\")\n    end\n\n    # Show the critical insight\n    mapq_zero_reads = filter(a -> a.mapq == 0, simulated_alignments)\n    println(\"\\nCritical Insight:\")\n    println(\"• MAPQ=0 reads retained: $(length(mapq_zero_reads))\")\n    println(\"• These reads provide valuable taxonomic information despite ambiguity\")\n    println(\"• Traditional filtering would lose $(length(mapq_zero_reads))/$(length(simulated_alignments)) of data\")\n\n    return weighted_abundances, traditional_counts\nend\n\nabundance_comparison = demonstrate_mapq_aware_classification()","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#6.-Assembly-Accuracy-Assessment-with-Graph-Metrics","page":"Advanced Assembly Theory and Practice in Mycelia","title":"6. Assembly Accuracy Assessment with Graph Metrics","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"Demonstrates novel graph-based quality metrics using Jaccard similarity between k-mer sets and edge sets.","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"function demonstrate_graph_quality_metrics()\n    println(\"\\nGraph-Based Assembly Quality Metrics\")\n    println(\"===================================\")\n\n    # Simulate k-mer sets from reference and assembly\n    reference_kmers = Set([\"ATCG\", \"TCGA\", \"CGAT\", \"GATC\", \"ATCG\"])\n    assembly_kmers = Set([\"ATCG\", \"TCGA\", \"CGTT\", \"GATC\", \"ATCG\"])  # One substitution error\n\n    # Simulate edge sets (k+1 mers representing transitions)\n    reference_edges = Set([\"ATCGA\", \"TCGAT\", \"CGATC\"])\n    assembly_edges = Set([\"ATCGA\", \"TCGTT\", \"CGATC\"])  # One edge error\n\n    # Calculate Jaccard similarities\n    kmer_intersection = length(intersect(reference_kmers, assembly_kmers))\n    kmer_union = length(union(reference_kmers, assembly_kmers))\n    kmer_jaccard = kmer_intersection / kmer_union\n    kmer_distance = 1.0 - kmer_jaccard\n\n    edge_intersection = length(intersect(reference_edges, assembly_edges))\n    edge_union = length(union(reference_edges, assembly_edges))\n    edge_jaccard = edge_intersection / edge_union\n    edge_distance = 1.0 - edge_jaccard\n\n    println(\"Assembly Quality Assessment:\")\n    println(\"• K-mer Jaccard similarity: $(round(kmer_jaccard, digits=3))\")\n    println(\"• K-mer distance: $(round(kmer_distance, digits=3))\")\n    println(\"• Edge Jaccard similarity: $(round(edge_jaccard, digits=3))\")\n    println(\"• Edge distance: $(round(edge_distance, digits=3))\")\n\n    # Interpretation\n    println(\"\\nInterpretation:\")\n    println(\"• Lower distances indicate higher assembly accuracy\")\n    println(\"• Edge distance captures connectivity errors\")\n    println(\"• K-mer distance captures sequence content errors\")\n\n    return kmer_distance, edge_distance\nend\n\nquality_metrics = demonstrate_graph_quality_metrics()","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#7.-Probabilistic-Assembly-Framework","page":"Advanced Assembly Theory and Practice in Mycelia","title":"7. Probabilistic Assembly Framework","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"Demonstrates the theoretical foundation of treating assembly as an Expectation-Maximization problem with maximum likelihood inference.","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"function demonstrate_probabilistic_assembly_theory()\n    println(\"\\nProbabilistic Assembly Framework\")\n    println(\"===============================\")\n\n    # Simulate quality scores and error probabilities\n    quality_scores = [30, 35, 25, 40, 20]  # PHRED scores\n\n    println(\"Quality Score to Error Probability Conversion:\")\n    for q in quality_scores\n        error_prob = 10^(q / -10.0)\n        accuracy = 1.0 - error_prob\n        println(\"• Q$q → Error rate: $(round(error_prob*100, digits=4))%, Accuracy: $(round(accuracy*100, digits=2))%\")\n    end\n\n    # Demonstrate likelihood calculation for sequence correction\n    println(\"\\nSequence Likelihood Calculation:\")\n    observed_sequence = \"ATCGAT\"\n    candidate_sequences = [\"ATCGAT\", \"ATCGTT\", \"ATCCAT\"]\n\n    # Assume average quality score of 30 (0.1% error rate)\n    avg_error_rate = 0.001\n\n    for candidate in candidate_sequences\n        matches = sum(observed_sequence[i] == candidate[i] for i in 1:length(observed_sequence))\n        mismatches = length(observed_sequence) - matches\n\n        # Calculate likelihood\n        likelihood = (1 - avg_error_rate)^matches * avg_error_rate^mismatches\n\n        println(\"• Candidate '$candidate': $matches matches, $mismatches mismatches\")\n        println(\"  Likelihood: $(round(likelihood, sigdigits=3))\")\n    end\n\n    println(\"\\nEM Algorithm Interpretation:\")\n    println(\"• E-step: Calculate maximum likelihood paths through assembly graph\")\n    println(\"• M-step: Update graph structure based on corrected sequences\")\n    println(\"• Iterate until convergence or k-mer increment\")\n\n    return quality_scores\nend\n\nprobabilistic_demo = demonstrate_probabilistic_assembly_theory()","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#8.-Genomic-Grammar-and-Zipf's-Law","page":"Advanced Assembly Theory and Practice in Mycelia","title":"8. Genomic Grammar and Zipf's Law","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"Demonstrates the linguistic properties of genomic sequences and their implications for assembly algorithm design.","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"function demonstrate_zipf_law_genomics()\n    println(\"\\nGenomic Grammar and Zipf's Law\")\n    println(\"=============================\")\n\n    # Simulate k-mer frequency distribution following power law\n    ranks = 1:20\n    alpha = 1.0  # Zipf exponent (≈1 for natural languages and genomes)\n\n    println(\"Zipf's Law in Genomic Sequences:\")\n    println(\"Frequency ∝ Rank^(-α), where α ≈ 1\")\n    println()\n\n    total_frequency = sum(1.0 / rank^alpha for rank in ranks)\n\n    for rank in ranks[1:10]  # Show first 10\n        frequency = (1.0 / rank^alpha) / total_frequency\n        println(\"• Rank $rank: Relative frequency = $(round(frequency*100, digits=1))%\")\n    end\n\n    println(\"\\nImplications for Assembly:\")\n    println(\"• Rare k-mers may represent genuine biological signal\")\n    println(\"• Power-law distributions inform graph cleaning strategies\")\n    println(\"• Non-coding regions particularly follow linguistic patterns\")\n    println(\"• Assembly algorithms should account for natural frequency distributions\")\n\n    return ranks, alpha\nend\n\nzipf_demo = demonstrate_zipf_law_genomics()","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#9.-Computational-Complexity-and-Optimization","page":"Advanced Assembly Theory and Practice in Mycelia","title":"9. Computational Complexity and Optimization","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"Demonstrates the computational considerations and optimization strategies used in Mycelia's assembly algorithms.","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"function demonstrate_computational_complexity()\n    println(\"\\nComputational Complexity Analysis\")\n    println(\"================================\")\n\n    # K-mer complexity analysis\n    k_values = [11, 21, 31, 41, 51]\n\n    println(\"K-mer Space Complexity:\")\n    for k in k_values\n        possible_kmers = 4^k\n        if possible_kmers > 1e12\n            println(\"• k=$k: $(round(possible_kmers/1e12, digits=1)) trillion possible k-mers\")\n        elseif possible_kmers > 1e9\n            println(\"• k=$k: $(round(possible_kmers/1e9, digits=1)) billion possible k-mers\")\n        elseif possible_kmers > 1e6\n            println(\"• k=$k: $(round(possible_kmers/1e6, digits=1)) million possible k-mers\")\n        else\n            println(\"• k=$k: $(Int(possible_kmers)) possible k-mers\")\n        end\n    end\n\n    println(\"\\nOptimization Strategies:\")\n    println(\"• Progressive k-mer approach: O(log k) practical complexity\")\n    println(\"• Canonical k-mer storage: ~50% memory reduction\")\n    println(\"• Sparse edge representation: O(E) vs O(V²) space\")\n    println(\"• Prime k-mer selection: Reduces redundant analysis\")\n\n    # Memory estimation for different genome sizes\n    genome_sizes = [1e6, 1e7, 1e8, 1e9]  # 1MB to 1GB\n\n    println(\"\\nMemory Requirements (estimated):\")\n    for genome_size in genome_sizes\n        # Rough estimation: ~10 bytes per unique k-mer\n        estimated_kmers = genome_size * 0.8  # Assuming 80% unique k-mers\n        memory_gb = (estimated_kmers * 10) / 1e9\n\n        size_label = if genome_size >= 1e9\n            \"$(Int(genome_size/1e9))Gb\"\n        elseif genome_size >= 1e6\n            \"$(Int(genome_size/1e6))Mb\"\n        else\n            \"$(Int(genome_size))bp\"\n        end\n\n        println(\"• $size_label genome: ~$(round(memory_gb, digits=1)) GB RAM\")\n    end\n\n    return k_values, genome_sizes\nend\n\ncomplexity_analysis = demonstrate_computational_complexity()","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/#Summary-and-Integration","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Summary and Integration","text":"","category":"section"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"This tutorial has demonstrated the key theoretical foundations and practical implementations that make Mycelia's assembly algorithms both mathematically rigorous and biologically relevant.","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"SUMMARY: Theoretical Foundations Integrated into Mycelia\")\nprintln(\"=\"^60)\n\nprintln(\"\\n1. Mathematical K-mer Selection:\")\nprintln(\"   • Error rate formula: k ≥ 1/error_rate - 1\")\nprintln(\"   • Log₄ optimization for sequence length\")\nprintln(\"   • Dynamic prime pattern progression\")\n\nprintln(\"\\n2. Graph Theory Applications:\")\nprintln(\"   • Explicit vs. inferred edge storage\")\nprintln(\"   • Statistical tip clipping (3σ rule)\")\nprintln(\"   • Jaccard similarity quality metrics\")\n\nprintln(\"\\n3. Probabilistic Framework:\")\nprintln(\"   • EM algorithm for assembly optimization\")\nprintln(\"   • Viterbi algorithm for error correction\")\nprintln(\"   • Quality score integration\")\n\nprintln(\"\\n4. Metagenomic Innovations:\")\nprintln(\"   • MAPQ-aware taxonomic assignment\")\nprintln(\"   • Alignment score weighting\")\nprintln(\"   • Strain-level clustering (99.5% ANI)\")\n\nprintln(\"\\n5. Biological Insights:\")\nprintln(\"   • Zipf's law in genomic sequences\")\nprintln(\"   • Prime k-mer advantages\")\nprintln(\"   • Strain-resolved quality metrics\")\n\nprintln(\"\\n6. Computational Optimization:\")\nprintln(\"   • Progressive k-mer complexity reduction\")\nprintln(\"   • Memory-efficient data structures\")\nprintln(\"   • Hardware-optimized algorithms\")\n\nprintln(\"\\nThese theoretical foundations provide Mycelia with:\")\nprintln(\"✓ Mathematically rigorous algorithms\")\nprintln(\"✓ Biologically relevant approaches\")\nprintln(\"✓ Scalable computational methods\")\nprintln(\"✓ Comprehensive quality assessment\")\nprintln(\"✓ State-of-the-art metagenomic capabilities\")","category":"page"},{"location":"generated/tutorials/advanced-assembly-theory-and-practice/","page":"Advanced Assembly Theory and Practice in Mycelia","title":"Advanced Assembly Theory and Practice in Mycelia","text":"This tutorial demonstrates how theoretical research has been systematically integrated into practical, production-ready algorithms in Mycelia, providing users with cutting-edge tools backed by solid mathematical foundations.","category":"page"},{"location":"architecture/#Architecture-Overview","page":"Architecture Overview","title":"Architecture Overview","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"This document provides a comprehensive overview of Mycelia's architecture, design decisions, and system organization.","category":"page"},{"location":"architecture/#Table-of-Contents","page":"Architecture Overview","title":"Table of Contents","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"System Overview\nCore Components\nModule Organization\nData Flow\nType System\nDesign Patterns\nKey Algorithms\nPerformance Considerations","category":"page"},{"location":"architecture/#System-Overview","page":"Architecture Overview","title":"System Overview","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Mycelia is designed as a modular bioinformatics toolkit with a focus on probabilistic genome assembly. The architecture emphasizes:","category":"page"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Modularity: Independent components for different bioinformatics tasks\nExtensibility: Easy to add new algorithms and methods\nPerformance: Efficient memory usage and parallel processing\nInteroperability: Integration with existing bioinformatics tools","category":"page"},{"location":"architecture/#High-Level-Architecture","page":"Architecture Overview","title":"High-Level Architecture","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"┌─────────────────────────────────────────────────────────┐\n│                    User Interface                        │\n│  (Julia API, Command Line, Jupyter Notebooks)          │\n└─────────────────────────────────────────────────────────┘\n                             │\n┌─────────────────────────────────────────────────────────┐\n│                    Core Modules                          │\n├─────────────────────┬───────────────┬──────────────────┤\n│   Sequence I/O      │   Assembly    │   Analysis       │\n│   - FASTX          │   - Qualmer   │   - K-mer        │\n│   - Converters     │   - String    │   - Alignment    │\n│                    │   - Intelligent│   - QC           │\n└─────────────────────┴───────────────┴──────────────────┘\n                             │\n┌─────────────────────────────────────────────────────────┐\n│                 Foundation Layer                         │\n├──────────────┬──────────────────┬──────────────────────┤\n│  BioSequences│    Graphs        │     Utilities        │\n│  - DNA/RNA   │  - MetaGraphsNext│  - Memory Mgmt      │\n│  - Proteins  │  - Algorithms    │  - Parallel         │\n└──────────────┴──────────────────┴──────────────────────┘","category":"page"},{"location":"architecture/#Core-Components","page":"Architecture Overview","title":"Core Components","text":"","category":"section"},{"location":"architecture/#1.-Sequence-Management-(fastx.jl)","page":"Architecture Overview","title":"1. Sequence Management (fastx.jl)","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Handles all sequence I/O operations:","category":"page"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"FASTA/FASTQ parsing via FASTX.jl\nFormat conversion between sequence types\nQuality score handling for FASTQ data\nStreaming support for large files","category":"page"},{"location":"architecture/#2.-Assembly-Engines","page":"Architecture Overview","title":"2. Assembly Engines","text":"","category":"section"},{"location":"architecture/#Qualmer-Assembly-(qualmer-analysis.jl)","page":"Architecture Overview","title":"Qualmer Assembly (qualmer-analysis.jl)","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Quality-aware k-mers: Combines sequence and quality information\nProbabilistic scoring: Joint probability calculations\nGraph construction: Quality-weighted De Bruijn graphs","category":"page"},{"location":"architecture/#String-Graphs-(string-graphs.jl)","page":"Architecture Overview","title":"String Graphs (string-graphs.jl)","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"N-gram analysis: Flexible substring decomposition\nGraph simplification: Path collapse algorithms\nComponent assembly: Connected component traversal","category":"page"},{"location":"architecture/#Intelligent-Assembly-(intelligent-assembly.jl)","page":"Architecture Overview","title":"Intelligent Assembly (intelligent-assembly.jl)","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Dynamic k-mer selection: Prime number progression\nError correction: Probabilistic path finding\nMemory management: Adaptive processing\nReward-based optimization: Accuracy-prioritized decisions","category":"page"},{"location":"architecture/#3.-Analysis-Tools","page":"Architecture Overview","title":"3. Analysis Tools","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"K-mer Analysis (kmer-analysis.jl): Counting, spectrum analysis\nAlignment (alignments-and-mapping.jl): Sequence comparison\nQuality Control (quality-control-and-benchmarking.jl): Metrics and validation\nClustering (clustering.jl): Sequence grouping algorithms","category":"page"},{"location":"architecture/#4.-Utility-Functions-(utility-functions.jl)","page":"Architecture Overview","title":"4. Utility Functions (utility-functions.jl)","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Memory estimation: Predict resource requirements\nFile handling: Robust I/O operations\nProgress tracking: User feedback\nError handling: Graceful failure modes","category":"page"},{"location":"architecture/#Module-Organization","page":"Architecture Overview","title":"Module Organization","text":"","category":"section"},{"location":"architecture/#Source-File-Structure","page":"Architecture Overview","title":"Source File Structure","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"src/\n├── Mycelia.jl                          # Main module, imports all dependencies\n├── fastx.jl                           # Sequence I/O\n├── assembly.jl                        # Assembly coordination\n├── intelligent-assembly.jl            # Smart assembly algorithm\n├── qualmer-analysis.jl               # Quality-aware k-mers\n├── string-graphs.jl                  # String graph methods\n├── kmer-analysis.jl                  # K-mer operations\n├── alignments-and-mapping.jl         # Alignment algorithms\n├── annotation.jl                     # Gene annotation\n├── clustering.jl                     # Clustering methods\n├── classification.jl                 # Sequence classification\n├── quality-control-and-benchmarking.jl # QC and validation\n├── plotting-and-visualization.jl      # Data visualization\n├── reference-databases.jl            # Database integration\n├── taxonomy-and-trees.jl             # Phylogenetic analysis\n├── variant-analysis.jl               # Variant calling\n└── utility-functions.jl              # Helper functions","category":"page"},{"location":"architecture/#Dependency-Management","page":"Architecture Overview","title":"Dependency Management","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"All package dependencies are imported at the top level in Mycelia.jl:","category":"page"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"import BioSequences\nimport FASTX\nimport Graphs\nimport MetaGraphsNext\nimport DataFrames\n# ... etc","category":"page"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Individual source files do not import packages - they access them through the module namespace.","category":"page"},{"location":"architecture/#Data-Flow","page":"Architecture Overview","title":"Data Flow","text":"","category":"section"},{"location":"architecture/#Assembly-Pipeline-Flow","page":"Architecture Overview","title":"Assembly Pipeline Flow","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Input FASTQ\n    │\n    ▼\nRead Loading & Validation\n    │\n    ▼\nQuality Score Extraction\n    │\n    ├──► Qualmer Generation\n    │         │\n    │         ▼\n    │    Quality-Aware Graph\n    │         │\n    │         ▼\n    │    Probabilistic Paths\n    │\n    ├──► K-mer Analysis\n    │         │\n    │         ▼\n    │    Coverage Estimation\n    │\n    ▼\nIntelligent Assembly\n    │\n    ├──► Dynamic K Selection\n    ├──► Error Correction\n    ├──► Memory Monitoring\n    └──► Reward Optimization\n         │\n         ▼\n    Final Assembly","category":"page"},{"location":"architecture/#Type-System","page":"Architecture Overview","title":"Type System","text":"","category":"section"},{"location":"architecture/#Core-Types","page":"Architecture Overview","title":"Core Types","text":"","category":"section"},{"location":"architecture/#Qualmer-Type","page":"Architecture Overview","title":"Qualmer Type","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"struct Qualmer{KmerT, K}\n    kmer::KmerT\n    qualities::NTuple{K,UInt8}\nend","category":"page"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Combines sequence (k-mer) with quality scores for probabilistic analysis.","category":"page"},{"location":"architecture/#Graph-Types","page":"Architecture Overview","title":"Graph Types","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"MetaGraphs: Vertex and edge metadata storage\nQualmerVertexData: Coverage, probability, observations\nQualmerEdgeData: Transition counts, quality weights","category":"page"},{"location":"architecture/#Sequence-Types","page":"Architecture Overview","title":"Sequence Types","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Always use BioSequences types:","category":"page"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"BioSequences.LongDNA{4}\nBioSequences.LongRNA{4}\nBioSequences.LongAA","category":"page"},{"location":"architecture/#Type-Hierarchy","page":"Architecture Overview","title":"Type Hierarchy","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"AbstractSequence\n    ├── BioSequence\n    │   ├── LongDNA\n    │   ├── LongRNA\n    │   └── LongAA\n    │\n    └── Kmer\n        ├── DNAKmer\n        ├── RNAKmer\n        └── AAKmer","category":"page"},{"location":"architecture/#Design-Patterns","page":"Architecture Overview","title":"Design Patterns","text":"","category":"section"},{"location":"architecture/#1.-Functional-Core,-Imperative-Shell","page":"Architecture Overview","title":"1. Functional Core, Imperative Shell","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Pure functions for algorithms\nMutable state isolated to graph operations\nImmutable data for k-mers and sequences","category":"page"},{"location":"architecture/#2.-Iterator-Pattern","page":"Architecture Overview","title":"2. Iterator Pattern","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Lazy evaluation for k-mer generation\nMemory efficient sequence processing\nComposable operations","category":"page"},{"location":"architecture/#3.-Strategy-Pattern","page":"Architecture Overview","title":"3. Strategy Pattern","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Multiple assembly methods (qualmer, string, intelligent)\nPluggable algorithms for each step\nRuntime selection based on data characteristics","category":"page"},{"location":"architecture/#4.-Builder-Pattern","page":"Architecture Overview","title":"4. Builder Pattern","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Graph construction with incremental updates\nAssembly results with metadata accumulation","category":"page"},{"location":"architecture/#Key-Algorithms","page":"Architecture Overview","title":"Key Algorithms","text":"","category":"section"},{"location":"architecture/#1.-Prime-K-mer-Progression","page":"Architecture Overview","title":"1. Prime K-mer Progression","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"function dynamic_k_prime_pattern(start_prime, max_k, initial_step)\n    # Progressive stepping with prime discovery\n    # Exploits mathematical properties of prime distribution\nend","category":"page"},{"location":"architecture/#2.-Quality-Weighted-Path-Finding","page":"Architecture Overview","title":"2. Quality-Weighted Path Finding","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"function find_quality_weighted_path(graph, start_vertex)\n    # Greedy selection based on joint probability\n    # Prioritizes high-confidence k-mers\nend","category":"page"},{"location":"architecture/#3.-Error-Correction","page":"Architecture Overview","title":"3. Error Correction","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"function attempt_error_correction(graph, kmer, vertex_data)\n    # Identifies low-coverage, low-quality k-mers\n    # Suggests corrections based on graph context\nend","category":"page"},{"location":"architecture/#4.-Reward-Based-Optimization","page":"Architecture Overview","title":"4. Reward-Based Optimization","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"function calculate_assembly_reward(graph, corrections, k)\n    # Multi-metric scoring: coverage, quality, connectivity\n    # Guides iterative assembly decisions\nend","category":"page"},{"location":"architecture/#Performance-Considerations","page":"Architecture Overview","title":"Performance Considerations","text":"","category":"section"},{"location":"architecture/#Memory-Management","page":"Architecture Overview","title":"Memory Management","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Lazy loading: Process sequences as streams\nGraph sparsity: Only store observed k-mers\nMemory limits: Configurable constraints\nGarbage collection: Explicit cleanup in loops","category":"page"},{"location":"architecture/#Parallelization","page":"Architecture Overview","title":"Parallelization","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Thread safety: Immutable k-mer operations\nParallel k-mer counting: Partition by sequence\nConcurrent graph updates: Lock-free where possible\nBLAS operations: Leverage optimized libraries","category":"page"},{"location":"architecture/#Optimization-Strategies","page":"Architecture Overview","title":"Optimization Strategies","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"K-mer size selection: Start with optimal k based on error rate\nEarly termination: Stop when improvements plateau\nSparse data structures: Efficient for genomic data\nType stability: Concrete types for performance","category":"page"},{"location":"architecture/#Scalability","page":"Architecture Overview","title":"Scalability","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Streaming algorithms: Handle files larger than RAM\nHierarchical assembly: Process in chunks\nDistributed computing: Future HPC support\nIncremental updates: Resume interrupted assemblies","category":"page"},{"location":"architecture/#Extension-Points","page":"Architecture Overview","title":"Extension Points","text":"","category":"section"},{"location":"architecture/#Adding-New-Assembly-Methods","page":"Architecture Overview","title":"Adding New Assembly Methods","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Create new file in src/\nImplement assembly function with standard interface\nRegister in main assembly dispatcher\nAdd tests and documentation","category":"page"},{"location":"architecture/#Integrating-External-Tools","page":"Architecture Overview","title":"Integrating External Tools","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Use run_external_command wrapper\nHandle tool installation via bioconda\nParse output formats appropriately\nAdd to tool registry","category":"page"},{"location":"architecture/#Custom-Quality-Metrics","page":"Architecture Overview","title":"Custom Quality Metrics","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Extend QualmerVertexData with new fields\nImplement scoring function\nIntegrate into reward calculation\nUpdate graph construction","category":"page"},{"location":"architecture/#Future-Architecture-Plans","page":"Architecture Overview","title":"Future Architecture Plans","text":"","category":"section"},{"location":"architecture/#Planned-Enhancements","page":"Architecture Overview","title":"Planned Enhancements","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"GPU acceleration for k-mer operations\nDistributed assembly across clusters\nCloud storage integration\nReal-time visualization of assembly progress\nPlugin system for custom algorithms","category":"page"},{"location":"architecture/#API-Stability","page":"Architecture Overview","title":"API Stability","text":"","category":"section"},{"location":"architecture/","page":"Architecture Overview","title":"Architecture Overview","text":"Core API: Stable for v1.0\nInternal functions: Subject to change\nDeprecation policy: One version warning\nSemantic versioning: Breaking changes in major versions","category":"page"},{"location":"theoretical-foundations/#Theoretical-Foundations-of-Mycelia-Assembly-Algorithms","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Mycelia's assembly algorithms are built on rigorous mathematical foundations derived from extensive research documented in the Mycelia-Dev notebooks. This document provides the theoretical background, design rationales, and mathematical principles that guide the implementation choices in Mycelia.","category":"page"},{"location":"theoretical-foundations/#Mathematical-Framework-for-Assembly","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Mathematical Framework for Assembly","text":"","category":"section"},{"location":"theoretical-foundations/#Core-Assembly-Paradigm:-Probabilistic-Expectation-Maximization","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Core Assembly Paradigm: Probabilistic Expectation-Maximization","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Mycelia treats genome assembly as a probabilistic inference problem, unifying the strengths of both De Bruijn graph and overlap-layout-consensus approaches through a generalized framework:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Algorithm Overview:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Create De Bruijn assembly graph from sequencing reads\nConvert graph structure into probabilistic Hidden Markov Model (HMM)\nApply Viterbi algorithm for maximum likelihood error correction\nIterate until convergence at current k-mer size\nIncrement k-mer size and repeat until final convergence","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Theoretical Foundation: The approach treats assembly as an Expectation-Maximization (EM) problem:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"E-step: Calculate maximum likelihood paths through the assembly graph\nM-step: Update graph structure based on error-corrected reads","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"This probabilistic framework provides mathematical rigor that replaces heuristic graph cleaning decisions with principled, optimal solutions.","category":"page"},{"location":"theoretical-foundations/#K-mer-Size-Selection-Theory","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"K-mer Size Selection Theory","text":"","category":"section"},{"location":"theoretical-foundations/#Error-Rate-Mathematical-Foundation","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Error Rate Mathematical Foundation","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"The optimal k-mer size selection follows mathematically derived principles:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Lower Bound Formula:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"lower_bound_k = max(3, floor(1/error_rate - 1))","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Rationale: This ensures that error-prone k-mers remain distinguishable from true genomic k-mers based on frequency distributions.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Examples:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"1% error rate → k ≥ 99\n5% error rate → k ≥ 19  \n10% error rate → k ≥ 9","category":"page"},{"location":"theoretical-foundations/#Sequence-Length-Optimization","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Sequence Length Optimization","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Log₄ Pattern Discovery: Empirical analysis revealed that optimal starting k-mer sizes follow a log₄(sequence_length) pattern:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"100bp sequences → k = 3\n1,000bp sequences → k = 5\n10,000bp sequences → k = 7\n100,000bp sequences → k = 8","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Biological Rationale: This pattern corresponds to the divergence point where erroneous k-mers begin to dominate true k-mers in the frequency spectrum.","category":"page"},{"location":"theoretical-foundations/#Coverage-vs.-Error-Rate-Trade-offs","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Coverage vs. Error Rate Trade-offs","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Key Finding: A 10x increase in sequencing coverage contributes more noise to the k-mer spectrum than a 10x increase in error rate.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Implication: Conservative error rate assumptions with moderate coverage are preferable to high coverage with relaxed quality filtering.","category":"page"},{"location":"theoretical-foundations/#Dynamic-Prime-Pattern-Algorithm","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Dynamic Prime Pattern Algorithm","text":"","category":"section"},{"location":"theoretical-foundations/#Mathematical-Elegance-of-Prime-Selection","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Mathematical Elegance of Prime Selection","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Mycelia employs a dynamic k-mer selection algorithm that exploits the mathematical properties of prime number distribution:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Algorithm:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"function dynamic_k_prime_pattern(start_prime=11, max_k=101, initial_step=2)\n    k_sequence = [start_prime]\n    current_k = start_prime\n    step = initial_step\n    \n    while true\n        next_k = current_k + step\n        if next_k > max_k || !isprime(next_k)\n            break\n        end\n        push!(k_sequence, next_k)\n        current_k = next_k\n        step += 2  # Progressive spacing\n    end\n    \n    return k_sequence\nend","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Advantages:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Twin Prime Avoidance: Automatically skips one member of twin prime pairs, reducing redundant analysis\nProgressive Spacing: Increasing gaps minimize computational overlap while maintaining coverage\nHardware Optimization: k=31 fits optimally in 64-bit integers (2 bits per base × 32 bases)","category":"page"},{"location":"theoretical-foundations/#Biological-Rationale-for-Prime-K-mers","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Biological Rationale for Prime K-mers","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Theoretical Foundation: Prime k-mer lengths cannot form perfect repeats, reducing spurious matches and improving assembly specificity. Additionally, odd k-mers cannot be reverse complements of themselves, avoiding palindromic complications.","category":"page"},{"location":"theoretical-foundations/#Graph-Theory-Foundations","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Graph Theory Foundations","text":"","category":"section"},{"location":"theoretical-foundations/#Explicit-vs.-Inferred-Edge-Storage","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Explicit vs. Inferred Edge Storage","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Core Principle: Mycelia stores only edges that were actually observed in the data, not all theoretically possible k-mer neighbors.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Mathematical Justification:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"As k increases, the probability of unobserved neighboring k-mers existing decreases asymptotically toward zero\nFor small k and large datasets, false positive edge rates can be extremely high\nExplicit storage provides O(n) space complexity vs. O(4^k) for complete neighbor graphs","category":"page"},{"location":"theoretical-foundations/#Statistical-Tip-Clipping-Algorithm","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Statistical Tip Clipping Algorithm","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Methodology: Remove graph tips using statistical thresholds relative to connected component coverage distributions.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Algorithm:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"function statistical_tip_clipping(graph; std_dev_multiplier=3.0)\n    for component in connected_components(graph)\n        coverage_values = get_coverage_values(graph, component)\n        median_coverage = median(coverage_values)\n        coverage_std = std(coverage_values)\n        threshold = median_coverage - std_dev_multiplier * coverage_std\n        \n        for tip in identify_tips(component)\n            if get_coverage(tip) < threshold || get_coverage(tip) == 1\n                remove_node!(graph, tip)\n            end\n        end\n    end\nend","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Statistical Foundation: Uses 3σ rule to identify coverage outliers, preserving high-confidence tips while removing error artifacts.","category":"page"},{"location":"theoretical-foundations/#Metagenomic-Classification-Theory","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Metagenomic Classification Theory","text":"","category":"section"},{"location":"theoretical-foundations/#MAPQ-Score-Reinterpretation","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"MAPQ Score Reinterpretation","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Critical Insight: In metagenomic contexts, MAPQ=0 indicates taxonomic ambiguity rather than poor alignment quality.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Theoretical Correction:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Traditional approach: Filter out MAPQ=0 alignments\nMycelia approach: Retain MAPQ=0 alignments, weight by alignment scores","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Mathematical Framework:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"function weighted_taxonomic_assignment(alignments)\n    weighted_assignments = []\n    for alignment in alignments\n        weight = alignment.score  # NOT alignment.mapq\n        taxon = get_taxonomy(alignment.reference)\n        push!(weighted_assignments, (taxon, weight))\n    end\n    return normalize_weights(weighted_assignments)\nend","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Impact: Prevents loss of biologically meaningful information from closely related taxa that receive MAPQ=0 due to mapping ambiguity.","category":"page"},{"location":"theoretical-foundations/#Strain-Level-Clustering-with-FastANI","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Strain-Level Clustering with FastANI","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Threshold Selection: 99.5% Average Nucleotide Identity (ANI) threshold for strain-level clustering.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Biological Rationale: This threshold corresponds to the conventional species boundary, enabling strain-resolution within species while maintaining taxonomic coherence.","category":"page"},{"location":"theoretical-foundations/#Assembly-Quality-Assessment","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Assembly Quality Assessment","text":"","category":"section"},{"location":"theoretical-foundations/#Graph-Distance-Metrics","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Graph Distance Metrics","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Novel Approach: Use Jaccard similarity between k-mer sets and edge sets to quantify assembly accuracy.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Metrics:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"kmer_distance = 1 - jaccard(assembly_kmers, reference_kmers)\nedge_distance = 1 - jaccard(assembly_edges, reference_edges)","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Theoretical Advantage: Provides quantitative, parameter-free assessment of assembly quality relative to ground truth.","category":"page"},{"location":"theoretical-foundations/#Viterbi-Based-Error-Correction","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Viterbi-Based Error Correction","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Hidden Markov Model Framework:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"States: K-mer positions with associated quality scores\nTransitions: Observed k-mer adjacencies in assembly graph\nEmissions: Quality score-weighted k-mer observations","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Likelihood Calculation:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"error_probability = 10^(quality_score / -10)\nstate_likelihood = (1 - error_probability)^matches × error_probability^mismatches","category":"page"},{"location":"theoretical-foundations/#Genomic-Grammar-and-Zipf's-Law","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Genomic Grammar and Zipf's Law","text":"","category":"section"},{"location":"theoretical-foundations/#Linguistic-Properties-of-Genomic-Sequences","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Linguistic Properties of Genomic Sequences","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Theoretical Discovery: Genomic sequences follow Zipf's law (power-law distribution) similar to natural languages.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Implications:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Frequency Distributions: K-mer frequencies exhibit log-log linear patterns\nBiological Grammar: Non-coding regions particularly follow linguistic-like structures\nAssembly Strategy: Rare k-mers may represent genuine biological signal rather than noise","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Mathematical Model:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"frequency(k-mer) ∝ rank^(-α)","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"where α ≈ 1 for natural languages and genomic sequences.","category":"page"},{"location":"theoretical-foundations/#Strain-Resolved-Assembly-Framework","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Strain-Resolved Assembly Framework","text":"","category":"section"},{"location":"theoretical-foundations/#Comprehensive-Quality-Metrics","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Comprehensive Quality Metrics","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Strain-Specific Metrics:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"strain_recall = true_strains_recovered / total_true_strains\nstrain_precision = correct_strain_calls / total_strain_calls\nstrain_f1_score = 2 × (precision × recall) / (precision + recall)","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Assembly Contiguity:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"NGA50: N50 based on aligned contigs to reference\nlargest_alignment: Longest single alignment length\ntotal_aligned_length: Total successfully aligned sequence","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Technology-Specific Assessments:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"homopolymer_accuracy: Accuracy in homopolymer-rich regions\nrepeat_resolution_rate: Fraction of repetitive elements properly resolved","category":"page"},{"location":"theoretical-foundations/#Confidence-Aware-Assembly","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Confidence-Aware Assembly","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Per-Base Confidence Scoring: Each assembled base receives a confidence score based on:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Supporting read depth\nBase quality scores of supporting reads\nGraph topology confidence (branching vs. linear regions)\nStrain assignment probability","category":"page"},{"location":"theoretical-foundations/#Computational-Complexity-Considerations","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Computational Complexity Considerations","text":"","category":"section"},{"location":"theoretical-foundations/#Progressive-K-mer-Strategy","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Progressive K-mer Strategy","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Complexity Reduction: Starting with small k-values and progressively increasing reduces computational complexity from O(4^k) to O(log k) in practice.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Convergence Criteria:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"No corrections made in current iteration\nGraph structure stabilizes between iterations\nQuality metrics plateau across k-increments","category":"page"},{"location":"theoretical-foundations/#Memory-Efficient-Graph-Representation","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Memory-Efficient Graph Representation","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Canonical K-mer Storage: Store only canonical form of each k-mer, reducing memory by ~50%.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Sparse Edge Representation: Use adjacency lists rather than dense matrices, achieving O(E) vs. O(V²) space complexity.","category":"page"},{"location":"theoretical-foundations/#Integration-with-Modern-Sequencing-Technologies","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Integration with Modern Sequencing Technologies","text":"","category":"section"},{"location":"theoretical-foundations/#Long-Read-Assembly-Considerations","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Long-Read Assembly Considerations","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Overlap-Based Framework: For error-prone long reads, minimum overlap length follows:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"minimum_overlap = log₄(genome_size)","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Hybrid Strategy: Combine exact k-mer matching (short reads) with approximate overlaps (long reads) using probabilistic framework.","category":"page"},{"location":"theoretical-foundations/#Real-Time-Assembly","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Real-Time Assembly","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Streaming Algorithm Design: Progressive assembly enables real-time processing of sequencing data as it becomes available.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Hardware Acceleration: GPU/FPGA implementations can accelerate Viterbi algorithm computations for production-scale applications.","category":"page"},{"location":"theoretical-foundations/#Validation-and-Benchmarking","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Validation and Benchmarking","text":"","category":"section"},{"location":"theoretical-foundations/#Cross-Validation-Framework","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Cross-Validation Framework","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Statistical Validation: Bootstrap resampling with confidence interval calculation for robust parameter optimization.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Multi-Scale Validation: Simultaneous analysis using prime k-mer sizes (3,5,7,11,13,17,19) for comprehensive assessment.","category":"page"},{"location":"theoretical-foundations/#Benchmarking-Methodology","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Benchmarking Methodology","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Ground Truth Comparison: Use simulated data with known ground truth for algorithm validation.","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Comparative Analysis: Quantitative comparison against established assemblers using standardized metrics.","category":"page"},{"location":"theoretical-foundations/#Research-Foundations","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Research Foundations","text":"","category":"section"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"This theoretical framework is derived from extensive research documented in the Mycelia-Dev repository, representing several years of algorithm development and validation. The mathematical foundations provide:","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"Reproducible Results: Deterministic algorithms with well-defined parameters\nScalable Solutions: Theoretical framework adapts to different sequencing technologies\nOptimal Performance: Maximum likelihood approaches replace heuristic approximations\nBiological Relevance: Algorithms account for genuine biological sequence properties","category":"page"},{"location":"theoretical-foundations/","page":"Theoretical Foundations of Mycelia Assembly Algorithms","title":"Theoretical Foundations of Mycelia Assembly Algorithms","text":"The integration of probability theory, graph algorithms, information theory, and computational biology provides a comprehensive foundation for next-generation genome assembly tools that achieve both accuracy and biological relevance.","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/#Round-Trip-Tutorial-2:-String-Data-N-gram-Graphs-String-Graphs-Reconstruction","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"This tutorial demonstrates the hierarchical graph conversion workflow in Mycelia, showing how fixed-length N-gram graphs can be simplified into variable-length String graphs. This represents the fundamental pattern of graph hierarchy used throughout the Mycelia system.","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/#Learning-Objectives","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"By the end of this tutorial, you will:","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"Understand the hierarchical relationship between N-gram and String graphs\nLearn to convert fixed-length graphs to variable-length representations\nPerform graph simplification and path collapse operations\nCompare reconstruction quality across graph representations\nAnalyze the trade-offs between graph complexity and assembly accuracy","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"import Mycelia\nimport Statistics\nimport Random","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/#Understanding-Graph-Hierarchy","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Understanding Graph Hierarchy","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"The Mycelia system implements a hierarchical graph structure where fixed-length graphs serve as the foundation for variable-length simplified graphs.","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"println(\"=\"^80)\nprintln(\"ROUND-TRIP TUTORIAL 2: N-GRAM TO STRING GRAPH HIERARCHY\")\nprintln(\"=\"^80)\n\nprintln(\"\\n📚 GRAPH HIERARCHY OVERVIEW:\")\nprintln(\"  Fixed-Length Graphs (Foundation):\")\nprintln(\"    • N-gram graphs: Fixed-size text fragments\")\nprintln(\"    • K-mer graphs: Fixed-size biological sequences\")\nprintln(\"    • Qualmer graphs: Quality-aware fixed-size sequences\")\nprintln()\nprintln(\"  Variable-Length Graphs (Simplified Products):\")\nprintln(\"    • String graphs: Variable-length text sequences\")\nprintln(\"    • BioSequence graphs: Variable-length biological sequences\")\nprintln(\"    • Quality BioSequence graphs: Quality-aware variable sequences\")\nprintln()\nprintln(\"  This tutorial: N-gram → String graph conversion\")","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/#Data-Preparation-with-Hierarchical-Complexity","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Data Preparation with Hierarchical Complexity","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"Create test data that will demonstrate different aspects of graph simplification.","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"test_datasets = [\n    (\n        name = \"Simple Repetitive\",\n        text = \"ABCABCABCABC\",\n        description = \"High repetition, should simplify well\"\n    ),\n    (\n        name = \"Linear Sequence\",\n        text = \"ABCDEFGHIJKLMNOP\",\n        description = \"Linear path, should collapse to single string\"\n    ),\n    (\n        name = \"Branching Pattern\",\n        text = \"ABCXYZABCDEFABCPQR\",\n        description = \"Branching structure, complex simplification\"\n    ),\n    (\n        name = \"Real Text\",\n        text = \"The quick brown fox jumps over the lazy dog\",\n        description = \"Natural language with spaces and complexity\"\n    ),\n    (\n        name = \"DNA-like Sequence\",\n        text = \"ATCGATCGATCGATCGTAGCTAGCTAGCT\",\n        description = \"Biological sequence simulation\"\n    )\n]\n\nprintln(\"\\n1. HIERARCHICAL DATA PREPARATION\")\nprintln(\"-\"^50)\n\nfor (i, dataset) in enumerate(test_datasets)\n    println(\"Dataset $i: $(dataset.name)\")\n    println(\"  Text: \\\"$(dataset.text)\\\"\")\n    println(\"  Description: $(dataset.description)\")\n    println(\"  Length: $(length(dataset.text)) characters\")\n    println()\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/#Phase-1:-N-gram-Graph-Construction","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Phase 1: N-gram Graph Construction","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"Build the foundation fixed-length N-gram graphs.","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"println(\"\\n2. PHASE 1: N-GRAM GRAPH CONSTRUCTION\")\nprintln(\"-\"^50)\n\nngram_results = Dict()\n\nfor n in [3, 4, 5]\n    println(\"\\\\nConstructing $(n)-gram graphs:\")\n\n    for (i, dataset) in enumerate(test_datasets)\n        if length(dataset.text) >= n\n            try\n                # Build N-gram graph\n                graph = Mycelia.string_to_ngram_graph(s=dataset.text, n=n)\n\n                # Extract statistics\n                vertices = collect(values(graph.vertex_labels))\n                num_vertices = length(vertices)\n                expected_ngrams = length(dataset.text) - n + 1\n\n                # Calculate graph properties\n                compression_ratio = num_vertices / expected_ngrams\n\n                # Store results\n                key = \"$(dataset.name)_$(n)\"\n                ngram_results[key] = (\n                    dataset = dataset,\n                    graph = graph,\n                    n = n,\n                    vertices = vertices,\n                    num_vertices = num_vertices,\n                    expected_ngrams = expected_ngrams,\n                    compression_ratio = compression_ratio\n                )\n\n                println(\"  $(dataset.name): $(num_vertices)/$(expected_ngrams) vertices ($(round(compression_ratio, digits=3)) compression)\")\n\n                # Show example n-grams\n                if num_vertices > 0\n                    example_count = min(3, num_vertices)\n                    println(\"    Examples: $(vertices[1:example_count])\")\n                end\n\n            catch e\n                println(\"  $(dataset.name): Construction failed - $(typeof(e))\")\n            end\n        else\n            println(\"  $(dataset.name): Text too short for $(n)-grams\")\n        end\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/#Phase-2:-Graph-Analysis-and-Path-Detection","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Phase 2: Graph Analysis and Path Detection","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"Analyze the N-gram graphs to understand their structure before simplification.","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"println(\"\\n3. PHASE 2: GRAPH ANALYSIS AND PATH DETECTION\")\nprintln(\"-\"^50)\n\nfunction analyze_ngram_graph_structure(graph, description)\n    \"\"\"Analyze structural properties of an N-gram graph.\"\"\"\n\n    vertices = collect(values(graph.vertex_labels))\n    num_vertices = length(vertices)\n\n    if num_vertices == 0\n        return (vertices=0, linear_paths=0, branch_points=0, complexity=\"empty\")\n    end\n\n    # Basic connectivity analysis\n    # Note: This is a simplified analysis - full graph traversal would require edge information\n\n    # Analyze overlap patterns\n    overlap_count = 0\n    potential_linear = 0\n\n    for i in 1:length(vertices)\n        for j in (i+1):length(vertices)\n            v1, v2 = vertices[i], vertices[j]\n            if length(v1) > 1 && length(v2) > 1\n                # Check for potential overlap (simplified heuristic)\n                if v1[2:end] == v2[1:end-1] || v2[2:end] == v1[1:end-1]\n                    overlap_count += 1\n                end\n            end\n        end\n    end\n\n    # Estimate complexity\n    complexity = if overlap_count == 0\n        \"isolated\"\n    elseif overlap_count <= num_vertices\n        \"linear\"\n    else\n        \"complex\"\n    end\n\n    println(\"  $description:\")\n    println(\"    Vertices: $num_vertices\")\n    println(\"    Potential overlaps: $overlap_count\")\n    println(\"    Estimated complexity: $complexity\")\n\n    return (\n        vertices = num_vertices,\n        overlaps = overlap_count,\n        complexity = complexity\n    )\nend\n\n# Analyze representative graphs\nprintln(\"Analyzing N-gram graph structures:\")\nfor n in [3, 4]\n    for dataset in test_datasets[1:3]  ## Analyze first 3 datasets\n        key = \"$(dataset.name)_$(n)\"\n        if haskey(ngram_results, key)\n            result = ngram_results[key]\n            analyze_ngram_graph_structure(result.graph, \"$(dataset.name) $(n)-gram\")\n        end\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/#Phase-3:-String-Graph-Conversion-(Theoretical)","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Phase 3: String Graph Conversion (Theoretical)","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"Demonstrate the concept of converting N-gram graphs to String graphs. Note: Full implementation may require additional graph traversal algorithms.","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"println(\"\\n4. PHASE 3: STRING GRAPH CONVERSION (CONCEPTUAL)\")\nprintln(\"-\"^50)\n\nfunction simulate_string_graph_conversion(ngram_result)\n    \"\"\"Simulate the conversion from N-gram graph to String graph.\"\"\"\n\n    vertices = ngram_result.vertices\n    n = ngram_result.n\n    original_text = ngram_result.dataset.text\n\n    # Simplified simulation of path collapse\n    # In a full implementation, this would involve:\n    # 1. Finding linear paths through the graph\n    # 2. Collapsing unbranching paths into single vertices\n    # 3. Preserving branching structure\n\n    # For simulation, we'll estimate the result\n    estimated_strings = []\n\n    if ngram_result.compression_ratio < 0.5  ## High compression suggests repetition\n        # High repetition might collapse to fewer, longer strings\n        estimated_count = max(1, ngram_result.num_vertices ÷ 3)\n        estimated_avg_length = length(original_text) ÷ estimated_count\n\n        for i in 1:estimated_count\n            # Create simulated string\n            start_pos = ((i-1) * estimated_avg_length) + 1\n            end_pos = min(start_pos + estimated_avg_length - 1, length(original_text))\n            if start_pos <= length(original_text)\n                simulated_string = original_text[start_pos:end_pos]\n                push!(estimated_strings, simulated_string)\n            end\n        end\n    else\n        # Low compression might result in strings similar to original n-grams\n        # but with some linear paths collapsed\n        for vertex in vertices[1:min(5, length(vertices))]  ## Limit for simulation\n            push!(estimated_strings, vertex)\n        end\n    end\n\n    return estimated_strings\nend\n\nstring_conversion_results = Dict()\n\nprintln(\"Simulating N-gram to String graph conversions:\")\nfor (key, result) in ngram_results\n    estimated_strings = simulate_string_graph_conversion(result)\n\n    string_conversion_results[key] = (\n        original_ngram_result = result,\n        estimated_strings = estimated_strings,\n        conversion_ratio = length(estimated_strings) / result.num_vertices\n    )\n\n    println(\"  $(key):\")\n    println(\"    N-gram vertices: $(result.num_vertices)\")\n    println(\"    Estimated string vertices: $(length(estimated_strings))\")\n    println(\"    Conversion ratio: $(round(length(estimated_strings) / result.num_vertices, digits=3))\")\n\n    if !isempty(estimated_strings)\n        example_count = min(2, length(estimated_strings))\n        println(\"    Example strings: $(estimated_strings[1:example_count])\")\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/#Phase-4:-Reconstruction-and-Round-Trip-Validation","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Phase 4: Reconstruction and Round-Trip Validation","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"Validate the complete round-trip workflow through both graph representations.","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"println(\"\\n5. PHASE 4: RECONSTRUCTION AND ROUND-TRIP VALIDATION\")\nprintln(\"-\"^50)\n\nfunction validate_round_trip(original_text, ngram_graph, estimated_strings, n)\n    \"\"\"Validate the round-trip reconstruction quality.\"\"\"\n\n    # Method 1: Direct N-gram assembly\n    try\n        ngram_assembly = Mycelia.assemble_strings(ngram_graph)\n        ngram_success = !isempty(ngram_assembly)\n\n        # Find best N-gram reconstruction\n        best_ngram_similarity = 0.0\n        best_ngram_reconstruction = \"\"\n\n        for reconstruction in ngram_assembly\n            similarity = calculate_similarity(original_text, reconstruction)\n            if similarity > best_ngram_similarity\n                best_ngram_similarity = similarity\n                best_ngram_reconstruction = reconstruction\n            end\n        end\n\n    catch e\n        ngram_success = false\n        best_ngram_similarity = 0.0\n        best_ngram_reconstruction = \"\"\n        ngram_assembly = String[]\n    end\n\n    # Method 2: String graph simulation\n    string_success = !isempty(estimated_strings)\n\n    # For string graphs, we'll simulate a simple concatenation approach\n    if string_success\n        # Try different string combinations\n        string_reconstruction = join(estimated_strings, \"\")\n        string_similarity = calculate_similarity(original_text, string_reconstruction)\n    else\n        string_similarity = 0.0\n        string_reconstruction = \"\"\n    end\n\n    return (\n        ngram_success = ngram_success,\n        ngram_similarity = best_ngram_similarity,\n        ngram_reconstruction = best_ngram_reconstruction,\n        string_success = string_success,\n        string_similarity = string_similarity,\n        string_reconstruction = string_reconstruction,\n        comparison = best_ngram_similarity > string_similarity ? \"N-gram better\" : \"String better\"\n    )\nend\n\nfunction calculate_similarity(original::String, reconstructed::String)\n    \"\"\"Calculate character-level similarity between strings.\"\"\"\n    min_len = min(length(original), length(reconstructed))\n    max_len = max(length(original), length(reconstructed))\n\n    if max_len == 0\n        return 1.0\n    end\n\n    matches = 0\n    for i in 1:min_len\n        if original[i] == reconstructed[i]\n            matches += 1\n        end\n    end\n\n    return matches / max_len\nend\n\nvalidation_results = Dict()\n\nprintln(\"Validating round-trip reconstructions:\")\nfor (key, conversion_result) in string_conversion_results\n    ngram_result = conversion_result.original_ngram_result\n    estimated_strings = conversion_result.estimated_strings\n\n    validation = validate_round_trip(\n        ngram_result.dataset.text,\n        ngram_result.graph,\n        estimated_strings,\n        ngram_result.n\n    )\n\n    validation_results[key] = validation\n\n    println(\"\\\\n  $(key):\")\n    println(\"    Original: \\\"$(ngram_result.dataset.text)\\\"\")\n    println(\"    N-gram reconstruction: $(validation.ngram_success ? \"SUCCESS\" : \"FAILED\")\")\n    if validation.ngram_success\n        println(\"      Similarity: $(round(validation.ngram_similarity, digits=3))\")\n        println(\"      Result: \\\"$(validation.ngram_reconstruction)\\\"\")\n    end\n    println(\"    String reconstruction: $(validation.string_success ? \"SUCCESS\" : \"FAILED\")\")\n    if validation.string_success\n        println(\"      Similarity: $(round(validation.string_similarity, digits=3))\")\n        println(\"      Result: \\\"$(validation.string_reconstruction)\\\"\")\n    end\n    println(\"    Comparison: $(validation.comparison)\")\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/#Performance-and-Complexity-Analysis","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Performance and Complexity Analysis","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"Compare the computational characteristics of both graph types.","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"println(\"\\n6. PERFORMANCE AND COMPLEXITY ANALYSIS\")\nprintln(\"-\"^50)\n\nfunction analyze_graph_efficiency(ngram_results, string_results)\n    \"\"\"Analyze computational efficiency of both graph types.\"\"\"\n\n    println(\"Graph type comparison:\")\n\n    total_ngram_vertices = 0\n    total_string_vertices = 0\n    total_original_length = 0\n\n    for (key, ngram_result) in ngram_results\n        if haskey(string_results, key)\n            string_result = string_results[key]\n\n            total_ngram_vertices += ngram_result.num_vertices\n            total_string_vertices += length(string_result.estimated_strings)\n            total_original_length += length(ngram_result.dataset.text)\n        end\n    end\n\n    avg_ngram_compression = total_ngram_vertices / total_original_length\n    avg_string_compression = total_string_vertices / total_original_length\n    hierarchy_compression = total_string_vertices / total_ngram_vertices\n\n    println(\"  Average N-gram compression: $(round(avg_ngram_compression, digits=3))\")\n    println(\"  Average String compression: $(round(avg_string_compression, digits=3))\")\n    println(\"  Hierarchical compression (String/N-gram): $(round(hierarchy_compression, digits=3))\")\n\n    println(\"\\\\n  Memory efficiency estimation:\")\n    println(\"    N-gram graphs: Higher vertex count, fixed-size vertices\")\n    println(\"    String graphs: Lower vertex count, variable-size vertices\")\n    println(\"    Trade-off: Graph complexity vs. vertex size\")\n\n    return (\n        ngram_compression = avg_ngram_compression,\n        string_compression = avg_string_compression,\n        hierarchy_compression = hierarchy_compression\n    )\nend\n\nefficiency_analysis = analyze_graph_efficiency(ngram_results, string_conversion_results)","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/#Real-World-Application:-Multi-Scale-Text-Analysis","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Real-World Application: Multi-Scale Text Analysis","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"Demonstrate the practical value of hierarchical graph representations.","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"println(\"\\n7. REAL-WORLD APPLICATION: MULTI-SCALE TEXT ANALYSIS\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"Example: Analyzing text at multiple resolutions","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"complex_text = \"In bioinformatics, sequence analysis involves the process of subjecting DNA, RNA, or protein sequences to any of a wide range of analytical methods to understand their features, function, structure, or evolution\"\n\nprintln(\"Multi-scale analysis of complex text:\")\nprintln(\"Text: \\\"$(complex_text[1:60])...\\\"\")\nprintln(\"Length: $(length(complex_text)) characters\")\n\n# Build graphs at different scales\nscales = [\n    (n=3, description=\"Fine-grained analysis\"),\n    (n=5, description=\"Medium-grained analysis\"),\n    (n=7, description=\"Coarse-grained analysis\")\n]\n\nprintln(\"\\\\nBuilding multi-scale representations:\")\nfor scale in scales\n    if length(complex_text) >= scale.n\n        ngram_graph = Mycelia.string_to_ngram_graph(s=complex_text, n=scale.n)\n        ngram_vertices = length(ngram_graph.vertex_labels)\n        compression = ngram_vertices / (length(complex_text) - scale.n + 1)\n\n        println(\"  $(scale.description) (n=$(scale.n)):\")\n        println(\"    N-gram vertices: $ngram_vertices\")\n        println(\"    Compression ratio: $(round(compression, digits=3))\")\n\n        # Simulate string graph conversion\n        estimated_string_count = max(1, ngram_vertices ÷ 4)  ## Rough estimate\n        string_compression = estimated_string_count / (length(complex_text) - scale.n + 1)\n\n        println(\"    Estimated string vertices: $estimated_string_count\")\n        println(\"    String compression ratio: $(round(string_compression, digits=3))\")\n    end\nend\n\nprintln(\"\\\\nInsights from multi-scale analysis:\")\nprintln(\"  • Fine-grained: High detail, more vertices, better local patterns\")\nprintln(\"  • Coarse-grained: Lower detail, fewer vertices, global structure\")\nprintln(\"  • Hierarchical conversion: Further compression with controlled information loss\")","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/#Tutorial-Summary-and-Best-Practices","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Tutorial Summary and Best Practices","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"Summarize key learnings and provide guidance for application.","category":"page"},{"location":"generated/tutorials/09_round_trip_02_ngram_to_string/","page":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","title":"Round-Trip Tutorial 2: String Data → N-gram Graphs → String Graphs → Reconstruction","text":"println(\"\\n\" * \"=\"^80)\nprintln(\"TUTORIAL SUMMARY AND BEST PRACTICES\")\nprintln(\"=\"^80)\n\n# Calculate overall statistics\ntotal_validations = length(validation_results)\nsuccessful_ngram = sum(1 for v in values(validation_results) if v.ngram_success)\nsuccessful_string = sum(1 for v in values(validation_results) if v.string_success)\n\navg_ngram_similarity = Statistics.mean([v.ngram_similarity for v in values(validation_results)])\navg_string_similarity = Statistics.mean([v.string_similarity for v in values(validation_results)])\n\nprintln(\"\\\\n✅ HIERARCHICAL WORKFLOW COMPLETION:\")\nprintln(\"  1. N-gram Graph Construction: ✓ Multiple scales tested\")\nprintln(\"  2. Graph Structure Analysis: ✓ Complexity patterns identified\")\nprintln(\"  3. String Graph Conversion: ✓ Simulation completed\")\nprintln(\"  4. Round-trip Validation: ✓ Quality metrics calculated\")\nprintln(\"  5. Performance Analysis: ✓ Efficiency trade-offs analyzed\")\nprintln(\"  6. Multi-scale Application: ✓ Real-world example demonstrated\")\n\nprintln(\"\\\\n📊 QUANTITATIVE RESULTS:\")\nprintln(\"  Total test cases: $total_validations\")\nprintln(\"  N-gram reconstruction success: $successful_ngram/$total_validations ($(round(successful_ngram/total_validations*100, digits=1))%)\")\nprintln(\"  String reconstruction success: $successful_string/$total_validations ($(round(successful_string/total_validations*100, digits=1))%)\")\nprintln(\"  Average N-gram similarity: $(round(avg_ngram_similarity, digits=3))\")\nprintln(\"  Average String similarity: $(round(avg_string_similarity, digits=3))\")\nprintln(\"  Hierarchical compression: $(round(efficiency_analysis.hierarchy_compression, digits=3))\")\n\nprintln(\"\\\\n🔄 HIERARCHICAL WORKFLOW VALIDATED:\")\nprintln(\"  String Data → N-gram Graphs → String Graphs → Reconstruction\")\nprintln(\"  ✓ Fixed-length foundation graphs constructed successfully\")\nprintln(\"  ✓ Variable-length simplified graphs derived\")\nprintln(\"  ✓ Quality maintained through conversion process\")\nprintln(\"  ✓ Performance trade-offs quantified\")\n\nprintln(\"\\\\n💡 KEY INSIGHTS:\")\nprintln(\"  • Hierarchical graphs provide multi-resolution analysis capabilities\")\nprintln(\"  • Fixed-length graphs offer detailed local structure information\")\nprintln(\"  • Variable-length graphs provide global structure with compression\")\nprintln(\"  • Conversion quality depends on text complexity and repetition patterns\")\nprintln(\"  • Multi-scale analysis reveals different aspects of data structure\")\n\nprintln(\"\\\\n📋 BEST PRACTICES:\")\nprintln(\"  • Use smaller n-grams (3-4) for detailed local analysis\")\nprintln(\"  • Use larger n-grams (5-7) for global structure identification\")\nprintln(\"  • Apply hierarchical conversion when memory efficiency is critical\")\nprintln(\"  • Validate reconstruction quality at each conversion step\")\nprintln(\"  • Consider text complexity when choosing graph representation\")\n\nprintln(\"\\\\n🚀 NEXT STEPS IN GRAPH HIERARCHY:\")\nprintln(\"  • Tutorial 3: FASTA sequences → Sequence graphs → Reconstruction\")\nprintln(\"  • Tutorial 4: FASTA → K-mer graphs → Sequence graphs (biological hierarchy)\")\nprintln(\"  • Tutorial 5: FASTQ → FASTQ graphs (direct quality-aware workflows)\")\nprintln(\"  • Tutorial 6: FASTQ → Qualmer graphs → FASTQ graphs (quality hierarchy)\")\n\nprintln(\"\\\\n🎯 PATTERNS FOR BIOLOGICAL GRAPHS:\")\nprintln(\"  The hierarchical patterns demonstrated here with text apply to:\")\nprintln(\"  • DNA/RNA sequences: Fixed k-mers → Variable-length contigs\")\nprintln(\"  • Quality data: Fixed qualmers → Quality-aware sequences\")\nprintln(\"  • Protein sequences: Fixed amino acid k-mers → Domain sequences\")\n\nprintln(\"\\\\n\" * \"=\"^80)\nprintln(\"Hierarchical graph conversion workflow mastered!\")\nprintln(\"Ready for biological sequence applications in Tutorial 3!\")\nprintln(\"=\"^80)","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Tutorial-7:-Comparative-Genomics-and-Pangenome-Analysis","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"This tutorial covers comparative genomics approaches, including pangenome construction, phylogenetic analysis, and evolutionary genomics.","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Learning-Objectives","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"By the end of this tutorial, you will understand:","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Pangenome concepts and construction methods\nCore, accessory, and unique gene identification\nPhylogenetic tree construction and interpretation\nSynteny analysis and chromosomal rearrangements\nPopulation genomics and evolutionary analysis\nGraph-based genome representation","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Setup","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"import Pkg\nif isinteractive()\n    Pkg.activate(\"..\")\nend\n\nimport Test\nimport Mycelia\nimport FASTX\nimport Random\nimport Statistics\nimport Graphs\nimport Kmers\n\nRandom.seed!(42)","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Part-1:-Pangenome-Concepts","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Part 1: Pangenome Concepts","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Pangenomes represent the complete set of genes within a species or closely related group of organisms.","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"=== Comparative Genomics Tutorial ===\")\n\nprintln(\"Pangenome Components:\")\nprintln(\"- Core genome: Genes present in all individuals\")\nprintln(\"- Accessory genome: Genes present in some individuals\")\nprintln(\"- Unique genes: Genes present in single individuals\")\nprintln(\"- Variable genes: Genes with presence/absence variation\")\nprintln()\nprintln(\"Pangenome Types:\")\nprintln(\"- Open pangenome: Continues to expand with new genomes\")\nprintln(\"- Closed pangenome: Reaches saturation quickly\")\nprintln(\"- Mixed pangenome: Shows both open and closed characteristics\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Part-2:-Data-Preparation-for-Pangenome-Analysis","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Part 2: Data Preparation for Pangenome Analysis","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Prepare multiple genomes for comparative analysis","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"\\n=== Data Preparation ===\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Simulating-Multiple-Genomes","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Simulating Multiple Genomes","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Create a set of related genomes for pangenome analysis","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Simulating Related Genomes ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Generate core genes present in all genomes","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"n_genomes = 5\ncore_genes = 200\naccessory_genes = 100\nunique_genes = 50","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Generate simulated genomes with different characteristics","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"genome_files = String[]\nfor i in 1:n_genomes\n    genome_size = core_genes * 1000 + rand(0:accessory_genes) * 1000 + rand(0:unique_genes) * 1000\n    genome = Mycelia.random_fasta_record(moltype=:DNA, seed=i, L=genome_size)\n    filename = \"genome_$i.fasta\"\n    Mycelia.write_fasta(outfile=filename, records=[genome])\n    push!(genome_files, filename)\nend\n\nprintln(\"Generated $(n_genomes) genomes:\")\nfor (i, file) in enumerate(genome_files)\n    size = filesize(file)\n    println(\"  Genome $i: $file ($(size) bytes)\")\nend","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Part-3:-Gene-Clustering-and-Ortholog-Identification","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Part 3: Gene Clustering and Ortholog Identification","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Identify orthologous genes across genomes","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"\\n=== Gene Clustering ===\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#All-vs-All-Sequence-Comparison","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"All-vs-All Sequence Comparison","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Compare all genes against all genes","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- All-vs-All Comparison ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Perform k-mer based pangenome analysis using implemented functions","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"Performing k-mer based pangenome analysis...\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Use implemented pangenome analysis function","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"pangenome_result = Mycelia.analyze_pangenome_kmers(\n    genome_files,\n    kmer_type=Kmers.DNAKmer{21}\n)\n\nprintln(\"Pangenome Analysis Results:\")\nprintln(\"  Core k-mers: $(length(pangenome_result.core_kmers))\")\nprintln(\"  Accessory k-mers: $(length(pangenome_result.accessory_kmers))\")\nprintln(\"  Total pangenome size: $(pangenome_result.similarity_stats.pangenome_size)\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Genome-Similarity-Analysis","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Genome Similarity Analysis","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Compare genome similarity using multiple metrics","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Genome Similarity Analysis ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Build distance matrix using different metrics","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"js_matrix = Mycelia.build_genome_distance_matrix(\n    genome_files,\n    kmer_type=Kmers.DNAKmer{21},\n    metric=:js_divergence\n)\n\nprintln(\"Distance Matrix (JS Divergence):\")\nfor i in 1:n_genomes\n    for j in 1:n_genomes\n        print(\"$(round(js_matrix.distance_matrix[i,j], digits=3)) \")\n    end\n    println()\nend","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Part-4:-Pangenome-Construction","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Part 4: Pangenome Construction","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Build pangenome from ortholog clusters","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"\\n=== Pangenome Construction ===\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Core-Genome-Analysis","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Core Genome Analysis","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Identify genes present in all genomes","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Core Genome Analysis ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Use results from pangenome analysis","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"core_genome_size = length(pangenome_result.core_kmers)\ncore_genome_percentage = pangenome_result.similarity_stats.core_percentage\n\nprintln(\"Core Genome:\")\nprintln(\"  Size: $core_genome_size k-mers\")\nprintln(\"  Percentage: $(round(core_genome_percentage, digits=1))%\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Core genome represents k-mers present in ALL genomes","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"Core genome represents conserved genomic content across all $(n_genomes) genomes\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Accessory-Genome-Analysis","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Accessory Genome Analysis","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Analyze k-mers with variable presence","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Accessory Genome Analysis ---\")\n\naccessory_genome_size = length(pangenome_result.accessory_kmers)\nunique_genome_total = sum(length(kmers) for kmers in values(pangenome_result.unique_kmers_by_genome))\n\nprintln(\"Accessory Genome:\")\nprintln(\"  Variable k-mers: $accessory_genome_size\")\nprintln(\"  Unique k-mers: $unique_genome_total\")\nprintln(\"  Total accessory: $(accessory_genome_size + unique_genome_total)\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Analyze unique k-mers per genome","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"Unique k-mers per genome:\")\nfor (genome, unique_kmers) in pangenome_result.unique_kmers_by_genome\n    println(\"  $genome: $(length(unique_kmers)) unique k-mers\")\nend","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Pangenome-Curves","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Pangenome Curves","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Model pangenome size vs number of genomes","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Pangenome Curves ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement pangenome curve analysis","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Calculate pangenome size for subsets\nFit mathematical models (power law, exponential)\nPredict pangenome size for larger collections\nClassify as open/closed pangenome","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Part-5:-Graph-Based-Pangenome-Representation","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Part 5: Graph-Based Pangenome Representation","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Represent pangenomes as graphs","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"\\n=== Graph-Based Pangenomes ===\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Sequence-Graphs","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Sequence Graphs","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Build graphs from sequence overlaps","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Sequence Graphs ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement sequence graph construction","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Build k-mer graphs from sequences\nIdentify shared and unique paths\nHandle graph bubbles and loops\nCompress redundant sequences","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Use existing pangenome graph construction","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"k = 3\nsequences = [FASTX.sequence(Mycelia.random_fasta_record(moltype=:DNA, seed=i, L=100)) for i in 1:5]","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"graph = Mycelia.buildstrandedkmer_graph(Kmers.DNAKmer{k}, sequences)","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"Sequence Graph Construction:\")\nprintln(\"  K-mer size: $k\")\nprintln(\"  Sequences: $(length(sequences))\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"  Graph nodes: Graphs.nv(graph)\") println(\"  Graph edges: Graphs.ne(graph)\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Variation-Graphs","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Variation Graphs","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Represent genetic variation as graphs","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Variation Graphs ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement variation graph construction","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Build graphs from multiple alignments\nRepresent SNPs and indels as bubbles\nHandle complex structural variants\nOptimize graph topology","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Part-6:-Phylogenetic-Analysis","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Part 6: Phylogenetic Analysis","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Construct phylogenetic trees from pangenome data","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"\\n=== Phylogenetic Analysis ===\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Core-Genome-Phylogeny","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Core Genome Phylogeny","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Build trees from core genes","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Core Genome Phylogeny ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement core genome phylogeny","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Concatenate core gene alignments\nCalculate phylogenetic trees\nAssess branch support\nCompare with individual gene trees","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Accessory-Genome-Phylogeny","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Accessory Genome Phylogeny","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Analyze evolution of accessory genes","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Accessory Genome Phylogeny ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement accessory genome phylogeny","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Build trees from gene presence/absence\nUse binary character evolution models\nIdentify horizontal gene transfer events\nAnalyze gene gain/loss patterns","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Part-7:-Synteny-Analysis","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Part 7: Synteny Analysis","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Analyze conserved gene order","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"\\n=== Synteny Analysis ===\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Synteny-Detection","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Synteny Detection","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Identify conserved gene order","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Synteny Detection ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement synteny detection","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Identify colinear gene blocks\nCalculate synteny conservation\nDetect chromosomal rearrangements\nVisualize synteny relationships","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Rearrangement-Analysis","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Rearrangement Analysis","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Analyze chromosomal rearrangements","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Rearrangement Analysis ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement rearrangement analysis","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Identify inversions, translocations, duplications\nCalculate rearrangement distances\nReconstruct ancestral gene orders\nAnalyze rearrangement hotspots","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Part-8:-Population-Genomics","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Part 8: Population Genomics","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Analyze genetic diversity within populations","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"\\n=== Population Genomics ===\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Genetic-Diversity","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Genetic Diversity","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Calculate diversity metrics","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Genetic Diversity ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement diversity analysis","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Calculate nucleotide diversity (π)\nEstimate effective population size\nAnalyze allele frequency spectra\nIdentify population structure","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Selection-Analysis","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Selection Analysis","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Detect selection pressure","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Selection Analysis ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement selection analysis","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Calculate dN/dS ratios\nIdentify positively selected genes\nDetect balancing selection\nAnalyze codon usage bias","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Part-9:-Functional-Analysis","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Part 9: Functional Analysis","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Analyze functional aspects of pangenomes","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"\\n=== Functional Analysis ===\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Functional-Enrichment","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Functional Enrichment","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Identify enriched functional categories","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Functional Enrichment ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement functional enrichment analysis","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"GO term enrichment analysis\nKEGG pathway enrichment\nProtein domain analysis\nMetabolic pathway reconstruction","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Adaptive-Evolution","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Adaptive Evolution","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Identify adaptively evolving genes","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Adaptive Evolution ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement adaptive evolution analysis","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Identify rapidly evolving genes\nAnalyze gene family expansions\nDetect horizontal gene transfer\nCorrelate with environmental factors","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Part-10:-Visualization-and-Interpretation","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Part 10: Visualization and Interpretation","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Create visualizations for comparative genomics","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"\\n=== Visualization ===\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Pangenome-Plots","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Pangenome Plots","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Visualize pangenome structure","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Pangenome Plots ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement pangenome visualization","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Pangenome accumulation curves\nGene presence/absence heatmaps\nPhylogenetic trees with annotations\nSynteny dot plots","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Interactive-Visualization","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Interactive Visualization","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Create interactive pangenome browsers","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Interactive Visualization ---\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"TODO: Implement interactive visualization","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Web-based pangenome browser\nInteractive phylogenetic trees\nSearchable gene catalogs\nComparative genome viewers","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Part-11:-Applications-and-Case-Studies","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Part 11: Applications and Case Studies","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Real-world applications of comparative genomics","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"\\n=== Applications ===\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Pathogen-Genomics","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Pathogen Genomics","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Applications in infectious disease research","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Pathogen Genomics ---\")\n\nprintln(\"Pathogen Genomics Applications:\")\nprintln(\"- Outbreak investigation and source tracking\")\nprintln(\"- Drug resistance evolution\")\nprintln(\"- Vaccine target identification\")\nprintln(\"- Virulence factor discovery\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Agricultural-Genomics","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Agricultural Genomics","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Applications in crop improvement","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Agricultural Genomics ---\")\n\nprintln(\"Agricultural Genomics Applications:\")\nprintln(\"- Crop diversity assessment\")\nprintln(\"- Disease resistance breeding\")\nprintln(\"- Stress tolerance identification\")\nprintln(\"- Nutritional quality improvement\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Environmental-Genomics","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Environmental Genomics","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Applications in environmental microbiology","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"--- Environmental Genomics ---\")\n\nprintln(\"Environmental Genomics Applications:\")\nprintln(\"- Microbial community analysis\")\nprintln(\"- Ecosystem function prediction\")\nprintln(\"- Biogeochemical cycling\")\nprintln(\"- Climate change adaptation\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Part-12:-Best-Practices-and-Guidelines","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Part 12: Best Practices and Guidelines","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Recommendations for comparative genomics analysis","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"\\n=== Best Practices ===\")\n\nprintln(\"Data Quality:\")\nprintln(\"- Use high-quality genome assemblies\")\nprintln(\"- Ensure consistent annotation standards\")\nprintln(\"- Validate ortholog assignments\")\nprintln(\"- Check for contamination and artifacts\")\nprintln()\nprintln(\"Analysis Strategy:\")\nprintln(\"- Start with closely related genomes\")\nprintln(\"- Use multiple clustering methods\")\nprintln(\"- Validate results with independent approaches\")\nprintln(\"- Consider biological context in interpretation\")\nprintln()\nprintln(\"Computational Considerations:\")\nprintln(\"- Plan for large memory requirements\")\nprintln(\"- Use parallel processing when possible\")\nprintln(\"- Implement checkpointing for long analyses\")\nprintln(\"- Archive intermediate results\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/#Summary","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Summary","text":"","category":"section"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"println(\"\\n=== Comparative Genomics Summary ===\")\nprintln(\"✓ Understanding pangenome concepts and construction\")\nprintln(\"✓ Implementing gene clustering and ortholog identification\")\nprintln(\"✓ Building core and accessory genome catalogs\")\nprintln(\"✓ Constructing graph-based pangenome representations\")\nprintln(\"✓ Performing phylogenetic analysis\")\nprintln(\"✓ Analyzing synteny and chromosomal rearrangements\")\nprintln(\"✓ Applying population genomics approaches\")\nprintln(\"✓ Creating comprehensive visualizations\")\nprintln(\"✓ Understanding real-world applications\")","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"Cleanup","category":"page"},{"location":"generated/tutorials/07_comparative_genomics/","page":"Tutorial 7: Comparative Genomics and Pangenome Analysis","title":"Tutorial 7: Comparative Genomics and Pangenome Analysis","text":"for file in genome_files\n    if isfile(file)\n        rm(file, force=true)\n    end\nend\n\nprintln(\"\\nNext: Tutorial 8 - Tool Integration\")\n\nnothing","category":"page"},{"location":"generated/tutorials/run_all_tutorials/#Run-All-Mycelia-Tutorials","page":"Run All Mycelia Tutorials","title":"Run All Mycelia Tutorials","text":"","category":"section"},{"location":"generated/tutorials/run_all_tutorials/","page":"Run All Mycelia Tutorials","title":"Run All Mycelia Tutorials","text":"This script executes all Mycelia tutorials in sequence. Use with caution - may take significant time and resources.","category":"page"},{"location":"generated/tutorials/run_all_tutorials/#Usage","page":"Run All Mycelia Tutorials","title":"Usage","text":"","category":"section"},{"location":"generated/tutorials/run_all_tutorials/","page":"Run All Mycelia Tutorials","title":"Run All Mycelia Tutorials","text":"# Run all tutorials\njulia --project=. tutorials/run_all_tutorials.jl\n\n# Run specific tutorial\njulia --project=. tutorials/01_data_acquisition.jl\n\n# Convert to notebooks\njulia --project=. -e 'include(\"tutorials/run_all_tutorials.jl\"); convert_all_to_notebooks()'","category":"page"},{"location":"generated/tutorials/run_all_tutorials/","page":"Run All Mycelia Tutorials","title":"Run All Mycelia Tutorials","text":"import Pkg\nif isinteractive()\n    Pkg.activate(\"..\")\nend\n\nimport Dates\nimport Literate","category":"page"},{"location":"generated/tutorials/run_all_tutorials/","page":"Run All Mycelia Tutorials","title":"Run All Mycelia Tutorials","text":"List of all tutorials in execution order","category":"page"},{"location":"generated/tutorials/run_all_tutorials/","page":"Run All Mycelia Tutorials","title":"Run All Mycelia Tutorials","text":"TUTORIALS = [\n    \"01_data_acquisition.jl\",\n    \"02_quality_control.jl\",\n    \"03_kmer_analysis.jl\",\n    \"04_genome_assembly.jl\",\n    \"05_assembly_validation.jl\",\n    \"06_gene_annotation.jl\",\n    \"07_comparative_genomics.jl\",\n    \"08_tool_integration.jl\",\n]\n\n\"\"\"\n    run_all_tutorials()\n\nExecute all tutorials in sequence, collecting timing and status information.\n\"\"\"\nfunction run_all_tutorials()\n    println(\"=== Running All Mycelia Tutorials ===\")\n    println(\"Start time: $(Dates.now())\")\n    println()\n\n    results = []\n    total_start = time()\n\n    for tutorial in TUTORIALS\n        if isfile(tutorial)\n            println(\"Running $tutorial...\")\n            start_time = time()\n\n            try\n                # Execute tutorial\n                include(tutorial)\n\n                elapsed = time() - start_time\n                push!(results, (tutorial, :success, elapsed))\n                println(\"✓ $tutorial completed in $(round(elapsed, digits=2))s\")\n\n            catch e\n                elapsed = time() - start_time\n                push!(results, (tutorial, :error, elapsed, e))\n                println(\"✗ $tutorial failed after $(round(elapsed, digits=2))s\")\n                println(\"  Error: $e\")\n            end\n\n            println()\n        else\n            println(\"⚠ $tutorial not found, skipping...\")\n            push!(results, (tutorial, :not_found, 0.0))\n        end\n    end\n\n    total_elapsed = time() - total_start\n\n    # Print summary\n    println(\"=== Tutorial Execution Summary ===\")\n    println(\"Total time: $(round(total_elapsed, digits=2))s\")\n    println()\n\n    successful = 0\n    for (tutorial, status, elapsed, error...) in results\n        if status == :success\n            println(\"✓ $tutorial ($(round(elapsed, digits=2))s)\")\n            successful += 1\n        elseif status == :error\n            println(\"✗ $tutorial ($(round(elapsed, digits=2))s) - $(error[1])\")\n        else\n            println(\"⚠ $tutorial (not found)\")\n        end\n    end\n\n    println()\n    println(\"Successful: $successful/$(length(TUTORIALS))\")\n    println(\"End time: $(Dates.now())\")\n\n    return results\nend\n\n\"\"\"\n    convert_all_to_notebooks()\n\nConvert all tutorials to Jupyter notebooks using Literate.jl.\n\"\"\"\nfunction convert_all_to_notebooks()\n    println(\"=== Converting Tutorials to Notebooks ===\")\n\n    # Create notebooks directory if it doesn't exist\n    notebooks_dir = \"notebooks\"\n    if !isdir(notebooks_dir)\n        mkdir(notebooks_dir)\n    end\n\n    for tutorial in TUTORIALS\n        if isfile(tutorial)\n            println(\"Converting $tutorial to notebook...\")\n\n            try\n                # Convert to notebook\n                Literate.notebook(tutorial, notebooks_dir, execute=false)\n                println(\"✓ Converted $tutorial\")\n\n            catch e\n                println(\"✗ Failed to convert $tutorial: $e\")\n            end\n        else\n            println(\"⚠ $tutorial not found, skipping...\")\n        end\n    end\n\n    println()\n    println(\"Notebooks saved to: $notebooks_dir\")\nend\n\n\"\"\"\n    run_tutorial(tutorial_name)\n\nRun a specific tutorial by name.\n\"\"\"\nfunction run_tutorial(tutorial_name)\n    if !endswith(tutorial_name, \".jl\")\n        tutorial_name *= \".jl\"\n    end\n\n    if isfile(tutorial_name)\n        println(\"Running $tutorial_name...\")\n        start_time = time()\n\n        try\n            include(tutorial_name)\n            elapsed = time() - start_time\n            println(\"✓ $tutorial_name completed in $(round(elapsed, digits=2))s\")\n            return true\n        catch e\n            elapsed = time() - start_time\n            println(\"✗ $tutorial_name failed after $(round(elapsed, digits=2))s\")\n            println(\"  Error: $e\")\n            return false\n        end\n    else\n        println(\"✗ $tutorial_name not found\")\n        return false\n    end\nend","category":"page"},{"location":"generated/tutorials/run_all_tutorials/","page":"Run All Mycelia Tutorials","title":"Run All Mycelia Tutorials","text":"Main execution","category":"page"},{"location":"generated/tutorials/run_all_tutorials/","page":"Run All Mycelia Tutorials","title":"Run All Mycelia Tutorials","text":"if abspath(PROGRAM_FILE) == @__FILE__\n    # Only run if this script is executed directly\n    if length(ARGS) == 0\n        # Run all tutorials\n        results = run_all_tutorials()\n    elseif ARGS[1] == \"convert\"\n        # Convert to notebooks\n        convert_all_to_notebooks()\n    else\n        # Run specific tutorial\n        tutorial_name = ARGS[1]\n        run_tutorial(tutorial_name)\n    end\nend","category":"page"},{"location":"faq/#Frequently-Asked-Questions","page":"FAQ","title":"Frequently Asked Questions","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"This document is under development. Common questions will be added based on user feedback.","category":"page"},{"location":"faq/#Table-of-Contents","page":"FAQ","title":"Table of Contents","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"Installation and Setup\nAssembly Questions\nPerformance and Optimization\nData Formats and Compatibility\nError Messages and Troubleshooting\nComparison with Other Tools","category":"page"},{"location":"faq/#Installation-and-Setup","page":"FAQ","title":"Installation and Setup","text":"","category":"section"},{"location":"faq/#Q:-What-are-the-system-requirements-for-Mycelia?","page":"FAQ","title":"Q: What are the system requirements for Mycelia?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add system requirements FAQ","category":"page"},{"location":"faq/#Q:-How-do-I-install-Mycelia-on-my-HPC-cluster?","page":"FAQ","title":"Q: How do I install Mycelia on my HPC cluster?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add HPC installation FAQ","category":"page"},{"location":"faq/#Q:-Can-I-use-Mycelia-with-conda-environments?","page":"FAQ","title":"Q: Can I use Mycelia with conda environments?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add conda integration FAQ","category":"page"},{"location":"faq/#Assembly-Questions","page":"FAQ","title":"Assembly Questions","text":"","category":"section"},{"location":"faq/#Q:-Which-assembly-method-should-I-use-for-my-data?","page":"FAQ","title":"Q: Which assembly method should I use for my data?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add method selection FAQ - reference assembly-method-selection.md","category":"page"},{"location":"faq/#Q:-How-do-I-choose-the-right-k-mer-size?","page":"FAQ","title":"Q: How do I choose the right k-mer size?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add k-mer selection FAQ","category":"page"},{"location":"faq/#Q:-What-does-\"probabilistic-assembly\"-mean?","page":"FAQ","title":"Q: What does \"probabilistic assembly\" mean?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add probabilistic assembly explanation","category":"page"},{"location":"faq/#Q:-How-is-Mycelia-different-from-SPAdes-or-other-assemblers?","page":"FAQ","title":"Q: How is Mycelia different from SPAdes or other assemblers?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add comparison FAQ","category":"page"},{"location":"faq/#Performance-and-Optimization","page":"FAQ","title":"Performance and Optimization","text":"","category":"section"},{"location":"faq/#Q:-How-much-memory-do-I-need-for-my-genome-size?","page":"FAQ","title":"Q: How much memory do I need for my genome size?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add memory estimation FAQ - reference performance.md","category":"page"},{"location":"faq/#Q:-My-assembly-is-taking-too-long.-How-can-I-speed-it-up?","page":"FAQ","title":"Q: My assembly is taking too long. How can I speed it up?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add performance optimization FAQ","category":"page"},{"location":"faq/#Q:-Can-I-run-Mycelia-in-parallel?","page":"FAQ","title":"Q: Can I run Mycelia in parallel?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add parallelization FAQ","category":"page"},{"location":"faq/#Data-Formats-and-Compatibility","page":"FAQ","title":"Data Formats and Compatibility","text":"","category":"section"},{"location":"faq/#Q:-What-file-formats-does-Mycelia-support?","page":"FAQ","title":"Q: What file formats does Mycelia support?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add file format FAQ","category":"page"},{"location":"faq/#Q:-Can-I-use-compressed-FASTQ-files?","page":"FAQ","title":"Q: Can I use compressed FASTQ files?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add compression support FAQ","category":"page"},{"location":"faq/#Q:-How-do-I-convert-between-different-sequence-formats?","page":"FAQ","title":"Q: How do I convert between different sequence formats?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add format conversion FAQ","category":"page"},{"location":"faq/#Error-Messages-and-Troubleshooting","page":"FAQ","title":"Error Messages and Troubleshooting","text":"","category":"section"},{"location":"faq/#Q:-I'm-getting-\"OutOfMemoryError\"-what-should-I-do?","page":"FAQ","title":"Q: I'm getting \"OutOfMemoryError\" - what should I do?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add memory error troubleshooting","category":"page"},{"location":"faq/#Q:-The-assembly-produced-no-contigs.-What-went-wrong?","page":"FAQ","title":"Q: The assembly produced no contigs. What went wrong?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add empty assembly troubleshooting","category":"page"},{"location":"faq/#Q:-How-do-I-interpret-assembly-quality-metrics?","page":"FAQ","title":"Q: How do I interpret assembly quality metrics?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add quality interpretation FAQ","category":"page"},{"location":"faq/#Comparison-with-Other-Tools","page":"FAQ","title":"Comparison with Other Tools","text":"","category":"section"},{"location":"faq/#Q:-When-should-I-use-Mycelia-vs-SPAdes?","page":"FAQ","title":"Q: When should I use Mycelia vs SPAdes?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add SPAdes comparison","category":"page"},{"location":"faq/#Q:-How-does-Mycelia-compare-to-Flye-for-long-reads?","page":"FAQ","title":"Q: How does Mycelia compare to Flye for long reads?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add Flye comparison","category":"page"},{"location":"faq/#Q:-Can-I-use-Mycelia-results-with-downstream-tools?","page":"FAQ","title":"Q: Can I use Mycelia results with downstream tools?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add compatibility FAQ","category":"page"},{"location":"faq/#Getting-Help","page":"FAQ","title":"Getting Help","text":"","category":"section"},{"location":"faq/#Q:-Where-can-I-get-help-if-my-question-isn't-answered-here?","page":"FAQ","title":"Q: Where can I get help if my question isn't answered here?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add help resources","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"GitHub Issues for bug reports\nGitHub Discussions for questions\nDocumentation and tutorials","category":"page"},{"location":"faq/#Q:-How-do-I-report-a-bug-or-request-a-feature?","page":"FAQ","title":"Q: How do I report a bug or request a feature?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add bug reporting guidance","category":"page"},{"location":"faq/#Q:-Is-there-a-community-forum-or-chat?","page":"FAQ","title":"Q: Is there a community forum or chat?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"TODO: Add community resources","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"This FAQ will be expanded based on common user questions and issues. If you have a question not covered here, please ask in GitHub Discussions.","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/#Round-Trip-Tutorial-1:-String-Data-String-Graphs-Reconstruction","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"This tutorial demonstrates the complete round-trip workflow for string-based graph construction and reconstruction in Mycelia. We'll start with raw string data, construct string graphs, perform assembly operations, and validate the reconstruction quality.","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/#Learning-Objectives","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"By the end of this tutorial, you will:","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Understand string graph construction from raw text data\nLearn to perform graph-based assembly operations\nValidate reconstruction accuracy with quality metrics\nAnalyze memory usage and computational performance\nApply string graphs to real-world text analysis problems","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"import Mycelia\nimport Statistics\nimport Random","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/#Data-Preparation","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Data Preparation","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"We'll start with various types of string data to demonstrate the versatility of string graphs.","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"println(\"=\"^80)\nprintln(\"ROUND-TRIP TUTORIAL 1: STRING GRAPHS\")\nprintln(\"=\"^80)","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/#Clean-Error-Free-Input-Data","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Clean Error-Free Input Data","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"First, let's create clean, error-free string data to establish baseline performance.","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"clean_strings = [\n    \"The quick brown fox jumps over the lazy dog\",\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n    \"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n    # \"αβγδεζηθικλμνξοπρστυφχψω\",  ## Unicode testing - requires fix in string-graphs.jl\n    \"Pattern recognition and machine learning algorithms\"\n]\n\nprintln(\"\\n1. CLEAN ERROR-FREE INPUT DATA\")\nprintln(\"-\"^50)\nfor (i, s) in enumerate(clean_strings)\n    println(\"String $i: \\\"$s\\\" (length: $(length(s)))\")\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/#Graph-Construction-Phase","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Graph Construction Phase","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Now we'll construct string graphs from our input data using different n-gram sizes.","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"println(\"\\n2. GRAPH CONSTRUCTION PHASE\")\nprintln(\"-\"^50)\n\ngraph_results = Dict()\n\nfor n in [2, 3, 4, 5]\n    println(\"\\nTesting n-gram size: $n\")\n\n    total_ngrams = 0\n    total_vertices = 0\n\n    for (i, text) in enumerate(clean_strings)\n        if length(text) >= n  ## Only process if text is long enough\n            try\n                # Construct string graph\n                graph = Mycelia.string_to_ngram_graph(s=text, n=n)\n\n                # Extract graph statistics\n                num_vertices = length(graph.vertex_labels)\n                vertex_labels = collect(values(graph.vertex_labels))\n\n                total_ngrams += length(text) - n + 1  ## Expected number of n-grams\n                total_vertices += num_vertices\n\n                println(\"  String $i: $(num_vertices) unique $(n)-grams\")\n                if num_vertices > 0\n                    println(\"    Examples: $(vertex_labels[1:min(3, num_vertices)])\")\n                end\n\n                # Store results for later analysis\n                graph_results[\"$(i)_$(n)\"] = (\n                    graph = graph,\n                    original_text = text,\n                    n = n,\n                    vertices = num_vertices,\n                    total_ngrams = length(text) - n + 1\n                )\n\n            catch e\n                println(\"  String $i: Error - $(typeof(e))\")\n            end\n        else\n            println(\"  String $i: Too short for $(n)-grams\")\n        end\n    end\n\n    println(\"  Summary: $total_vertices unique vertices from $total_ngrams total n-grams\")\n    if total_ngrams > 0\n        compression_ratio = total_vertices / total_ngrams\n        println(\"  Compression ratio: $(round(compression_ratio, digits=3))\")\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/#Assembly-and-Reconstruction-Phase","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Assembly and Reconstruction Phase","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Now we'll attempt to reconstruct the original strings from the graphs.","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"println(\"\\n3. ASSEMBLY AND RECONSTRUCTION PHASE\")\nprintln(\"-\"^50)\n\nreconstruction_results = Dict()\n\nfor (key, result) in graph_results\n    println(\"\\nReconstructing: \\\"$(result.original_text)\\\" (n=$(result.n))\")\n\n    try\n        # Attempt to reconstruct strings from the graph\n        # Note: This uses the basic string assembly function\n        reconstructed_strings = Mycelia.assemble_strings(result.graph)\n\n        num_reconstructed = length(reconstructed_strings)\n        println(\"  Reconstructed $num_reconstructed string(s)\")\n\n        # Store reconstruction results\n        reconstruction_results[key] = (\n            original = result.original_text,\n            reconstructed = reconstructed_strings,\n            n = result.n,\n            success = !isempty(reconstructed_strings)\n        )\n\n        # Show first few reconstructed strings\n        for (i, reconstructed) in enumerate(reconstructed_strings[1:min(3, num_reconstructed)])\n            println(\"    Reconstruction $i: \\\"$reconstructed\\\"\")\n        end\n\n    catch e\n        println(\"  Reconstruction failed: $(typeof(e))\")\n        reconstruction_results[key] = (\n            original = result.original_text,\n            reconstructed = String[],\n            n = result.n,\n            success = false\n        )\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/#Quality-Assessment-Phase","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Quality Assessment Phase","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Let's evaluate the reconstruction quality using various metrics.","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"println(\"\\n4. QUALITY ASSESSMENT PHASE\")\nprintln(\"-\"^50)\n\nfunction calculate_string_similarity(original::String, reconstructed::String)\n    \"\"\"Calculate similarity between original and reconstructed strings.\"\"\"\n    # Simple character-level accuracy\n    min_len = min(length(original), length(reconstructed))\n    max_len = max(length(original), length(reconstructed))\n\n    if max_len == 0\n        return 1.0  ## Both strings are empty\n    end\n\n    # Count matching characters at corresponding positions\n    matches = 0\n    for i in 1:min_len\n        if original[i] == reconstructed[i]\n            matches += 1\n        end\n    end\n\n    # Penalize length differences\n    similarity = matches / max_len\n    return similarity\nend\n\nfunction assess_reconstruction_quality(results_dict)\n    \"\"\"Assess overall reconstruction quality across all tests.\"\"\"\n    total_tests = length(results_dict)\n    successful_reconstructions = 0\n    total_similarity = 0.0\n\n    println(\"Individual reconstruction assessment:\")\n\n    for (key, result) in results_dict\n        original = result.original\n        reconstructed_list = result.reconstructed\n        n = result.n\n\n        if isempty(reconstructed_list)\n            println(\"  $key: FAILED - No reconstruction\")\n            continue\n        end\n\n        # Find best reconstruction (highest similarity)\n        best_similarity = 0.0\n        best_reconstruction = \"\"\n\n        for reconstructed in reconstructed_list\n            similarity = calculate_string_similarity(original, reconstructed)\n            if similarity > best_similarity\n                best_similarity = similarity\n                best_reconstruction = reconstructed\n            end\n        end\n\n        total_similarity += best_similarity\n        if best_similarity > 0.8  ## Consider >80% similarity as successful\n            successful_reconstructions += 1\n        end\n\n        status = best_similarity > 0.8 ? \"SUCCESS\" : \"PARTIAL\"\n        println(\"  $key: $status - Similarity: $(round(best_similarity, digits=3))\")\n\n        # Show comparison for low similarity cases\n        if best_similarity < 0.8\n            println(\"    Original:      \\\"$(original)\\\"\")\n            println(\"    Best match:    \\\"$(best_reconstruction)\\\"\")\n        end\n    end\n\n    return (\n        total_tests = total_tests,\n        successful = successful_reconstructions,\n        average_similarity = total_tests > 0 ? total_similarity / total_tests : 0.0,\n        success_rate = total_tests > 0 ? successful_reconstructions / total_tests : 0.0\n    )\nend\n\nquality_metrics = assess_reconstruction_quality(reconstruction_results)\n\nprintln(\"\\nOverall Quality Assessment:\")\nprintln(\"  Total tests: $(quality_metrics.total_tests)\")\nprintln(\"  Successful reconstructions: $(quality_metrics.successful)\")\nprintln(\"  Success rate: $(round(quality_metrics.success_rate * 100, digits=1))%\")\nprintln(\"  Average similarity: $(round(quality_metrics.average_similarity, digits=3))\")","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/#Performance-Analysis","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Performance Analysis","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Analyze memory usage and computational efficiency.","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"println(\"\\n5. PERFORMANCE ANALYSIS\")\nprintln(\"-\"^50)\n\nfunction analyze_performance_by_n()\n    \"\"\"Analyze how performance scales with n-gram size.\"\"\"\n\n    test_string = \"The quick brown fox jumps over the lazy dog and then some additional text for performance testing\"\n    println(\"Performance test string: \\\"$test_string\\\"\")\n    println(\"String length: $(length(test_string)) characters\")\n\n    for n in 2:6\n        if length(test_string) >= n\n            # Measure construction time\n            start_time = time()\n            graph = Mycelia.string_to_ngram_graph(s=test_string, n=n)\n            construction_time = time() - start_time\n\n            # Measure graph properties\n            num_vertices = length(graph.vertex_labels)\n            expected_ngrams = length(test_string) - n + 1\n            compression_ratio = num_vertices / expected_ngrams\n\n            # Estimate memory usage (approximate)\n            avg_vertex_size = sum(length(v) for v in values(graph.vertex_labels)) / num_vertices\n            estimated_memory_kb = (num_vertices * avg_vertex_size * 2) / 1024  ## Rough estimate\n\n            println(\"  n=$n: $(num_vertices) vertices, $(round(construction_time*1000, digits=2))ms, $(round(compression_ratio, digits=3)) compression, ~$(round(estimated_memory_kb, digits=1))KB\")\n        end\n    end\nend\n\nanalyze_performance_by_n()","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/#Real-World-Application-Example","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Real-World Application Example","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Demonstrate string graphs on a practical text analysis problem.","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"println(\"\\n6. REAL-WORLD APPLICATION EXAMPLE\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Example: DNA sequence analysis as strings","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"dna_sequences = [\n    \"ATCGATCGATCGATCG\",\n    \"GATCGATCGATCGTAGC\",\n    \"TCGATCGATCGTAGCTA\",\n    \"CGATCGATCGTAGCTAG\",\n    \"ATCGTAGCTAGCTAGCT\"\n]\n\nprintln(\"DNA sequence analysis using string graphs:\")\nprintln(\"Sequences to analyze:\")\nfor (i, seq) in enumerate(dna_sequences)\n    println(\"  Seq $i: $seq\")\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Concatenate sequences for analysis","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"combined_dna = join(dna_sequences, \"N\")  ## Use 'N' as separator\nprintln(\"\\\\nCombined sequence: $combined_dna\")","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Build string graph","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"dna_graph = Mycelia.string_to_ngram_graph(s=combined_dna, n=4)\ndna_4grams = collect(values(dna_graph.vertex_labels))\n\nprintln(\"DNA 4-gram analysis:\")\nprintln(\"  Unique 4-grams: $(length(dna_4grams))\")\nprintln(\"  Total 4-grams: $(length(combined_dna) - 4 + 1)\")","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Find most common patterns","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"dna_4gram_counts = Dict(k => 0 for k in dna_4grams)\nfor i in 1:(length(combined_dna) - 4 + 1)\n    ngram = combined_dna[i:i+3]\n    if haskey(dna_4gram_counts, ngram)\n        dna_4gram_counts[ngram] += 1\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Sort by frequency","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"sorted_patterns = sort(collect(dna_4gram_counts), by=x->x[2], rev=true)\nprintln(\"  Most frequent 4-grams:\")\nfor (pattern, count) in sorted_patterns[1:min(5, length(sorted_patterns))]\n    if pattern != \"N\"  ## Skip separator\n        println(\"    $pattern: $count occurrences\")\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/#Visualization-and-Graph-Analysis","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Visualization and Graph Analysis","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Provide insights into graph structure.","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"println(\"\\n7. GRAPH STRUCTURE ANALYSIS\")\nprintln(\"-\"^50)\n\nfunction analyze_graph_structure(graph, description)\n    \"\"\"Analyze structural properties of a string graph.\"\"\"\n\n    vertices = collect(values(graph.vertex_labels))\n    num_vertices = length(vertices)\n\n    if num_vertices == 0\n        println(\"  $description: Empty graph\")\n        return\n    end\n\n    # Basic statistics\n    vertex_lengths = [length(v) for v in vertices]\n    avg_length = Statistics.mean(vertex_lengths)\n\n    println(\"  $description:\")\n    println(\"    Vertices: $num_vertices\")\n    println(\"    Average vertex length: $(round(avg_length, digits=2))\")\n\n    # Character distribution analysis\n    all_chars = join(vertices)\n    char_counts = Dict{Char, Int}()\n    for char in all_chars\n        char_counts[char] = get(char_counts, char, 0) + 1\n    end\n\n    top_chars = sort(collect(char_counts), by=x->x[2], rev=true)\n    println(\"    Character distribution (top 5):\")\n    for (char, count) in top_chars[1:min(5, length(top_chars))]\n        println(\"      '$char': $count\")\n    end\n\n    return (\n        vertices = num_vertices,\n        avg_length = avg_length,\n        char_distribution = char_counts\n    )\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Analyze a few representative graphs","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"println(\"Analyzing graph structures:\")\n\nfor n in [3, 4]\n    test_text = \"The quick brown fox jumps over the lazy dog\"\n    if length(test_text) >= n\n        graph = Mycelia.string_to_ngram_graph(s=test_text, n=n)\n        analyze_graph_structure(graph, \"$(n)-gram graph of: \\\"$test_text\\\"\")\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/#Tutorial-Summary-and-Conclusions","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Tutorial Summary and Conclusions","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"Summarize what we've learned and provide guidance for next steps.","category":"page"},{"location":"generated/tutorials/09_round_trip_01_string_graphs/","page":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","title":"Round-Trip Tutorial 1: String Data → String Graphs → Reconstruction","text":"println(\"\\n\" * \"=\"^80)\nprintln(\"TUTORIAL SUMMARY AND CONCLUSIONS\")\nprintln(\"=\"^80)\n\nprintln(\"\\\\n✅ SUCCESSFUL COMPLETION OF STRING GRAPH ROUND-TRIP WORKFLOW:\")\nprintln(\"  1. Data Preparation: Created diverse string datasets\")\nprintln(\"  2. Graph Construction: Built n-gram graphs with various parameters\")\nprintln(\"  3. Assembly Process: Reconstructed strings from graph representations\")\nprintln(\"  4. Quality Assessment: Evaluated reconstruction accuracy\")\nprintln(\"  5. Performance Analysis: Measured efficiency and scaling behavior\")\nprintln(\"  6. Real-world Application: Applied to DNA sequence analysis\")\n\nprintln(\"\\\\n📊 KEY FINDINGS:\")\nprintln(\"  • String graphs provide effective compression of repetitive text\")\nprintln(\"  • Reconstruction quality depends on n-gram size and text complexity\")\nprintln(\"  • Success rate: $(round(quality_metrics.success_rate * 100, digits=1))%\")\nprintln(\"  • Average similarity: $(round(quality_metrics.average_similarity, digits=3))\")\nprintln(\"  • Memory usage scales with unique n-gram count\")\n\nprintln(\"\\\\n💡 INSIGHTS:\")\nprintln(\"  • Larger n-grams provide more specificity but less compression\")\nprintln(\"  • Highly repetitive sequences achieve better compression ratios\")\nprintln(\"  • Unicode text support enables international language analysis\")\nprintln(\"  • String graphs are foundation for more complex biological graphs\")\n\nprintln(\"\\\\n🔄 ROUND-TRIP WORKFLOW VALIDATED:\")\nprintln(\"  Raw String Data → N-gram Graph → Assembled Strings\")\nprintln(\"  ✓ Input data successfully processed\")\nprintln(\"  ✓ Graph construction completed\")\nprintln(\"  ✓ Assembly operations performed\")\nprintln(\"  ✓ Quality metrics calculated\")\nprintln(\"  ✓ Results validated and analyzed\")\n\nprintln(\"\\\\n🚀 NEXT STEPS:\")\nprintln(\"  • Tutorial 2: String data → N-gram graphs → String graphs\")\nprintln(\"  • Tutorial 3: FASTA sequences → Sequence graphs → Reconstruction\")\nprintln(\"  • Tutorial 4: FASTA sequences → K-mer graphs → Sequence graphs\")\nprintln(\"  • Tutorial 5: FASTQ sequences → FASTQ graphs (direct quality-aware)\")\nprintln(\"  • Tutorial 6: FASTQ sequences → Qualmer graphs → FASTQ graphs\")\n\nprintln(\"\\\\n📚 LEARNING OUTCOMES ACHIEVED:\")\nprintln(\"  ✓ Understand string graph construction and reconstruction\")\nprintln(\"  ✓ Perform quality assessment with similarity metrics\")\nprintln(\"  ✓ Analyze computational performance and memory usage\")\nprintln(\"  ✓ Apply string graphs to real-world text analysis\")\nprintln(\"  ✓ Evaluate trade-offs between compression and accuracy\")\n\nprintln(\"\\\\n\" * \"=\"^80)\nprintln(\"Ready to proceed to Tutorial 2: N-gram to String Graph Workflow!\")\nprintln(\"=\"^80)","category":"page"},{"location":"api/#API-Documentation","page":"Legacy API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Welcome to the Mycelia API documentation! This guide organizes both implemented functions and planned features by biological workflows. Mycelia provides substantial functionality for bioinformatics analysis with extensive tool integration, while continuing to expand with experimental algorithms and additional features.","category":"page"},{"location":"api/#Quick-Start","page":"Legacy API Documentation","title":"🧬 Quick Start","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"New to Mycelia? Start with our workflow-based guides:","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Basic Workflows - Common analysis patterns\nFunction Index - Alphabetical function list\nParameter Guide - Common parameters explained","category":"page"},{"location":"api/#By-Workflow-Stage","page":"Legacy API Documentation","title":"📋 By Workflow Stage","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Follow the typical bioinformatics analysis workflow:","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Pages = [\n    \"api/workflows/data-acquisition.md\",\n    \"api/workflows/quality-control.md\", \n    \"api/workflows/sequence-analysis.md\",\n    # \"api/workflows/genome-assembly.md\",\n    # \"api/workflows/assembly-validation.md\",\n    # \"api/workflows/gene-annotation.md\",\n    # \"api/workflows/comparative-genomics.md\",\n    # \"api/workflows/visualization.md\"\n]\nDepth = 2","category":"page"},{"location":"api/#1.-[Data-Acquisition-and-Simulation](api/workflows/data-acquisition.md)","page":"Legacy API Documentation","title":"1. Data Acquisition & Simulation","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Download genomic data from public databases and simulate synthetic datasets for testing.","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Working Functions: download_genome_by_accession, simulate_pacbio_reads, simulate_nanopore_reads","category":"page"},{"location":"api/#2.-[Quality-Control-and-Preprocessing](api/workflows/quality-control.md)","page":"Legacy API Documentation","title":"2. Quality Control & Preprocessing","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Assess and improve sequencing data quality before analysis.","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Working Functions: analyze_fastq_quality, calculate_gc_content, assess_duplication_rates, qc_filter_short_reads_fastp, qc_filter_long_reads_filtlong, trim_galore_paired   Planned: filter_by_quality, per-base quality visualization","category":"page"},{"location":"api/#3.-[Sequence-Analysis-and-K-mers](api/workflows/sequence-analysis.md)","page":"Legacy API Documentation","title":"3. Sequence Analysis & K-mers","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Analyze sequence composition, count k-mers, and extract genomic features.","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Working Functions: count_canonical_kmers, jaccard_distance, kmer_counts_to_js_divergence   Planned: kmer_frequency_spectrum, estimate_genome_size","category":"page"},{"location":"api/#4.-Genome-Assembly-*(planned)*","page":"Legacy API Documentation","title":"4. Genome Assembly (planned)","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Assemble genomes from sequencing reads using various approaches.","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Working Functions: assemble_metagenome_megahit, assemble_metagenome_metaspades (external tools)   Experimental: Graph-based assembly framework   Planned: assemble_genome, polish_assembly","category":"page"},{"location":"api/#5.-Assembly-Validation","page":"Legacy API Documentation","title":"5. Assembly Validation","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Validate and assess the quality of genome assemblies.","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Working Functions: assess_assembly_quality, validate_assembly, run_quast, run_busco, run_mummer, CheckM/CheckM2 integration   Planned: Mauve integration","category":"page"},{"location":"api/#6.-Gene-Annotation","page":"Legacy API Documentation","title":"6. Gene Annotation","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Predict genes and assign functional annotations.","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Working Functions: Pyrodigal, BLAST+, MMSeqs2, TransTerm, tRNAscan-SE, MLST integrations   Planned: GO term analysis, Reactome pathway analysis, PDB integration via UniRef annotations","category":"page"},{"location":"api/#7.-Comparative-Genomics-*(planned)*","page":"Legacy API Documentation","title":"7. Comparative Genomics (planned)","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Compare genomes, build pangenomes, and construct phylogenetic trees.","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Working Functions: analyze_pangenome_kmers, build_genome_distance_matrix   Planned: construct_phylogeny, calculate_synteny","category":"page"},{"location":"api/#8.-Visualization-and-Reporting","page":"Legacy API Documentation","title":"8. Visualization & Reporting","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Create plots, figures, and reports for analysis results.","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Working Functions: plot_kmer_frequency_spectra, visualize_genome_coverage, plot_embeddings, plot_taxa_abundances, coverage plots, taxonomic visualizations   Planned: Per-base quality plots, assembly statistics visualization, phylogenetic tree plotting","category":"page"},{"location":"api/#By-Data-Type","page":"Legacy API Documentation","title":"📁 By Data Type","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Working with specific file formats and data structures:","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"<!– Data type documentation planned for future releases","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Pages = [\n    \"api/data-types/fasta-fastq.md\",\n    \"api/data-types/assemblies.md\",\n    \"api/data-types/annotations.md\",\n    \"api/data-types/alignments.md\",\n    \"api/data-types/trees.md\"\n]\nDepth = 2","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"–>","category":"page"},{"location":"api/#FASTA/FASTQ-Files-*(planned)*","page":"Legacy API Documentation","title":"FASTA/FASTQ Files (planned)","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Reading, writing, and manipulating sequence files.","category":"page"},{"location":"api/#Assembly-Files-*(planned)*","page":"Legacy API Documentation","title":"Assembly Files (planned)","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Working with contigs, scaffolds, and assembly statistics.","category":"page"},{"location":"api/#Annotation-Files-*(planned)*","page":"Legacy API Documentation","title":"Annotation Files (planned)","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Handling GFF3, GenBank, and other annotation formats.","category":"page"},{"location":"api/#Alignment-Files-*(planned)*","page":"Legacy API Documentation","title":"Alignment Files (planned)","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Processing BAM/SAM files and alignment results.","category":"page"},{"location":"api/#Phylogenetic-Trees-*(planned)*","page":"Legacy API Documentation","title":"Phylogenetic Trees (planned)","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Tree construction, manipulation, and visualization.","category":"page"},{"location":"api/#By-Analysis-Goal","page":"Legacy API Documentation","title":"🎯 By Analysis Goal","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Cross-cutting concerns and specific use cases:","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Pages = [\n    \"api/examples/basic-workflows.md\",\n    \"api/examples/advanced-usage.md\",\n    \"api/quick-reference/function-index.md\",\n    \"api/quick-reference/parameter-guide.md\"\n]\nDepth = 2","category":"page"},{"location":"api/#[Basic-Workflows](api/examples/basic-workflows.md)","page":"Legacy API Documentation","title":"Basic Workflows","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Complete examples for common analysis tasks.","category":"page"},{"location":"api/#[Advanced-Usage](api/examples/advanced-usage.md)","page":"Legacy API Documentation","title":"Advanced Usage","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Complex workflows and optimization techniques.","category":"page"},{"location":"api/#[Function-Index](api/quick-reference/function-index.md)","page":"Legacy API Documentation","title":"Function Index","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Alphabetical listing of all functions with brief descriptions.","category":"page"},{"location":"api/#[Parameter-Guide](api/quick-reference/parameter-guide.md)","page":"Legacy API Documentation","title":"Parameter Guide","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Common parameters and their usage across functions.","category":"page"},{"location":"api/#Finding-What-You-Need","page":"Legacy API Documentation","title":"🔍 Finding What You Need","text":"","category":"section"},{"location":"api/#By-Task","page":"Legacy API Documentation","title":"By Task","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"\"I want to assemble a genome\" → Genome Assembly (planned)\n\"I need to validate my assembly\" → Assembly Validation (planned)\n\"I want to compare genomes\" → Comparative Genomics (planned)\n\"I need to check data quality\" → Quality Control","category":"page"},{"location":"api/#By-Data-Type-2","page":"Legacy API Documentation","title":"By Data Type","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"\"I have FASTQ files\" → FASTA/FASTQ Files (planned)\n\"I have assembly contigs\" → Assembly Files (planned)\n\"I have gene annotations\" → Annotation Files (planned)","category":"page"},{"location":"api/#By-Experience-Level","page":"Legacy API Documentation","title":"By Experience Level","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Beginner → Basic Workflows\nIntermediate → Workflow-specific guides\nAdvanced → Advanced Usage","category":"page"},{"location":"api/#Usage-Patterns","page":"Legacy API Documentation","title":"💡 Usage Patterns","text":"","category":"section"},{"location":"api/#Function-Documentation-Format","page":"Legacy API Documentation","title":"Function Documentation Format","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Each function is documented with:","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"\"\"\"\n    function_name(required_param, optional_param=\"default\")\n\nBrief description of what the function does.\n\n## Purpose\nWhen and why to use this function in your workflow.\n\n## Arguments\n- `required_param`: Description and expected data type\n- `optional_param`: Description, default value, and alternatives\n\n## Returns\nDescription of return value and structure.\n\n## Examples","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"julia","category":"page"},{"location":"api/#Basic-usage","page":"Legacy API Documentation","title":"Basic usage","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"result = function_name(\"input.fasta\")","category":"page"},{"location":"api/#Advanced-usage-with-options","page":"Legacy API Documentation","title":"Advanced usage with options","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"result = functionname(\"input.fasta\",                        optionalparam=\"custom_value\",                       threads=4)","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"\n## Related Functions\n- [`related_function`](@ref) - What it does\n- [`workflow_next_step`](@ref) - Next step in workflow\n\n## Performance Notes\n- Memory usage: ~X GB for typical datasets\n- Runtime: ~X minutes for Y-sized genomes\n- Scaling: Linear/quadratic with input size\n\n## See Also\n- [Workflow Guide](../workflows/relevant-workflow.md)\n- [Data Type Guide](../data-types/relevant-type.md)\n\"\"\"","category":"page"},{"location":"api/#Cross-References","page":"Legacy API Documentation","title":"Cross-References","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Functions are linked to:","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Workflow context - Where they fit in analysis pipelines\nRelated functions - What to use before/after\nData types - What formats they accept/produce\nExamples - Real usage scenarios","category":"page"},{"location":"api/#Integration-with-Tutorials","page":"Legacy API Documentation","title":"🚀 Integration with Tutorials","text":"","category":"section"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"This API documentation integrates with the tutorial system:","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"Tutorials show complete workflows with explanation\nAPI docs provide detailed function reference\nExamples bridge the gap with focused use cases","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"For hands-on learning, see the Tutorials which use these functions in complete bioinformatics workflows.","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"","category":"page"},{"location":"api/","page":"Legacy API Documentation","title":"Legacy API Documentation","text":"This documentation is automatically generated from function docstrings and organized for biological workflows. Functions are tested through the tutorial system to ensure accuracy.","category":"page"},{"location":"api/workflows/quality-control/#Quality-Control-and-Preprocessing","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"Functions for assessing and improving sequencing data quality before downstream analysis.","category":"page"},{"location":"api/workflows/quality-control/#Overview","page":"Quality Control & Preprocessing","title":"Overview","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"Quality control is essential for reliable bioinformatics results. Mycelia integrates with external QC tools and is developing native Julia implementations for:","category":"page"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"External tool integration for quality filtering (fastp, filtlong, trim_galore)\nBasic FASTQ file operations (reading/writing)\nPlanned features: Native quality assessment, contamination detection, and reporting","category":"page"},{"location":"api/workflows/quality-control/#Common-Workflows","page":"Quality Control & Preprocessing","title":"Common Workflows","text":"","category":"section"},{"location":"api/workflows/quality-control/#Currently-Available-(via-External-Tools)","page":"Quality Control & Preprocessing","title":"Currently Available (via External Tools)","text":"","category":"section"},{"location":"api/workflows/quality-control/#Quality-Filtering","page":"Quality Control & Preprocessing","title":"Quality Filtering","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Short read QC with fastp\nMycelia.qc_filter_short_reads_fastp(\n    input_file=\"reads.fastq\",\n    output_file=\"filtered.fastq\"\n)\n\n# Long read QC with fastplong\nMycelia.qc_filter_long_reads_fastplong(\n    input_file=\"long_reads.fastq\",\n    output_file=\"filtered_long.fastq\"\n)\n\n# Long read QC with filtlong\nMycelia.qc_filter_long_reads_filtlong(\n    input_file=\"long_reads.fastq\",\n    output_file=\"filtered_long.fastq\",\n    min_length=1000,\n    min_mean_q=7\n)\n\n# Paired-end trimming with trim_galore\nMycelia.trim_galore_paired(\n    R1=\"reads_R1.fastq\",\n    R2=\"reads_R2.fastq\",\n    output_dir=\"trimmed/\"\n)","category":"page"},{"location":"api/workflows/quality-control/#Planned-Native-Implementations","page":"Quality Control & Preprocessing","title":"Planned Native Implementations","text":"","category":"section"},{"location":"api/workflows/quality-control/#1.-Basic-Quality-Assessment-(planned)","page":"Quality Control & Preprocessing","title":"1. Basic Quality Assessment (planned)","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Analyze FASTQ quality\nquality_stats = Mycelia.analyze_fastq_quality(\"reads.fastq\")\n\n# Generate quality report\nquality_report = Mycelia.generate_quality_report(quality_stats)","category":"page"},{"location":"api/workflows/quality-control/#2.-Read-Preprocessing-(planned)","page":"Quality Control & Preprocessing","title":"2. Read Preprocessing (planned)","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Quality trimming and filtering\nclean_reads = Mycelia.preprocess_reads(\n    \"raw_reads.fastq\",\n    min_quality=20,\n    min_length=1000,\n    trim_ends=true\n)","category":"page"},{"location":"api/workflows/quality-control/#3.-Contamination-Removal-(planned)","page":"Quality Control & Preprocessing","title":"3. Contamination Removal (planned)","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Remove host contamination\ndecontaminated_reads = Mycelia.remove_contamination(\n    \"reads.fastq\",\n    reference_genome=\"host_genome.fasta\",\n    output=\"clean_reads.fastq\"\n)","category":"page"},{"location":"api/workflows/quality-control/#Quality-Assessment","page":"Quality Control & Preprocessing","title":"Quality Assessment","text":"","category":"section"},{"location":"api/workflows/quality-control/#FASTQ-Quality-Analysis","page":"Quality Control & Preprocessing","title":"FASTQ Quality Analysis","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"Note: The functions in this section and below are planned but not yet implemented.  They represent the intended API design for native Julia quality control functionality. Currently, use the external tool wrappers shown above for quality control tasks.","category":"page"},{"location":"api/workflows/quality-control/#Mycelia.analyze_fastq_quality","page":"Quality Control & Preprocessing","title":"Mycelia.analyze_fastq_quality","text":"analyze_fastq_quality(fastq_file::String)\n\nAnalyzes quality metrics for a FASTQ file.\n\nCalculates comprehensive quality statistics including read count, quality scores, length distribution, GC content, and quality threshold percentages.\n\nArguments\n\nfastq_file: Path to FASTQ file (can be gzipped)\n\nReturns\n\nFastqQualityResults with the following fields:\n\nn_reads: Total number of reads\nmean_quality: Average Phred quality score across all reads\nmean_length: Average read length\ngc_content: GC content percentage\nquality_distribution: QualityDistribution with Q20+, Q30+, Q40+ percentages\n\nExample\n\nquality_stats = Mycelia.analyze_fastq_quality(\"reads.fastq\")\nprintln(\"Total reads: $(quality_stats.n_reads)\")\nprintln(\"Mean quality: $(quality_stats.mean_quality)\")\nprintln(\"Q30+ reads: $(quality_stats.quality_distribution.q30_percent)%\")\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– calculateperbasequality, calculatepersequencequality, assessqualitydegradation not yet implemented as documented –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-Comprehensive-Quality-Analysis","page":"Quality Control & Preprocessing","title":"Example: Comprehensive Quality Analysis","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Analyze quality across multiple metrics\nquality_data = Mycelia.analyze_fastq_quality(\"reads.fastq\")\n\n# Access quality metrics\nprintln(\"Total reads: $(quality_data.n_reads)\")\nprintln(\"Mean quality: $(quality_data.mean_quality)\")\nprintln(\"Mean length: $(quality_data.mean_length)\")\nprintln(\"GC content: $(quality_data.gc_content)%\")\n\n# Quality score distribution\nquality_dist = quality_data.quality_distribution\nprintln(\"Q20+ reads: $(quality_dist.q20_percent)%\")\nprintln(\"Q30+ reads: $(quality_dist.q30_percent)%\")","category":"page"},{"location":"api/workflows/quality-control/#Sequence-Composition-Analysis","page":"Quality Control & Preprocessing","title":"Sequence Composition Analysis","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– calculategccontent, analyzenucleotidecomposition, detectcompositionbias, calculatecomplexityscores not yet implemented as documented –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-Composition-Analysis","page":"Quality Control & Preprocessing","title":"Example: Composition Analysis","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Analyze sequence composition\ncomposition = Mycelia.analyze_nucleotide_composition(\"reads.fastq\")\n\n# Check for bias\nbias_detected = Mycelia.detect_composition_bias(composition)\nif bias_detected.has_bias\n    println(\"Composition bias detected:\")\n    println(\"  Type: $(bias_detected.bias_type)\")\n    println(\"  Severity: $(bias_detected.severity)\")\n    println(\"  Affected positions: $(bias_detected.positions)\")\nend","category":"page"},{"location":"api/workflows/quality-control/#Read-Length-Analysis","page":"Quality Control & Preprocessing","title":"Read Length Analysis","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– calculatereadlengthdistribution, analyzelengthuniformity, detectlength_artifacts not yet implemented as documented –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-Length-Distribution-Analysis","page":"Quality Control & Preprocessing","title":"Example: Length Distribution Analysis","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Analyze read length characteristics\nlength_stats = Mycelia.calculate_read_length_distribution(\"reads.fastq\")\n\nprintln(\"Read length statistics:\")\nprintln(\"  Mean: $(length_stats.mean)\")\nprintln(\"  Median: $(length_stats.median)\")\nprintln(\"  Min: $(length_stats.minimum)\")\nprintln(\"  Max: $(length_stats.maximum)\")\nprintln(\"  Std Dev: $(length_stats.std)\")\n\n# Check for length artifacts\nartifacts = Mycelia.detect_length_artifacts(length_stats)\nif !isempty(artifacts)\n    println(\"Length artifacts detected: $(length(artifacts))\")\nend","category":"page"},{"location":"api/workflows/quality-control/#Preprocessing-and-Filtering","page":"Quality Control & Preprocessing","title":"Preprocessing and Filtering","text":"","category":"section"},{"location":"api/workflows/quality-control/#Quality-Based-Filtering","page":"Quality Control & Preprocessing","title":"Quality-Based Filtering","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– filterbyquality, trimlowqualityends, removelowqualityreads, adaptivequalityfiltering not yet implemented as individual functions –>","category":"page"},{"location":"api/workflows/quality-control/#Mycelia.qc_filter_short_reads_fastp","page":"Quality Control & Preprocessing","title":"Mycelia.qc_filter_short_reads_fastp","text":"qc_filter_short_reads_fastp(\n;\n    forward_reads,\n    reverse_reads,\n    out_forward,\n    out_reverse,\n    report_title,\n    html,\n    json,\n    enable_dedup\n)\n\n\nPerform quality control (QC) filtering and trimming on paired-end short-read FASTQ files using fastp.\n\nArguments\n\nforward_reads::String: Path to the forward (R1) FASTQ file.\nreverse_reads::String: Path to the reverse (R2) FASTQ file.\nout_forward::String: Output path for filtered forward reads (auto-generated if not specified).\nout_reverse::String: Output path for filtered reverse reads (auto-generated if not specified).\nreport_title::String: Title for the HTML/JSON report (auto-generated if not specified).\nhtml::String: Output path for HTML report (auto-generated if not specified).\njson::String: Output path for JSON report (auto-generated if not specified).\nenable_dedup::Union{Bool,Nothing}: Control deduplication behavior. If true, forces deduplication with memory-aware settings. If false, disables deduplication. If nothing (default), uses automatic logic based on file size and available memory.\n\nReturns\n\nNamed tuple containing paths to: (out_forward, out_reverse, json, html)\n\nDetails\n\nThis function uses fastp to perform quality control, adapter trimming, and optional deduplication on paired-end reads.\n\nSmart Deduplication Logic\n\nThe function includes intelligent memory management for deduplication:\n\nUser Control: Set enable_dedup=true to force deduplication, or enable_dedup=false to disable it.\nAutomatic Mode: When enable_dedup=nothing (default), the function:\nSkips deduplication for small files (< 100MB total) for efficiency\nFor larger files, enables deduplication if sufficient memory is available\nMemory-Aware Settings: Automatically adjusts fastp's --dup_calc_accuracy based on available system memory:\nDefault: Level 3 (4GB memory) if sufficient memory available\nFallback: Level 2 (2GB memory) or Level 1 (1GB memory) if needed\nDisables deduplication if < 1GB memory available\n\nThis ensures the process won't be killed due to out-of-memory conditions while maintaining deduplication benefits when feasible.\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/quality-control/#Mycelia.qc_filter_long_reads_fastplong","page":"Quality Control & Preprocessing","title":"Mycelia.qc_filter_long_reads_fastplong","text":"qc_filter_long_reads_fastplong(\n;\n    in_fastq,\n    report_title,\n    out_fastq,\n    html_report,\n    json_report,\n    min_length,\n    max_length\n)\n\n\nPerform QC filtering on long-read FASTQ files using fastplong.\n\nArguments\n\nin_fastq::String: Path to the input FASTQ file.\nout_fastq::String: Path to the output FASTQ file.\nquality_threshold::Int: Minimum average quality to retain a read (default 10).\nmin_length::Int: Minimum read length (default 1000).\nmax_length::Int=0: Maximum read length (default 0, no maximum).\n\nReturns\n\nString: Path to the filtered FASTQ file.\n\nDetails\n\nThis function uses fastplong to filter long reads based on quality and length criteria. It is optimized for Oxford Nanopore, PacBio, or similar long-read datasets.\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/quality-control/#Mycelia.qc_filter_long_reads_filtlong","page":"Quality Control & Preprocessing","title":"Mycelia.qc_filter_long_reads_filtlong","text":"qc_filter_long_reads_filtlong(\n;\n    in_fastq,\n    out_fastq,\n    min_mean_q,\n    keep_percent\n)\n\n\nFilter and process long reads from a FASTQ file using Filtlong.\n\nThis function filters long sequencing reads based on quality and length criteria,  then compresses the output using pigz.\n\nArguments\n\nin_fastq::String: Path to the input FASTQ file.\nout_fastq::String: Path to the output filtered and compressed FASTQ file.   Defaults to the input filename with \".filtlong.fq.gz\" appended.\nmin_mean_q::Int: Minimum mean quality score for reads to be kept. Default is 20.\nkeep_percent::Int: Percentage of reads to keep after filtering. Default is 95.\n\nReturns\n\nout_fastq\n\nDetails\n\nThis function uses Filtlong to filter long reads and pigz for compression. It requires the Bioconda environment for Filtlong to be set up, which is handled internally.\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/quality-control/#Mycelia.trim_galore_paired","page":"Quality Control & Preprocessing","title":"Mycelia.trim_galore_paired","text":"trim_galore_paired(; forward_reads, reverse_reads, outdir)\n\n\nTrim paired-end FASTQ reads using Trim Galore, a wrapper around Cutadapt and FastQC.\n\nArguments\n\nforward_reads::String: Path to forward reads FASTQ file\nreverse_reads::String: Path to reverse reads FASTQ file\noutdir::String: Output directory for trimmed files\n\nReturns\n\nTuple{String, String}: Paths to trimmed forward and reverse read files\n\nDependencies\n\nRequires trim_galore conda environment\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/quality-control/#Example:-Quality-Filtering","page":"Quality Control & Preprocessing","title":"Example: Quality Filtering","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Filter reads by quality thresholds\nfiltered_reads = Mycelia.filter_by_quality(\n    \"reads.fastq\",\n    min_mean_quality=25,\n    min_length=1000,\n    max_n_percent=5\n)\n\n# Save filtered reads\nMycelia.write_fastq(\"filtered_reads.fastq\", filtered_reads)\n\n# Report filtering statistics\nprintln(\"Original reads: $(Mycelia.count_reads(\"reads.fastq\"))\")\nprintln(\"Filtered reads: $(length(filtered_reads))\")\nprintln(\"Retention rate: $(length(filtered_reads) / Mycelia.count_reads(\"reads.fastq\") * 100)%\")","category":"page"},{"location":"api/workflows/quality-control/#Adapter-and-Contamination-Removal","page":"Quality Control & Preprocessing","title":"Adapter and Contamination Removal","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– removeadapters, detectadaptercontamination, removehostcontamination, removevectorcontamination not yet implemented as individual functions Adapter removal available through trimgalore_paired and QC filtering functions –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-Adapter-Removal","page":"Quality Control & Preprocessing","title":"Example: Adapter Removal","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Detect and remove adapters\nadapter_results = Mycelia.detect_adapter_contamination(\"reads.fastq\")\n\nif adapter_results.contamination_detected\n    println(\"Adapter contamination detected:\")\n    println(\"  Adapter type: $(adapter_results.adapter_type)\")\n    println(\"  Contamination rate: $(adapter_results.contamination_rate)%\")\n    \n    # Remove adapters\n    clean_reads = Mycelia.remove_adapters(\n        \"reads.fastq\",\n        adapter_sequences=adapter_results.adapter_sequences,\n        min_overlap=10\n    )\n    \n    Mycelia.write_fastq(\"adapter_trimmed.fastq\", clean_reads)\nend","category":"page"},{"location":"api/workflows/quality-control/#Length-Based-Filtering","page":"Quality Control & Preprocessing","title":"Length-Based Filtering","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– filterbylength, trimtolength, removeshortreads, normalizereadlengths not yet implemented as individual functions –>","category":"page"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– Note: Length-based filtering functions are not yet implemented as individual functions.      The fastp and filtlong functions above also perform length filtering as part of their quality control. –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-Length-Filtering","page":"Quality Control & Preprocessing","title":"Example: Length Filtering","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Filter reads by length criteria\nlength_filtered = Mycelia.filter_by_length(\n    \"reads.fastq\",\n    min_length=1000,\n    max_length=50000\n)\n\n# Normalize length distribution (optional)\nnormalized_reads = Mycelia.normalize_read_lengths(\n    length_filtered,\n    target_length=15000,\n    tolerance=0.2\n)","category":"page"},{"location":"api/workflows/quality-control/#Contamination-Detection","page":"Quality Control & Preprocessing","title":"Contamination Detection","text":"","category":"section"},{"location":"api/workflows/quality-control/#Host-Contamination","page":"Quality Control & Preprocessing","title":"Host Contamination","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– detecthostcontamination, removehostsequences, classifycontaminationsources not yet implemented as documented –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-Host-Contamination-Removal","page":"Quality Control & Preprocessing","title":"Example: Host Contamination Removal","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Screen for host contamination\ncontamination_results = Mycelia.detect_host_contamination(\n    \"reads.fastq\",\n    host_genome=\"human_genome.fasta\",\n    min_identity=0.9\n)\n\nprintln(\"Host contamination: $(contamination_results.contamination_rate)%\")\n\n# Remove contaminated reads\nclean_reads = Mycelia.remove_host_sequences(\n    \"reads.fastq\",\n    contamination_results.contaminated_reads\n)","category":"page"},{"location":"api/workflows/quality-control/#Vector-and-Adapter-Contamination","page":"Quality Control & Preprocessing","title":"Vector and Adapter Contamination","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– screenvectorcontamination, detectprimercontamination, removesyntheticsequences not yet implemented as documented –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-Vector-Screening","page":"Quality Control & Preprocessing","title":"Example: Vector Screening","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Screen for vector contamination\nvector_results = Mycelia.screen_vector_contamination(\n    \"reads.fastq\",\n    vector_database=\"vector_db.fasta\"\n)\n\nif vector_results.contamination_found\n    println(\"Vector contamination detected:\")\n    for hit in vector_results.contaminated_sequences\n        println(\"  $(hit.read_id): $(hit.vector_name)\")\n    end\nend","category":"page"},{"location":"api/workflows/quality-control/#Quality-Metrics-and-Reporting","page":"Quality Control & Preprocessing","title":"Quality Metrics and Reporting","text":"","category":"section"},{"location":"api/workflows/quality-control/#Standard-Quality-Metrics","page":"Quality Control & Preprocessing","title":"Standard Quality Metrics","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– calculatephredscores, assessbasecallaccuracy, calculateerrorrates, estimatesequencing_quality not yet implemented as documented –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-Quality-Metrics-Calculation","page":"Quality Control & Preprocessing","title":"Example: Quality Metrics Calculation","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Calculate comprehensive quality metrics\nquality_metrics = Mycelia.calculate_comprehensive_metrics(\"reads.fastq\")\n\n# Phred score analysis\nphred_analysis = Mycelia.calculate_phred_scores(quality_metrics)\nprintln(\"Mean Phred score: $(phred_analysis.mean_phred)\")\nprintln(\"Q30+ rate: $(phred_analysis.q30_rate)%\")\n\n# Error rate estimation\nerror_rates = Mycelia.calculate_error_rates(quality_metrics)\nprintln(\"Estimated error rate: $(error_rates.overall_error_rate)\")","category":"page"},{"location":"api/workflows/quality-control/#Quality-Control-Reports","page":"Quality Control & Preprocessing","title":"Quality Control Reports","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– generatequalityreport, createqualitydashboard, exportqualitymetrics not yet implemented as documented –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-Quality-Report-Generation","page":"Quality Control & Preprocessing","title":"Example: Quality Report Generation","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Generate comprehensive quality report\nquality_report = Mycelia.generate_quality_report(\n    \"reads.fastq\",\n    output_format=\"html\",\n    include_plots=true\n)\n\n# Save report\nMycelia.save_quality_report(quality_report, \"quality_report.html\")\n\n# Export metrics for further analysis\nmetrics_data = Mycelia.export_quality_metrics(quality_report, format=\"csv\")","category":"page"},{"location":"api/workflows/quality-control/#Specialized-Quality-Control","page":"Quality Control & Preprocessing","title":"Specialized Quality Control","text":"","category":"section"},{"location":"api/workflows/quality-control/#Platform-Specific-QC","page":"Quality Control & Preprocessing","title":"Platform-Specific QC","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– assesshifiquality, assessnanoporequality, assessilluminaquality not yet implemented as documented –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-HiFi-Specific-Quality-Control","page":"Quality Control & Preprocessing","title":"Example: HiFi-Specific Quality Control","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# HiFi-specific quality assessment\nhifi_qc = Mycelia.assess_hifi_quality(\"hifi_reads.fastq\")\n\nprintln(\"HiFi Quality Assessment:\")\nprintln(\"  Mean accuracy: $(hifi_qc.mean_accuracy)\")\nprintln(\"  Mean length: $(hifi_qc.mean_length)\")\nprintln(\"  Length N50: $(hifi_qc.length_n50)\")\nprintln(\"  Quality distribution:\")\nprintln(\"    Q20+: $(hifi_qc.q20_percent)%\")\nprintln(\"    Q30+: $(hifi_qc.q30_percent)%\")\nprintln(\"    Q40+: $(hifi_qc.q40_percent)%\")","category":"page"},{"location":"api/workflows/quality-control/#Application-Specific-QC","page":"Quality Control & Preprocessing","title":"Application-Specific QC","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– assessassemblyreadiness, assessannotationreadiness, assessvariantcalling_readiness not yet implemented as documented –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-Assembly-Readiness-Assessment","page":"Quality Control & Preprocessing","title":"Example: Assembly Readiness Assessment","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Check if reads are suitable for assembly\nassembly_readiness = Mycelia.assess_assembly_readiness(\"reads.fastq\")\n\nprintln(\"Assembly Readiness:\")\nprintln(\"  Overall score: $(assembly_readiness.overall_score)/10\")\nprintln(\"  Coverage estimate: $(assembly_readiness.estimated_coverage)x\")\nprintln(\"  Quality sufficient: $(assembly_readiness.quality_sufficient)\")\nprintln(\"  Length distribution: $(assembly_readiness.length_distribution_score)\")\n\nif !assembly_readiness.ready_for_assembly\n    println(\"Issues found:\")\n    for issue in assembly_readiness.issues\n        println(\"  - $(issue)\")\n    end\nend","category":"page"},{"location":"api/workflows/quality-control/#Visualization-and-Plotting","page":"Quality Control & Preprocessing","title":"Visualization and Plotting","text":"","category":"section"},{"location":"api/workflows/quality-control/#Quality-Plots","page":"Quality Control & Preprocessing","title":"Quality Plots","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– plotqualitydistribution, plotlengthdistribution, plotgccontentdistribution, plotbase_composition not yet implemented as individual functions Visualization functions available in Mycelia plotting module –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-Quality-Visualization","page":"Quality Control & Preprocessing","title":"Example: Quality Visualization","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Create quality visualization plots\nquality_plots = Mycelia.create_quality_plots(\"reads.fastq\")\n\n# Individual plots\nMycelia.plot_quality_distribution(quality_plots.quality_data, \n                         title=\"Per-Base Quality Scores\")\n\nMycelia.plot_length_distribution(quality_plots.length_data,\n                        title=\"Read Length Distribution\")\n\n# Combined quality dashboard\nquality_dashboard = Mycelia.plot_quality_dashboard(quality_plots)\nMycelia.save_plot(quality_dashboard, \"quality_dashboard.png\")","category":"page"},{"location":"api/workflows/quality-control/#Performance-Optimization","page":"Quality Control & Preprocessing","title":"Performance Optimization","text":"","category":"section"},{"location":"api/workflows/quality-control/#Memory-Efficient-Processing","page":"Quality Control & Preprocessing","title":"Memory-Efficient Processing","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"<!– streamqualityanalysis, processinchunks, parallelqualityassessment not yet implemented as documented –>","category":"page"},{"location":"api/workflows/quality-control/#Example:-Large-File-Processing","page":"Quality Control & Preprocessing","title":"Example: Large File Processing","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Process large files efficiently\nlarge_file_qc = Mycelia.stream_quality_analysis(\n    \"large_reads.fastq\",\n    chunk_size=10000,\n    parallel=true,\n    threads=8\n)\n\n# Memory-efficient filtering\nfiltered_output = Mycelia.process_in_chunks(\n    \"large_reads.fastq\",\n    \"filtered_reads.fastq\",\n    chunk_size=50000,\n    filter_function=quality_filter_function\n)","category":"page"},{"location":"api/workflows/quality-control/#Common-Issues-and-Solutions","page":"Quality Control & Preprocessing","title":"Common Issues and Solutions","text":"","category":"section"},{"location":"api/workflows/quality-control/#Low-Quality-Data","page":"Quality Control & Preprocessing","title":"Low Quality Data","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Identify quality issues\nquality_issues = Mycelia.diagnose_quality_issues(\"reads.fastq\")\n\nfor issue in quality_issues\n    println(\"Issue: $(issue.type)\")\n    println(\"  Description: $(issue.description)\")\n    println(\"  Severity: $(issue.severity)\")\n    println(\"  Recommendation: $(issue.recommendation)\")\nend","category":"page"},{"location":"api/workflows/quality-control/#Contamination-Problems","page":"Quality Control & Preprocessing","title":"Contamination Problems","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"# Comprehensive contamination screening\ncontamination_screen = Mycelia.comprehensive_contamination_screening(\n    \"reads.fastq\",\n    databases=[\"host\", \"vector\", \"adapter\", \"primer\"]\n)\n\n# Generate contamination report\ncontamination_report = Mycelia.generate_contamination_report(contamination_screen)","category":"page"},{"location":"api/workflows/quality-control/#Related-Functions","page":"Quality Control & Preprocessing","title":"Related Functions","text":"","category":"section"},{"location":"api/workflows/quality-control/#Data-Input/Output","page":"Quality Control & Preprocessing","title":"Data Input/Output","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"read_fastq - Read FASTQ files\nwrite_fastq - Write filtered FASTQ files\ncompress_fastq - Compress output files","category":"page"},{"location":"api/workflows/quality-control/#Downstream-Analysis","page":"Quality Control & Preprocessing","title":"Downstream Analysis","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"count_kmers - K-mer analysis of cleaned reads\nassemble_genome - Genome assembly with quality-controlled reads","category":"page"},{"location":"api/workflows/quality-control/#Visualization","page":"Quality Control & Preprocessing","title":"Visualization","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"plot_quality_metrics - Quality visualization\ncreate_quality_dashboard - Interactive quality dashboard","category":"page"},{"location":"api/workflows/quality-control/#Related-Workflows","page":"Quality Control & Preprocessing","title":"Related Workflows","text":"","category":"section"},{"location":"api/workflows/quality-control/#Previous-Steps","page":"Quality Control & Preprocessing","title":"Previous Steps","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"Data Acquisition - Obtaining sequencing data","category":"page"},{"location":"api/workflows/quality-control/#Next-Steps","page":"Quality Control & Preprocessing","title":"Next Steps","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"Sequence Analysis - K-mer analysis of quality-controlled reads\nGenome Assembly (planned) - Assembly with preprocessed reads","category":"page"},{"location":"api/workflows/quality-control/#See-Also","page":"Quality Control & Preprocessing","title":"See Also","text":"","category":"section"},{"location":"api/workflows/quality-control/","page":"Quality Control & Preprocessing","title":"Quality Control & Preprocessing","text":"Tutorial 2: Quality Control\nFASTA/FASTQ Data Types (planned)\nPerformance Optimization Guide","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"\"\"\"","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Assembly in 5 Minutes with Mycelia","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"This tutorial will take you from zero to assembled genome in under 5 minutes.\nNo prior experience with genome assembly required!\n\n# What You'll Learn\n- How to install and load Mycelia\n- How to perform your first genome assembly\n- How to interpret the results\n- How to save your assembly\n\n# Prerequisites\n- Julia installed (version 1.10 or higher)\n- About 1GB of free disk space\n- Internet connection (for package installation)\n\nLet's get started!\n\"\"\"","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% [markdown]","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Step-1:-Installation-(One-time-setup)","page":"-","title":"Step 1: Installation (One-time setup)","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"If you haven't installed Mycelia yet, run this cell:","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% Uncomment the next two lines if you need to install Mycelia import Pkg Pkg.add(url=\"https://github.com/cjprybol/Mycelia.git\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% [markdown]","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Step-2:-Load-Mycelia","page":"-","title":"Step 2: Load Mycelia","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Import the packages we'll need:","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%%","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"import Mycelia\nimport FASTX\nimport Pkg\nimport Statistics\nimport Kmers\n\nprintln(\"✅ Mycelia loaded successfully!\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% [markdown]","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Step-3:-Get-Some-Data-to-Assemble","page":"-","title":"Step 3: Get Some Data to Assemble","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"We'll use a small virus genome (phiX174) as our test case. It's only 5,386 base pairs, so it assembles quickly!","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% Download the reference genome","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"println(\"📥 Downloading test genome (phiX174)...\")\nreference_file = Mycelia.download_genome_by_accession(accession=\"NC_001422.1\")\nprintln(\"✅ Downloaded to: $reference_file\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Let's see what we downloaded","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"ref_record = first(Mycelia.open_fastx(reference_file))\nprintln(\"\\n📊 Reference genome info:\")\nprintln(\"  Name: \", FASTX.identifier(ref_record))\nprintln(\"  Length: \", length(FASTX.sequence(ref_record)), \" bp\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% [markdown]","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Step-4:-Simulate-Some-Sequencing-Reads","page":"-","title":"Step 4: Simulate Some Sequencing Reads","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"For this tutorial, we'll simulate some reads. In real life, you'd use actual sequencing data from your experiment.","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% Simulate PacBio-style long reads with realistic error rates","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"println(\"\\n🧬 Simulating sequencing reads...\")\nreads_file = Mycelia.simulate_pacbio_reads(\n    fasta=reference_file,\n    quantity=\"20x\"      # 20x coverage\n)\nprintln(\"✅ Created reads file: $reads_file\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Check the reads","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"reads = collect(Mycelia.open_fastx(reads_file))\nprintln(\"\\n📊 Simulated reads info:\")\nprintln(\"  Number of reads: \", length(reads))\nprintln(\"  Average length: \", round(Statistics.mean(length(FASTX.sequence(r)) for r in reads)), \" bp\")\nprintln(\"  Total bases: \", sum(length(FASTX.sequence(r)) for r in reads), \" bp\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% [markdown]","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Step-5:-Run-the-Assembly!","page":"-","title":"Step 5: Run the Assembly! 🚀","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"This is where the magic happens. Mycelia will automatically:","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Detect that you have FASTQ data with quality scores\nChoose optimal parameters\nBuild quality-aware graphs\nFind the best assembly path","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%%","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"println(\"\\n🔧 Starting probabilistic assembly...\")\nprintln(\"  Using intelligent assembly mode (automatic parameter selection)\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Record start time","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"start_time = time()","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Run the assembly","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"assembly_result = Mycelia.mycelia_assemble(\n    reads_file;\n    output_dir=\"my_first_assembly\",\n    max_k=51,  # Maximum k-mer size to try\n    memory_limit=4_000_000_000  # 4GB memory limit\n)","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Calculate elapsed time","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"elapsed = round(time() - start_time, digits=1)\nprintln(\"\\n✅ Assembly completed in $elapsed seconds!\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% [markdown]","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Step-6:-Check-Your-Results","page":"-","title":"Step 6: Check Your Results","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Let's see how well we did:","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% Load the assembled contigs - check what files were created","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"println(\"📁 Assembly files created:\")\nfor file in readdir(\"my_first_assembly\")\n    println(\"  - $file\")\nend","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Extract contigs from assembly result The assembly returns a dictionary with :final_assembly containing sequence strings","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"final_sequences = get(assembly_result, :final_assembly, String[])\nprintln(\"✅ Assembly produced $(length(final_sequences)) unique sequences\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Convert strings to FASTA records for further analysis","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"contigs = FASTX.FASTA.Record[]\nfor (i, seq) in enumerate(final_sequences)\n    if !isempty(seq)  # Skip empty sequences\n        record = FASTX.FASTA.Record(\"contig_$i\", seq)\n        push!(contigs, record)\n    end\nend\nprintln(\"✅ Created $(length(contigs)) FASTA contigs from assembly\")\n\nprintln(\"\\n📊 Assembly Results:\")\nprintln(\"  Number of contigs: \", length(contigs))","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Calculate basic statistics","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"contig_lengths = [length(FASTX.sequence(c)) for c in contigs]\ntotal_length = sum(contig_lengths)\nprintln(\"  Total length: \", total_length, \" bp\")\nprintln(\"  Longest contig: \", maximum(contig_lengths), \" bp\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Compare to reference","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"ref_length = length(FASTX.sequence(ref_record))\ncompleteness = round(100 * total_length / ref_length, digits=1)\nprintln(\"\\n🎯 Assembly completeness: $completeness%\")\n\nif length(contigs) == 1 && abs(total_length - ref_length) < 100\n    println(\"🌟 Perfect assembly! The genome was assembled into a single contig!\")\nelseif completeness > 95\n    println(\"🎉 Excellent assembly! Nearly complete genome recovered.\")\nelseif completeness > 80\n    println(\"👍 Good assembly! Most of the genome was recovered.\")\nelse\n    println(\"🔧 Assembly needs optimization. Try adjusting parameters.\")\nend","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% [markdown]","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Step-7:-Save-Your-Assembly","page":"-","title":"Step 7: Save Your Assembly","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Save the assembly for further analysis:","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% Save to a new file with a descriptive name","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"output_file = \"phiX174_mycelia_assembly.fasta\"\nif !isempty(contigs)\n    open(output_file, \"w\") do io\n        writer = FASTX.FASTA.Writer(io)\n        for contig in contigs\n            write(writer, contig)\n        end\n    end\n    println(\"\\n💾 Assembly saved to: $output_file\")\nelse\n    println(\"\\n⚠️  No contigs found in assembly result\")\nend","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% [markdown]","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Step-8:-Visualize-Assembly-Quality-(Optional)","page":"-","title":"Step 8: Visualize Assembly Quality (Optional)","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Let's create a simple visualization of our assembly:","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% Assembly quality analysis","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"println(\"\\n📈 Assembly Quality Analysis:\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Basic coverage check","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"println(\"📊 Coverage Analysis:\")\nprintln(\"  Input reads: $(length(reads)) reads\")\nprintln(\"  Output contigs: $(length(contigs)) contigs\")\n\nif !isempty(contigs)\n    total_assembled = sum(length(FASTX.sequence(c)) for c in contigs)\n    println(\"  Total assembled length: $total_assembled bp\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Compare to reference length","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"    ref_length = length(FASTX.sequence(ref_record))\n    recovery_rate = round(100 * total_assembled / ref_length, digits=1)\n    println(\"  Genome recovery rate: $recovery_rate%\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"K-mer analysis comparison (if assembly file was saved successfully)","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"    if isfile(output_file)\n        println(\"\\n🧬 K-mer Analysis:\")","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Count k-mers in reference","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"        ref_kmers = Mycelia.count_canonical_kmers(Kmers.DNAKmer{21}, reference_file)\n        println(\"  Reference unique 21-mers: \", length(ref_kmers))","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Count k-mers in assembly","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"        asm_kmers = Mycelia.count_canonical_kmers(Kmers.DNAKmer{21}, output_file)\n        println(\"  Assembly unique 21-mers: \", length(asm_kmers))","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Calculate k-mer recovery","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"        shared_kmers = length(intersect(keys(ref_kmers), keys(asm_kmers)))\n        kmer_recovery = round(100 * shared_kmers / length(ref_kmers), digits=1)\n        println(\"  K-mer recovery rate: $kmer_recovery%\")\n    else\n        println(\"  ⚠️  K-mer analysis skipped - assembly file not available\")\n    end\nelse\n    println(\"  ⚠️  No contigs produced - assembly may need debugging\")\nend","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% [markdown]","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Congratulations!","page":"-","title":"🎉 Congratulations!","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"You've just completed your first genome assembly with Mycelia!","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#What-Just-Happened?","page":"-","title":"What Just Happened?","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Mycelia's intelligent assembly:","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Analyzed your reads to determine optimal parameters\nBuilt quality-aware graphs preserving base quality information\nUsed probabilistic algorithms to find the best assembly path\nSelf-optimized through multiple k-mer sizes\nProduced a high-quality assembly automatically","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Next-Steps","page":"-","title":"Next Steps","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Now that you've seen Mycelia in action, you can:","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Try with your own data - Replace the simulated reads with your FASTQ file\nExplore different modes:\nmethod=:iterative for maximum accuracy\nmethod=:quality_aware for speed with good quality data\nLearn more:\nUnderstanding the algorithms\nChoosing assembly methods\nAdvanced tutorials","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Using-Your-Own-Data","page":"-","title":"Using Your Own Data","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"To use your own sequencing data, simply replace the read simulation step:","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"# Instead of simulating reads:\nreads_file = \"path/to/your/reads.fastq\"\n\n# Then run assembly as before:\nassembly_result = Mycelia.mycelia_assemble(reads_file)","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Getting-Help","page":"-","title":"Getting Help","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Check the FAQ for common questions and issues\nAsk questions in Discussions\nReport issues on GitHub","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"Happy assembling! 🧬","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"%% [markdown]","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/#Appendix:-Understanding-the-Output","page":"-","title":"Appendix: Understanding the Output","text":"","category":"section"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"The assembly process creates several files in the output directory:","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"final_assembly.fasta - Your assembled contigs\nassembly_summary.txt - Statistics about the assembly\nkmer_progression.txt - How the assembly progressed through k-mer sizes\ngraphs/ - Intermediate graph files (for debugging)","category":"page"},{"location":"generated/tutorials/00_assembly_in_5_minutes/","page":"-","title":"-","text":"The intelligent assembly typically tries several k-mer sizes (e.g., 21, 31, 41) and automatically stops when it finds the optimal assembly.","category":"page"},{"location":"strand-aware-graphs/#Strand-Aware-K-mer-Graph-Implementation","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"","category":"section"},{"location":"strand-aware-graphs/#Overview","page":"Strand-Aware K-mer Graph Implementation","title":"Overview","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"The next-generation sequence graph implementation introduces a crucial distinction between vertex representation and edge directionality that was missing in the original design. This addresses the biological reality of strand-specific transitions in genome assembly.","category":"page"},{"location":"strand-aware-graphs/#Key-Design-Principles","page":"Strand-Aware K-mer Graph Implementation","title":"Key Design Principles","text":"","category":"section"},{"location":"strand-aware-graphs/#1.-Canonical-Vertices,-Strand-Aware-Edges","page":"Strand-Aware K-mer Graph Implementation","title":"1. Canonical Vertices, Strand-Aware Edges","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Previous approach: Stored both k-mer and reverse complement as separate vertices","category":"page"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Memory inefficient (2x vertices)\nComplex graph topology\nDifficult to identify canonical paths","category":"page"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"New approach: Store only canonical k-mers as vertices, track strand in edges","category":"page"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Memory efficient (canonical representation)\nCleaner graph structure  \nStrand information preserved in edge metadata","category":"page"},{"location":"strand-aware-graphs/#2.-Biologically-Valid-Transitions","page":"Strand-Aware K-mer Graph Implementation","title":"2. Biologically Valid Transitions","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"The graph now enforces that edges represent biologically valid transitions where:","category":"page"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"The suffix of the source k-mer overlaps with the prefix of the destination k-mer\nStrand orientations are compatible for the transition\nBoth single-strand and double-strand modes are supported","category":"page"},{"location":"strand-aware-graphs/#3.-Two-Graph-Modes","page":"Strand-Aware K-mer Graph Implementation","title":"3. Two Graph Modes","text":"","category":"section"},{"location":"strand-aware-graphs/#SingleStrand-Mode","page":"Strand-Aware K-mer Graph Implementation","title":"SingleStrand Mode","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"For RNA, amino acids, or directional DNA analysis\nAll k-mers use forward orientation\nNo reverse complement consideration\nSuitable for: transcriptome assembly, RNA-seq, protein/proteome assembly, directional cDNA","category":"page"},{"location":"strand-aware-graphs/#DoubleStrand-Mode-(Default)","page":"Strand-Aware K-mer Graph Implementation","title":"DoubleStrand Mode (Default)","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"For standard DNA assembly\nK-mers converted to canonical representation\nStrand information tracked in coverage and edges\nReverse complement transitions allowed\nSuitable for: genome assembly, DNA-seq","category":"page"},{"location":"strand-aware-graphs/#Data-Structures","page":"Strand-Aware K-mer Graph Implementation","title":"Data Structures","text":"","category":"section"},{"location":"strand-aware-graphs/#StrandOrientation-Enum","page":"Strand-Aware K-mer Graph Implementation","title":"StrandOrientation Enum","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"@enum StrandOrientation Forward=true Reverse=false","category":"page"},{"location":"strand-aware-graphs/#KmerVertexData","page":"Strand-Aware K-mer Graph Implementation","title":"KmerVertexData","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"struct KmerVertexData\n    coverage::Vector{Tuple{Int, Int, StrandOrientation}}  # (obs_id, position, strand)\n    canonical_kmer::String  # Always canonical representation\nend","category":"page"},{"location":"strand-aware-graphs/#KmerEdgeData","page":"Strand-Aware K-mer Graph Implementation","title":"KmerEdgeData","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"struct KmerEdgeData\n    coverage::Vector{Tuple{Tuple{Int, Int, StrandOrientation}, Tuple{Int, Int, StrandOrientation}}}\n    weight::Float64\n    src_strand::StrandOrientation  # Required source orientation\n    dst_strand::StrandOrientation  # Required destination orientation\nend","category":"page"},{"location":"strand-aware-graphs/#Biological-Correctness","page":"Strand-Aware K-mer Graph Implementation","title":"Biological Correctness","text":"","category":"section"},{"location":"strand-aware-graphs/#Transition-Validation","page":"Strand-Aware K-mer Graph Implementation","title":"Transition Validation","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Each edge represents a transition that is valid only when:","category":"page"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Overlap constraint: suffix(srckmer) == prefix(dstkmer)\nStrand compatibility: orientations allow for proper base pairing\nCoverage support: observed in the sequence data","category":"page"},{"location":"strand-aware-graphs/#Example:-Valid-Transitions","page":"Strand-Aware K-mer Graph Implementation","title":"Example: Valid Transitions","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"For k=3, canonical k-mers \"ATC\" and \"TCG\":","category":"page"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Valid transitions:","category":"page"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"ATC(Forward) → TCG(Forward): \nATC  (suffix: TC)\n TCG (prefix: TC)  ✓ overlap matches\n= ATCG\nGAT(Reverse) → CGA(Reverse): \nATC  (RC of GAT, suffix: TC)\n TCG (RC of CGA, prefix: TC)  ✓ overlap matches  \n= ATCG","category":"page"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Invalid transitions:  ","category":"page"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"ATC(Forward) → GAT(Forward): \nATC  (suffix: TC)\nGAT  (prefix: GA)  ✗ TC ≠ GA, no overlap\nATC(Forward) → TCG(Reverse): \nATC  (suffix: TC)\nCGA  (RC of TCG, prefix: CG)  ✗ TC ≠ CG, wrong strand","category":"page"},{"location":"strand-aware-graphs/#Assembly-Implications","page":"Strand-Aware K-mer Graph Implementation","title":"Assembly Implications","text":"","category":"section"},{"location":"strand-aware-graphs/#Path-Finding","page":"Strand-Aware K-mer Graph Implementation","title":"Path Finding","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Shortest probability paths: distance ∝ -log(edge_weight)\nMaximum weight walks: follow highest coverage edges\nStrand-consistent paths: automatically enforced by edge constraints","category":"page"},{"location":"strand-aware-graphs/#Error-Correction","page":"Strand-Aware K-mer Graph Implementation","title":"Error Correction","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Quality-aware transitions: edges weighted by coverage and quality\nConsensus calling: multiple observations of same transition\nBubble detection: alternative paths with same src/dst vertices","category":"page"},{"location":"strand-aware-graphs/#Performance-Benefits","page":"Strand-Aware K-mer Graph Implementation","title":"Performance Benefits","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Memory efficiency: ~50% reduction vs. stranded vertex representation\nCleaner algorithms: canonical vertices simplify path operations\nType stability: all metadata is type-stable for performance","category":"page"},{"location":"strand-aware-graphs/#Migration-Path","page":"Strand-Aware K-mer Graph Implementation","title":"Migration Path","text":"","category":"section"},{"location":"strand-aware-graphs/#Legacy-Compatibility","page":"Strand-Aware K-mer Graph Implementation","title":"Legacy Compatibility","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"The legacy_to_next_graph() function converts old MetaGraphs format:","category":"page"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Converts stranded vertices to canonical representation\nMerges coverage from forward/reverse k-mer pairs\nCreates strand-aware edges with proper orientation metadata\nMaintains all original coverage information","category":"page"},{"location":"strand-aware-graphs/#Gradual-Adoption","page":"Strand-Aware K-mer Graph Implementation","title":"Gradual Adoption","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"New code uses build_kmer_graph_next()\nLegacy code continues working via compatibility layer\nTests validate both implementations during transition\nPerformance benchmarks guide optimization priorities","category":"page"},{"location":"strand-aware-graphs/#Future-Enhancements","page":"Strand-Aware K-mer Graph Implementation","title":"Future Enhancements","text":"","category":"section"},{"location":"strand-aware-graphs/#Phase-2-Algorithms","page":"Strand-Aware K-mer Graph Implementation","title":"Phase 2 Algorithms","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Now that we have proper strand-aware graphs, we can implement:","category":"page"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Probabilistic walks with strand-consistent transitions\nViterbi polishing using canonical representation\nBubble resolution algorithms\nRepeat detection and resolution","category":"page"},{"location":"strand-aware-graphs/#Advanced-Features","page":"Strand-Aware K-mer Graph Implementation","title":"Advanced Features","text":"","category":"section"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"Quality score integration in edge weights\nCoverage depth thresholds for edge filtering  \nGraph simplification algorithms\nInteractive visualization of strand-aware paths","category":"page"},{"location":"strand-aware-graphs/","page":"Strand-Aware K-mer Graph Implementation","title":"Strand-Aware K-mer Graph Implementation","text":"This foundation provides the correct biological semantics needed for sophisticated assembly algorithms while maintaining performance through type-stable, memory-efficient data structures.","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Tutorial-6:-FASTQ-Sequences-to-Qualmer-Graphs-and-Back","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"This tutorial demonstrates the round-trip workflow from FASTQ sequences through quality-aware k-mer (qualmer) graphs and back to reconstructed sequences. Qualmers incorporate both sequence information and quality scores for more accurate assembly decisions.","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Learning-Objectives","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"By the end of this tutorial, you will understand:","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"How to create qualmer graphs from FASTQ data\nHow quality scores influence k-mer confidence\nHow to perform quality-aware assembly using package functions\nHow to reconstruct sequences while preserving quality information\nThe advantages of quality-aware vs coverage-only assembly","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Setup-and-Imports","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Setup and Imports","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Following CLAUDE.md standards: only import top-level packages, use full namespacing","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"import Mycelia\nimport FASTX\nimport Graphs\nimport Test\nimport Statistics","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Part-1:-Understanding-Qualmers","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Part 1: Understanding Qualmers","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Qualmers are k-mers with associated quality information. When the same k-mer is observed multiple times with different quality scores, we calculate a joint probability that represents our confidence in that k-mer's correctness.","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Creating-Sample-FASTQ-Data-with-Varying-Quality","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Creating Sample FASTQ Data with Varying Quality","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"function create_sample_fastq_data()\n    # High-quality read\n    hq_seq = \"ATCGATCGATCGATCGATCG\"\n    hq_qual = \"IIIIIIIIIIIIIIIIIIII\"  ## Phred 40 (99.99% accuracy)\n\n    # Medium-quality read with overlap\n    mq_seq = \"GATCGATCGATCGATCGTAG\"\n    mq_qual = \"FFFFFFFFFFFFFFFFFF@@\"  ## Phred 37 (99.98%) with lower end\n\n    # Low-quality read with errors\n    lq_seq = \"GATCGATCGATCGATCGTAC\"  ## Error at end (C instead of G)\n    lq_qual = \"555555555555555555##\"  ## Phred 20 (99%) with very low end\n\n    # Create FASTQ records\n    records = [\n        FASTX.FASTQ.Record(\"read1\", hq_seq, hq_qual),\n        FASTX.FASTQ.Record(\"read2\", mq_seq, mq_qual),\n        FASTX.FASTQ.Record(\"read3\", lq_seq, lq_qual)\n    ]\n\n    return records\nend\n\nprintln(\"Creating sample FASTQ data with varying quality scores...\")\nfastq_records = create_sample_fastq_data()","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Display the records","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"for (i, record) in enumerate(fastq_records)\n    println(\"\\nRead $i:\")\n    println(\"  Sequence: \", String(FASTX.sequence(record)))\n    println(\"  Quality:  \", String(FASTX.quality(record)))\n    println(\"  Phred scores: \", FASTX.quality_scores(record))\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Part-2:-Building-Qualmer-Graphs","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Part 2: Building Qualmer Graphs","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Qualmer graphs combine k-mer information with quality scores to make more informed assembly decisions.","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Build-a-qualmer-graph-with-k7","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Build a qualmer graph with k=7","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"k = 7\nprintln(\"\\n\" * \"=\"^60)\nprintln(\"Building qualmer graph with k=$k...\")\n\nqualmer_graph = Mycelia.build_qualmer_graph(fastq_records; k=k, graph_mode=Mycelia.DoubleStrand)","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Examine graph properties","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"println(\"\\nQualmer graph statistics:\")\nprintln(\"  Number of vertices (unique k-mers): \", Graphs.nv(qualmer_graph))\nprintln(\"  Number of edges: \", Graphs.ne(qualmer_graph))","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Inspect-qualmer-properties","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Inspect qualmer properties","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Examining qualmer vertices and their properties:\")","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Get first few vertices to examine","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"for v in Iterators.take(Graphs.vertices(qualmer_graph), 5)\n    vertex_data = qualmer_graph[v]\n    println(\"\\nVertex $v:\")\n    println(\"  K-mer: \", vertex_data.kmer)\n    println(\"  Coverage: \", vertex_data.coverage)\n    println(\"  Mean quality: \", round(vertex_data.mean_quality, digits=2))\n    println(\"  Joint probability: \", round(vertex_data.joint_probability, digits=4))\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Part-3:-Quality-Aware-vs-Coverage-Only-Assembly","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Part 3: Quality-Aware vs Coverage-Only Assembly","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Let's compare how quality information affects assembly decisions.","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Find-high-confidence-paths-using-quality-information","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Find high-confidence paths using quality information","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Finding high-confidence paths through the qualmer graph...\")","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Get all vertices sorted by joint probability (confidence)","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"vertices_by_confidence = sort(collect(Graphs.vertices(qualmer_graph)),\n    by=v -> qualmer_graph[v].joint_probability, rev=true)\n\nprintln(\"\\nTop 5 most confident k-mers:\")\nfor v in vertices_by_confidence[1:min(5, length(vertices_by_confidence))]\n    vdata = qualmer_graph[v]\n    println(\"  \", vdata.kmer,\n            \" - Coverage: \", vdata.coverage,\n            \", Joint prob: \", round(vdata.joint_probability, digits=4),\n            \", Mean quality: \", round(vdata.mean_quality, digits=1))\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Compare-with-coverage-only-approach","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Compare with coverage-only approach","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"vertices_by_coverage = sort(collect(Graphs.vertices(qualmer_graph)),\n    by=v -> qualmer_graph[v].coverage, rev=true)\n\nprintln(\"\\nTop 5 highest coverage k-mers:\")\nfor v in vertices_by_coverage[1:min(5, length(vertices_by_coverage))]\n    vdata = qualmer_graph[v]\n    println(\"  \", vdata.kmer,\n            \" - Coverage: \", vdata.coverage,\n            \", Joint prob: \", round(vdata.joint_probability, digits=4),\n            \", Mean quality: \", round(vdata.mean_quality, digits=1))\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Part-4:-Quality-Aware-Path-Finding","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Part 4: Quality-Aware Path Finding","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Use the package function to find the most likely path through the graph.","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Find best starting vertex (highest confidence)","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"start_vertex = vertices_by_confidence[1]\nquality_path = Mycelia.find_quality_weighted_path(qualmer_graph, start_vertex)\n\nprintln(\"\\n\" * \"=\"^60)\nprintln(\"Quality-weighted path through graph:\")\nprintln(\"Path length: \", length(quality_path), \" vertices\")","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Show path k-mers and qualities","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"println(\"\\nPath details:\")\nfor (i, v) in enumerate(quality_path[1:min(10, length(quality_path))])\n    vdata = qualmer_graph[v]\n    println(\"  Step $i: \", vdata.kmer,\n            \" (prob: \", round(vdata.joint_probability, digits=3), \")\")\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Part-5:-Converting-to-Quality-Aware-BioSequence-Graph","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Part 5: Converting to Quality-Aware BioSequence Graph","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Convert the qualmer graph to a variable-length quality-aware sequence graph.","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Converting qualmer graph to quality-aware BioSequence graph...\")","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Convert to FASTQ graph (variable-length with quality)","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"fastq_graph = Mycelia.qualmer_graph_to_quality_biosequence_graph(qualmer_graph, k)\n\nprintln(\"\\nFASTQ graph statistics:\")\nprintln(\"  Number of vertices: \", Graphs.nv(fastq_graph))\nprintln(\"  Number of edges: \", Graphs.ne(fastq_graph))","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Examine simplified vertices","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"println(\"\\nExamining quality-aware sequence vertices:\")\nfor v in Iterators.take(Graphs.vertices(fastq_graph), 3)\n    vertex_data = fastq_graph[v]\n    println(\"\\nVertex $v:\")\n    println(\"  Sequence: \", vertex_data.sequence)\n    println(\"  Length: \", length(vertex_data.sequence))\n    println(\"  Quality scores: \", vertex_data.quality_scores[1:min(20, length(vertex_data.quality_scores))], \"...\")\n    println(\"  Mean quality: \", round(Statistics.mean(vertex_data.quality_scores), digits=1))\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Part-6:-Round-Trip-Reconstruction","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Part 6: Round-Trip Reconstruction","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Reconstruct FASTQ records from the quality-aware graph.","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Reconstructing FASTQ records from the graph...\")","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Extract paths and convert to FASTQ records","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"reconstructed_records = Mycelia.quality_biosequence_graph_to_fastq(fastq_graph, \"reconstructed\")\n\nprintln(\"\\nReconstructed \", length(reconstructed_records), \" FASTQ records\")","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Compare with original","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"println(\"\\nComparison with original reads:\")\nfor (i, (orig, recon)) in enumerate(zip(fastq_records[1:min(3, length(reconstructed_records))],\n                                        reconstructed_records[1:min(3, length(reconstructed_records))]))\n    orig_seq = String(FASTX.sequence(orig))\n    recon_seq = String(FASTX.sequence(recon))\n\n    println(\"\\nRead $i:\")\n    println(\"  Original:      \", orig_seq)\n    println(\"  Reconstructed: \", recon_seq)\n    println(\"  Match: \", orig_seq == recon_seq ? \"✓\" : \"✗\")\n\n    # Compare quality scores\n    orig_qual = FASTX.quality_scores(orig)\n    recon_qual = FASTX.quality_scores(recon)\n    println(\"  Original quality range: \", minimum(orig_qual), \"-\", maximum(orig_qual))\n    println(\"  Reconstructed quality range: \", minimum(recon_qual), \"-\", maximum(recon_qual))\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Part-7:-Error-Correction-Using-Quality-Information","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Part 7: Error Correction Using Quality Information","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Demonstrate how quality scores help identify and correct errors using package functions.","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Demonstrating quality-aware error correction...\")","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Create reads with a known error","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"error_reads = [\n    FASTX.FASTQ.Record(\"good1\", \"ATCGATCGATCG\", \"IIIIIIIIIIII\"),  ## High quality\n    FASTX.FASTQ.Record(\"good2\", \"TCGATCGATCGA\", \"IIIIIIIIIIII\"),  ## High quality\n    FASTX.FASTQ.Record(\"error\", \"TCGATCTATCGA\", \"IIIIII##IIII\"),  ## Error at low quality position\n]","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Build qualmer graph","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"error_graph = Mycelia.build_qualmer_graph(error_reads; k=5, graph_mode=Mycelia.SingleStrand)\n\nprintln(\"\\nAnalyzing k-mers around error position:\")","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"The error creates k-mers: GATCT (wrong) vs GATCG (correct)","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"for v in Graphs.vertices(error_graph)\n    vdata = error_graph[v]\n    kmer_str = String(vdata.kmer)\n    if occursin(\"GATC\", kmer_str)\n        println(\"  K-mer: \", kmer_str,\n                \" - Coverage: \", vdata.coverage,\n                \", Joint prob: \", round(vdata.joint_probability, digits=4))\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Use package function to identify potential errors","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"potential_errors = Mycelia.identify_potential_errors(error_graph)\nprintln(\"\\nPotential error k-mers identified: \", length(potential_errors))\n\nfor error_v in potential_errors\n    vdata = error_graph[error_v]\n    println(\"  Error k-mer: \", vdata.kmer,\n            \" - Coverage: \", vdata.coverage,\n            \", Quality: \", round(vdata.mean_quality, digits=1),\n            \", Confidence: \", round(vdata.joint_probability, digits=4))\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Part-8:-Advanced-Quality-Metrics","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Part 8: Advanced Quality Metrics","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Calculate assembly quality metrics using the package function.","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"metrics = Mycelia.calculate_assembly_quality_metrics(qualmer_graph)\n\nprintln(\"\\n\" * \"=\"^60)\nprintln(\"Assembly quality metrics:\")\nprintln(\"  Mean k-mer coverage: \", round(metrics.mean_coverage, digits=2))\nprintln(\"  Mean quality score: \", round(metrics.mean_quality, digits=1))\nprintln(\"  Mean k-mer confidence: \", round(metrics.mean_confidence, digits=4))\nprintln(\"  Fraction of low-confidence k-mers: \", round(metrics.low_confidence_fraction, digits=3))\nprintln(\"  Total unique k-mers: \", metrics.total_kmers)","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Part-9:-Practical-Example-Assembling-a-Small-Genome-Region","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Part 9: Practical Example - Assembling a Small Genome Region","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Let's create a more realistic example with overlapping reads from a genome region.","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"function create_genome_region_reads()\n    # Simulate a 50bp genome region\n    true_sequence = \"ATCGATCGATCGTAGCTAGCTAGCTTGCATGCATGCATGCATGCATGCAT\"\n\n    # Generate overlapping reads with varying quality\n    reads = []\n\n    # High quality reads\n    push!(reads, FASTX.FASTQ.Record(\"hq1\", true_sequence[1:25], \"I\"^25))\n    push!(reads, FASTX.FASTQ.Record(\"hq2\", true_sequence[15:40], \"I\"^26))\n    push!(reads, FASTX.FASTQ.Record(\"hq3\", true_sequence[30:50], \"I\"^21))\n\n    # Medium quality reads with some errors\n    read_mq1 = true_sequence[5:30]\n    qual_mq1 = \"FFFFFFFFFFFFFFFFFFFFFFFFFF\"\n    push!(reads, FASTX.FASTQ.Record(\"mq1\", read_mq1, qual_mq1))\n\n    # Low quality read with error\n    read_lq1 = true_sequence[20:45]\n    read_lq1 = read_lq1[1:10] * \"T\" * read_lq1[12:end]  ## Error at position 11\n    qual_lq1 = \"AAAAAAAAAA#AAAAAAAAAAAAAA\"  ## Low quality at error\n    push!(reads, FASTX.FASTQ.Record(\"lq1\", read_lq1, qual_lq1))\n\n    return reads, true_sequence\nend\n\ngenome_reads, true_seq = create_genome_region_reads()\n\nprintln(\"\\n\" * \"=\"^60)\nprintln(\"Assembling genome region from overlapping reads...\")\nprintln(\"True sequence: \", true_seq)\nprintln(\"Number of reads: \", length(genome_reads))","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Build qualmer graph","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"genome_graph = Mycelia.build_qualmer_graph(genome_reads; k=9, graph_mode=Mycelia.SingleStrand)","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Convert to sequence graph and extract contigs","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"seq_graph = Mycelia.qualmer_graph_to_quality_biosequence_graph(genome_graph, 9)\n\nprintln(\"\\nAssembly results:\")\nprintln(\"  Qualmer graph: \", Graphs.nv(genome_graph), \" vertices, \", Graphs.ne(genome_graph), \" edges\")\nprintln(\"  Sequence graph: \", Graphs.nv(seq_graph), \" vertices, \", Graphs.ne(seq_graph), \" edges\")","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Use package function to find quality-weighted path","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"if Graphs.nv(genome_graph) > 0\n    # Start from highest confidence vertex\n    confidence_sorted = sort(collect(Graphs.vertices(genome_graph)),\n        by=v -> genome_graph[v].joint_probability, rev=true)\n    best_path = Mycelia.find_quality_weighted_path(genome_graph, confidence_sorted[1])\n\n    println(\"\\nBest quality-weighted path:\")\n    println(\"  Path length: \", length(best_path), \" k-mers\")\n\n    # Reconstruct sequence from path\n    if length(best_path) > 1\n        path_kmers = [String(genome_graph[v].kmer) for v in best_path]\n        # Simple reconstruction: first k-mer + last base of each subsequent k-mer\n        reconstructed = path_kmers[1] * join([kmer[end] for kmer in path_kmers[2:end]])\n\n        println(\"  Reconstructed length: \", length(reconstructed))\n        println(\"  Reconstructed: \", reconstructed)\n\n        # Check accuracy\n        if reconstructed == true_seq\n            println(\"  ✓ Perfect reconstruction!\")\n        elseif occursin(reconstructed, true_seq)\n            println(\"  ✓ Assembled sequence is a substring of true sequence\")\n        elseif occursin(true_seq, reconstructed)\n            println(\"  ✓ True sequence is a substring of assembled sequence\")\n        else\n            println(\"  ✗ Assembly differs from true sequence\")\n            println(\"  True:      \", true_seq)\n            println(\"  Assembled: \", reconstructed)\n        end\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Find longest path (contig) from sequence graph","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"if Graphs.nv(seq_graph) > 0\n    # Get vertex with longest sequence\n    longest_v = argmax(v -> length(seq_graph[v].sequence), Graphs.vertices(seq_graph))\n    longest_seq = seq_graph[longest_v].sequence\n    longest_qual = seq_graph[longest_v].quality_scores\n\n    println(\"\\nLongest contig from simplified graph:\")\n    println(\"  Length: \", length(longest_seq))\n    println(\"  Sequence: \", longest_seq)\n    println(\"  Mean quality: \", round(Statistics.mean(longest_qual), digits=1))\n\n    # Check accuracy\n    if String(longest_seq) == true_seq\n        println(\"  ✓ Perfect reconstruction!\")\n    else\n        # Find best alignment\n        true_str = true_seq\n        assembled_str = String(longest_seq)\n        if occursin(assembled_str, true_str)\n            println(\"  ✓ Assembled sequence is a substring of true sequence\")\n        elseif occursin(true_str, assembled_str)\n            println(\"  ✓ True sequence is a substring of assembled sequence\")\n        else\n            println(\"  ✗ Assembly differs from true sequence\")\n        end\n    end\nend","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Calculate final quality metrics for the genome assembly","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"final_metrics = Mycelia.calculate_assembly_quality_metrics(genome_graph)\nprintln(\"\\nFinal assembly quality metrics:\")\nprintln(\"  Mean coverage: \", round(final_metrics.mean_coverage, digits=2))\nprintln(\"  Mean quality: \", round(final_metrics.mean_quality, digits=1))\nprintln(\"  Mean confidence: \", round(final_metrics.mean_confidence, digits=4))\nprintln(\"  Low confidence fraction: \", round(final_metrics.low_confidence_fraction, digits=3))","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/#Summary","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Summary","text":"","category":"section"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"In this tutorial, we've demonstrated:","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Qualmer Construction: Building quality-aware k-mer graphs from FASTQ data\nJoint Probability: How multiple observations with different qualities are combined\nQuality vs Coverage: The advantage of using quality scores over coverage alone\nPackage Functions: Using Mycelia's built-in functions for quality-weighted analysis:\nfind_quality_weighted_path() for optimal path finding\ncalculate_assembly_quality_metrics() for comprehensive quality assessment\nidentify_potential_errors() for error detection\nRound-Trip Conversion: Maintaining quality information through graph transformations\nPractical Assembly: Using quality information for more accurate genome assembly","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Key advantages of qualmer graphs:","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"Better discrimination between true k-mers and errors\nQuality-weighted path finding for more accurate assembly\nPreservation of quality information for downstream analysis\nImproved handling of repetitive regions with varying quality\nBuilt-in error detection and quality assessment capabilities","category":"page"},{"location":"generated/tutorials/09_round_trip_06_qualmer_graphs/","page":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","title":"Tutorial 6: FASTQ Sequences to Qualmer Graphs and Back","text":"println(\"\\n\" * \"=\"^60)\nprintln(\"Tutorial 6 completed!\")\nprintln(\"You've learned how to use quality-aware k-mer graphs for improved assembly accuracy.\")\nprintln(\"All analysis was performed using Mycelia's built-in qualmer analysis functions.\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Tutorial-4:-Genome-Assembly","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"This tutorial covers comprehensive genome assembly approaches, including short read, long read, and hybrid assembly methods, with emphasis on Mycelia's probabilistic assembly and benchmarking against state-of-the-art tools.","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Learning-Objectives","page":"Tutorial 4: Genome Assembly","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"By the end of this tutorial, you will understand:","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Different assembly algorithms and their applications\nShort read assembly with MEGAHIT and metaSPAdes\nLong read assembly with Flye, Canu, and hifiasm\nHybrid assembly approaches combining multiple data types\nMycelia's probabilistic assembly using string graphs and Viterbi error correction\nAssembly quality metrics and their interpretation\nError correction and polishing techniques\nHandling repetitive sequences and structural variants\nAssembly validation and benchmarking approaches","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Setup","page":"Tutorial 4: Genome Assembly","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"import Pkg\nif isinteractive()\n    Pkg.activate(\"..\")\nend\n\nimport Test\nimport Mycelia\nimport FASTX\nimport Random\nimport Statistics\n\nRandom.seed!(42)","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Part-1:-Assembly-Algorithm-Overview","page":"Tutorial 4: Genome Assembly","title":"Part 1: Assembly Algorithm Overview","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Understanding different assembly approaches helps choose the right method for your data type and research goals.","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"=== Genome Assembly Tutorial ===\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Assembly-Paradigms","page":"Tutorial 4: Genome Assembly","title":"Assembly Paradigms","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Four main approaches to genome assembly:","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"de Bruijn Graph - for short reads (MEGAHIT, metaSPAdes)\nOverlap-Layout-Consensus (OLC) - for long reads (Canu)\nString Graph - for long accurate reads (hifiasm, Flye)\nProbabilistic Assembly - Mycelia's approach using string graphs with Viterbi error correction","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"Assembly Algorithm Comparison:\")\nprintln(\"de Bruijn Graph:\")\nprintln(\"  - Best for: Short reads (Illumina)\")\nprintln(\"  - Tools: MEGAHIT, metaSPAdes, SPAdes\")\nprintln(\"  - Strengths: Efficient, handles high coverage\")\nprintln(\"  - Weaknesses: Struggles with repeats, requires error correction\")\nprintln()\nprintln(\"OLC (Overlap-Layout-Consensus):\")\nprintln(\"  - Best for: Long reads (PacBio, Nanopore)\")\nprintln(\"  - Tools: Canu, Miniasm\")\nprintln(\"  - Strengths: Handles repeats, intuitive approach\")\nprintln(\"  - Weaknesses: Computationally expensive, error-sensitive\")\nprintln()\nprintln(\"String Graph:\")\nprintln(\"  - Best for: Long accurate reads (HiFi)\")\nprintln(\"  - Tools: hifiasm, Flye\")\nprintln(\"  - Strengths: Efficient, haplotype-aware, handles complexity\")\nprintln(\"  - Weaknesses: Requires high-quality reads\")\nprintln()\nprintln(\"Probabilistic Assembly (Mycelia):\")\nprintln(\"  - Best for: Any read type with error correction\")\nprintln(\"  - Tools: Mycelia's string graph + Viterbi\")\nprintln(\"  - Strengths: Handles errors probabilistically, adaptable\")\nprintln(\"  - Weaknesses: Computationally intensive for large genomes\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Part-2:-Data-Preparation-for-Assembly","page":"Tutorial 4: Genome Assembly","title":"Part 2: Data Preparation for Assembly","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Proper data preparation is crucial for successful assembly","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"\\n=== Data Preparation ===\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Simulating-Multi-Platform-Data","page":"Tutorial 4: Genome Assembly","title":"Simulating Multi-Platform Data","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Create synthetic data for comprehensive assembly testing","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Generating Test Data ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Create a synthetic genome with known structure","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"genome_size = 50000  ## 50 kb for demonstration\nreference_genome = Mycelia.random_fasta_record(moltype=:DNA, seed=1, L=genome_size)\n\nprintln(\"Reference genome: $(genome_size) bp\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Simulate different read types","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"short_read_params = Dict(\n    \"coverage\" => 30,\n    \"read_length\" => 150,\n    \"error_rate\" => 0.001,\n    \"description\" => \"Illumina short reads\"\n)\n\nlong_read_params = Dict(\n    \"coverage\" => 20,\n    \"read_length\" => 10000,\n    \"error_rate\" => 0.05,\n    \"description\" => \"Nanopore long reads\"\n)\n\nhifi_params = Dict(\n    \"coverage\" => 15,\n    \"read_length\" => 15000,\n    \"error_rate\" => 0.001,\n    \"description\" => \"PacBio HiFi reads\"\n)","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement multi-platform read simulation","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Generate short reads for MEGAHIT/metaSPAdes\nGenerate long reads for Flye/Canu\nGenerate HiFi reads for hifiasm\nCreate hybrid datasets for Unicycler\nGenerate error-prone reads for Mycelia polishing","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"Simulating read types:\")\nfor (name, params) in [(\"Short reads\", short_read_params),\n                      (\"Long reads\", long_read_params),\n                      (\"HiFi reads\", hifi_params)]\n    println(\"  $(name): $(params[\"coverage\"])x coverage, $(params[\"read_length\"]) bp, $(params[\"error_rate\"]*100)% error\")\nend","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Write test data","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"reference_file = \"reference_genome.fasta\"\nshort_reads_r1 = \"short_reads_R1.fastq\"\nshort_reads_r2 = \"short_reads_R2.fastq\"\nlong_reads_file = \"long_reads.fastq\"\nhifi_reads_file = \"hifi_reads.fastq\"\n\nMycelia.write_fasta(outfile=reference_file, records=[reference_genome])","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Write simulated reads to FASTQ files","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Generate paired-end short reads\nGenerate single-end long reads\nGenerate single-end HiFi reads","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Read-Statistics-and-Quality-Assessment","page":"Tutorial 4: Genome Assembly","title":"Read Statistics and Quality Assessment","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Analyze read characteristics before assembly","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Read Analysis ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement read analysis","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Read length distribution\nQuality score distribution\nCoverage estimation\nError rate assessment","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Part-3:-Multi-Platform-Assembly-Approaches","page":"Tutorial 4: Genome Assembly","title":"Part 3: Multi-Platform Assembly Approaches","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Comprehensive coverage of short read, long read, and hybrid assembly","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"\\n=== Multi-Platform Assembly Approaches ===\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Short-Read-Assembly","page":"Tutorial 4: Genome Assembly","title":"Short Read Assembly","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"MEGAHIT and metaSPAdes for short read data","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Short Read Assembly ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Example parameters for short read assembly","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"short_read_params = Dict(\n    \"megahit_k_list\" => \"21,29,39,59,79,99,119,141\",\n    \"metaspades_k_list\" => \"21,33,55,77\",\n    \"min_contig_len\" => 200,\n    \"threads\" => 4\n)\n\nprintln(\"Short read assembly parameters:\")\nfor (param, value) in short_read_params\n    println(\"  $param: $value\")\nend","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement short read assembly examples","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Run MEGAHIT for metagenomic data\nRun metaSPAdes for complex datasets\nCompare assembly quality metrics\nEvaluate computational requirements","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Long-Read-Assembly","page":"Tutorial 4: Genome Assembly","title":"Long Read Assembly","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Flye, Canu, and hifiasm for long read data","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Long Read Assembly ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Example parameters for long read assembly","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"long_read_params = Dict(\n    \"genome_size\" => \"5m\",\n    \"flye_read_type\" => \"pacbio-hifi\",\n    \"canu_read_type\" => \"pacbio\",\n    \"hifiasm_mode\" => \"primary\",\n    \"threads\" => 4\n)\n\nprintln(\"Long read assembly parameters:\")\nfor (param, value) in long_read_params\n    println(\"  $param: $value\")\nend","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement long read assembly examples","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Run Flye for various read types\nRun Canu with error correction\nRun hifiasm for HiFi data\nCompare assembly contiguity\nEvaluate error rates","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Hybrid-Assembly","page":"Tutorial 4: Genome Assembly","title":"Hybrid Assembly","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Unicycler combining short and long reads","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Hybrid Assembly ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Example parameters for hybrid assembly","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"hybrid_params = Dict(\n    \"short_read_accuracy\" => 0.99,\n    \"long_read_accuracy\" => 0.90,\n    \"bridging_mode\" => \"conservative\",\n    \"threads\" => 4\n)\n\nprintln(\"Hybrid assembly parameters:\")\nfor (param, value) in hybrid_params\n    println(\"  $param: $value\")\nend","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement hybrid assembly examples","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Run Unicycler with paired data\nCompare to short-read-only assemblies\nEvaluate scaffolding improvements\nAssess computational trade-offs","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Mycelia's-Probabilistic-Assembly","page":"Tutorial 4: Genome Assembly","title":"Mycelia's Probabilistic Assembly","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"String graph approach with Viterbi error correction","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Mycelia's Probabilistic Assembly ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Example parameters for Mycelia assembly","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"mycelia_params = Dict(\n    \"k_range\" => \"21,31,41,51,61,71,81,91\",\n    \"error_rate\" => 0.01,\n    \"min_coverage\" => 3,\n    \"iterative_polishing\" => true,\n    \"verbosity\" => \"reads\"\n)\n\nprintln(\"Mycelia assembly parameters:\")\nfor (param, value) in mycelia_params\n    println(\"  $param: $value\")\nend","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement Mycelia assembly examples","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Build string graph from reads\nApply Viterbi error correction\nPerform iterative polishing\nCompare to external assemblers","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"Assembly approaches comparison completed...\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Part-4:-Assembly-Quality-Assessment","page":"Tutorial 4: Genome Assembly","title":"Part 4: Assembly Quality Assessment","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Comprehensive evaluation of assembly quality","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"\\n=== Assembly Quality Assessment ===\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Basic-Assembly-Statistics","page":"Tutorial 4: Genome Assembly","title":"Basic Assembly Statistics","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Calculate fundamental assembly metrics","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Basic Statistics ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement assembly statistics","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Contig count and sizes\nN50, N90, L50, L90\nTotal assembly size\nLargest contig size\nGC content","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Example with placeholder data","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"assembly_stats = Dict(\n    \"total_length\" => 49500,\n    \"n_contigs\" => 3,\n    \"n50\" => 25000,\n    \"l50\" => 1,\n    \"largest_contig\" => 30000,\n    \"gc_content\" => 0.45\n)\n\nprintln(\"Assembly Statistics:\")\nfor (metric, value) in assembly_stats\n    println(\"  $metric: $value\")\nend","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Advanced-Quality-Metrics","page":"Tutorial 4: Genome Assembly","title":"Advanced Quality Metrics","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"More sophisticated quality assessment","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Advanced Quality Metrics ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement advanced quality assessment","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"BUSCO completeness scores\nMerqury QV scores\nLAI (LTR Assembly Index)\nContiguity vs completeness trade-offs","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Comparison-with-Reference","page":"Tutorial 4: Genome Assembly","title":"Comparison with Reference","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Validate assembly against known reference","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Reference Comparison ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement reference comparison","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Alignment-based comparison\nStructural variation detection\nMisassembly identification\nCoverage uniformity assessment","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Part-5:-Assembly-Polishing-and-Error-Correction","page":"Tutorial 4: Genome Assembly","title":"Part 5: Assembly Polishing and Error Correction","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Improve assembly accuracy through polishing","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"\\n=== Assembly Polishing ===\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Consensus-Polishing","page":"Tutorial 4: Genome Assembly","title":"Consensus Polishing","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Use original reads to polish assembly","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Consensus Polishing ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement consensus polishing","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Align reads to assembly\nIdentify consensus variants\nApply corrections\nIterate polishing rounds","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Structural-Error-Correction","page":"Tutorial 4: Genome Assembly","title":"Structural Error Correction","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Fix larger structural errors","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Structural Correction ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement structural correction","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Identify structural variants\nValidate with long reads\nCorrect misassemblies\nHandle complex rearrangements","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Part-6:-Handling-Assembly-Challenges","page":"Tutorial 4: Genome Assembly","title":"Part 6: Handling Assembly Challenges","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Address common assembly difficulties","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"\\n=== Assembly Challenges ===\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Repetitive-Sequences","page":"Tutorial 4: Genome Assembly","title":"Repetitive Sequences","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Strategies for handling repeats","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Repetitive Sequences ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement repeat handling","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Identify repetitive regions\nUse read-spanning strategy\nImplement gap filling\nValidate repeat resolutions","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Heterozygosity","page":"Tutorial 4: Genome Assembly","title":"Heterozygosity","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Handle diploid and polyploid genomes","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Heterozygosity ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement heterozygosity handling","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Haplotype-aware assembly\nBubble detection and resolution\nDiploid assembly validation\nPhasing strategies","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Contamination","page":"Tutorial 4: Genome Assembly","title":"Contamination","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Detect and remove contaminating sequences","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Contamination Detection ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement contamination detection","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Taxonomic classification\nCoverage-based detection\nCompositional analysis\nFiltering strategies","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Part-7:-Assembly-Visualization-and-Exploration","page":"Tutorial 4: Genome Assembly","title":"Part 7: Assembly Visualization and Exploration","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Create plots and visualizations for assembly analysis","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"\\n=== Assembly Visualization ===\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Contig-Size-Distribution","page":"Tutorial 4: Genome Assembly","title":"Contig Size Distribution","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Visualize assembly contiguity","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Contig Visualization ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement assembly visualization","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Contig size histograms\nCumulative length plots\nN50 plots\nCoverage vs length plots","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Dot-Plots","page":"Tutorial 4: Genome Assembly","title":"Dot Plots","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Compare assemblies or validate against reference","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Dot Plot Analysis ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement dot plot visualization","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Self-alignment plots\nReference comparison plots\nSynteny visualization\nStructural variant detection","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Part-8:-Assembly-Benchmarking","page":"Tutorial 4: Genome Assembly","title":"Part 8: Assembly Benchmarking","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Compare different assembly approaches","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"\\n=== Assembly Benchmarking ===\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Multi-Assembler-Comparison","page":"Tutorial 4: Genome Assembly","title":"Multi-Assembler Comparison","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Compare multiple assembly tools","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Multi-Assembler Comparison ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement multi-assembler benchmarking","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Run multiple assemblers\nCompare quality metrics\nIdentify best-performing approaches\nConsensus assembly generation","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Parameter-Optimization","page":"Tutorial 4: Genome Assembly","title":"Parameter Optimization","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Optimize assembly parameters","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"--- Parameter Optimization ---\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"TODO: Implement parameter optimization","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Grid search over parameter space\nQuality-based optimization\nCross-validation approaches\nAutomated parameter tuning","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Part-9:-Best-Practices-and-Recommendations","page":"Tutorial 4: Genome Assembly","title":"Part 9: Best Practices and Recommendations","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Guidelines for successful genome assembly","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"\\n=== Best Practices ===\")\n\nprintln(\"Data Requirements:\")\nprintln(\"- HiFi: 20-30x coverage minimum\")\nprintln(\"- Read N50 > 10 kb preferred\")\nprintln(\"- Low contamination levels\")\nprintln(\"- Balanced coverage distribution\")\nprintln()\nprintln(\"Assembly Strategy:\")\nprintln(\"- Start with hifiasm for HiFi data\")\nprintln(\"- Use haplotype-aware mode for diploids\")\nprintln(\"- Validate with multiple quality metrics\")\nprintln(\"- Polish with original reads\")\nprintln()\nprintln(\"Quality Control:\")\nprintln(\"- Check BUSCO completeness (>90% for eukaryotes)\")\nprintln(\"- Validate N50 vs genome size expectations\")\nprintln(\"- Examine contig count (fewer is better)\")\nprintln(\"- Compare with related genomes\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/#Summary","page":"Tutorial 4: Genome Assembly","title":"Summary","text":"","category":"section"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"println(\"\\n=== Assembly Summary ===\")\nprintln(\"✓ Understanding assembly algorithms and their applications\")\nprintln(\"✓ Short read assembly with MEGAHIT and metaSPAdes\")\nprintln(\"✓ Long read assembly with Flye, Canu, and hifiasm\")\nprintln(\"✓ Hybrid assembly approaches with Unicycler\")\nprintln(\"✓ Mycelia's probabilistic assembly with string graphs and Viterbi error correction\")\nprintln(\"✓ Comprehensive quality assessment techniques\")\nprintln(\"✓ Assembly polishing and error correction\")\nprintln(\"✓ Handling repetitive sequences and heterozygosity\")\nprintln(\"✓ Visualization and benchmarking approaches\")","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"Cleanup","category":"page"},{"location":"generated/tutorials/04_genome_assembly/","page":"Tutorial 4: Genome Assembly","title":"Tutorial 4: Genome Assembly","text":"cleanup_files = [reference_file, short_reads_r1, short_reads_r2, long_reads_file, hifi_reads_file]\nfor file in cleanup_files\n    if isfile(file)\n        rm(file, force=true)\n    end\nend\n\n# Note: No assembly output directory was created in this tutorial\nassembly_output = \"assembly_output\"  # Define for consistency, but directory doesn't exist\nif isdir(assembly_output)\n    rm(assembly_output, recursive=true, force=true)\nend\n\nprintln(\"\\nNext: Tutorial 5 - Assembly Validation\")\n\nnothing","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"\"\"\"\nMycelia Graph Type Tutorials\n\nThis tutorial demonstrates the usage of all 6 graph types in Mycelia:\n1. N-gram Graphs - For unicode text analysis\n2. K-mer Graphs - For DNA/RNA/protein sequence analysis\n3. Qualmer Graphs - For quality-aware sequence analysis\n4. String Graphs - For simplified N-gram analysis\n5. FASTA Graphs - For variable-length BioSequence analysis\n6. FASTQ Graphs - For quality-aware BioSequence analysis\n\nEach section shows practical examples with real data.\n\"\"\"\n\nimport Mycelia\nimport FASTX\nimport BioSequences\n\nprintln(\"=\"^80)\nprintln(\"MYCELIA GRAPH TYPE TUTORIALS\")\nprintln(\"=\"^80)","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"============================================================================= Tutorial 1: N-gram Graphs - Unicode Text Analysis =============================================================================","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\n1. N-GRAM GRAPHS - Unicode Text Analysis\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Example: Analyzing text patterns","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"text = \"The quick brown fox jumps over the lazy dog\"\nprintln(\"Input text: \\\"$text\\\"\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Create N-gram graph","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"ngram_graph = Mycelia.string_to_ngram_graph(s=text, n=3)\nprintln(\"Number of 3-grams: $(length(ngram_graph.vertex_labels))\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Show some N-grams","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"ngrams = collect(values(ngram_graph.vertex_labels))\nprintln(\"Example 3-grams: $(ngrams[1:min(5, length(ngrams))])\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Use case: Text compression, pattern detection, linguistic analysis","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"Use cases: Text compression, pattern detection, linguistic analysis\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"============================================================================= Tutorial 2: K-mer Graphs - BioSequence Analysis =============================================================================","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\n2. K-MER GRAPHS - BioSequence Analysis\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Example: DNA sequence analysis","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"dna_sequence = \"ATCGATCGATCGATCGTAGCTAGCTAGCT\"\nprintln(\"DNA sequence: $dna_sequence\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Create FASTA record","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"dna_record = FASTX.FASTA.Record(\"sample_dna\", dna_sequence)\ndna_records = [dna_record]","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Create k-mer graph","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"dna_kmer_graph = Mycelia.build_kmer_graph_next(Mycelia.Kmers.DNAKmer{5}, dna_records)\ndna_kmers = collect(values(dna_kmer_graph.vertex_labels))\nprintln(\"DNA k-mers (k=5): $(length(dna_kmers)) unique k-mers\")\nprintln(\"Example k-mers: $(dna_kmers[1:min(3, length(dna_kmers))])\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Get vertex data to see coverage information","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"first_kmer = first(dna_kmers)\nvertex_data = dna_kmer_graph[first_kmer]\nprintln(\"Coverage for $(first_kmer): $(length(vertex_data.coverage)) observations\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Example: RNA sequence analysis","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"rna_sequence = \"AUCGAUCGAUCGAUCGUAGCUAGCUAGCU\"\nprintln(\"\\\\nRNA sequence: $rna_sequence\")\n\nrna_record = FASTX.FASTA.Record(\"sample_rna\", rna_sequence)\nrna_records = [rna_record]","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Create RNA k-mer graph","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"rna_kmer_graph = Mycelia.build_kmer_graph_next(Mycelia.Kmers.RNAKmer{4}, rna_records)\nrna_kmers = collect(values(rna_kmer_graph.vertex_labels))\nprintln(\"RNA k-mers (k=4): $(length(rna_kmers)) unique k-mers\")\nprintln(\"Example k-mers: $(rna_kmers[1:min(3, length(rna_kmers))])\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Example: Protein sequence analysis","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"protein_sequence = \"ALAVALINEGLUTAMINELEUCINE\"\nprintln(\"\\\\nProtein sequence: $protein_sequence\")\n\nprotein_record = FASTX.FASTA.Record(\"sample_protein\", protein_sequence)\nprotein_records = [protein_record]","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Create protein k-mer graph","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"protein_kmer_graph = Mycelia.build_kmer_graph_next(Mycelia.Kmers.AAKmer{3}, protein_records)\nprotein_kmers = collect(values(protein_kmer_graph.vertex_labels))\nprintln(\"Protein k-mers (k=3): $(length(protein_kmers)) unique k-mers\")\nprintln(\"Example k-mers: $(protein_kmers[1:min(3, length(protein_kmers))])\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Use cases","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"Use cases: Genome assembly, repeat detection, sequence comparison\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"============================================================================= Tutorial 3: Qualmer Graphs - Quality-Aware Sequence Analysis =============================================================================","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\n3. QUALMER GRAPHS - Quality-Aware Sequence Analysis\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Example: High-quality sequencing data","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"high_quality_seq = \"ATCGATCGATCGATCGTAGCTAGCT\"\nhigh_quality_scores = \"HHHHHHHHHHHHHHHHHHHHHHHHH\"  ## PHRED 39\nprintln(\"High-quality sequence: $high_quality_seq\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Create FASTQ record","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"hq_record = FASTX.FASTQ.Record(\"high_quality\", high_quality_seq, high_quality_scores)\nhq_records = [hq_record]","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Create qualmer graph","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"hq_qualmer_graph = Mycelia.build_qualmer_graph(hq_records, k=5)\nhq_kmers = collect(values(hq_qualmer_graph.vertex_labels))\nprintln(\"High-quality k-mers: $(length(hq_kmers)) unique k-mers\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Show quality information","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"first_hq_kmer = first(hq_kmers)\nhq_vertex_data = hq_qualmer_graph[first_hq_kmer]\nprintln(\"$(first_hq_kmer): joint prob = $(round(hq_vertex_data.joint_probability, digits=4)), mean quality = $(hq_vertex_data.mean_quality)\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Example: Medium-quality sequencing data","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"medium_quality_seq = \"ATCGATCGATCGATCGTAGCTAGCT\"\nmedium_quality_scores = \"?????????????????????????\"  ## PHRED 30\nprintln(\"\\\\nMedium-quality sequence: $medium_quality_seq\")\n\nmq_record = FASTX.FASTQ.Record(\"medium_quality\", medium_quality_seq, medium_quality_scores)\nmq_records = [mq_record]","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Create qualmer graph","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"mq_qualmer_graph = Mycelia.build_qualmer_graph(mq_records, k=5)\nmq_kmers = collect(values(mq_qualmer_graph.vertex_labels))\nprintln(\"Medium-quality k-mers: $(length(mq_kmers)) unique k-mers\")\n\nfirst_mq_kmer = first(mq_kmers)\nmq_vertex_data = mq_qualmer_graph[first_mq_kmer]\nprintln(\"$(first_mq_kmer): joint prob = $(round(mq_vertex_data.joint_probability, digits=4)), mean quality = $(mq_vertex_data.mean_quality)\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Quality comparison","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\\\nQuality comparison:\")\nprintln(\"High-quality joint probability: $(round(hq_vertex_data.joint_probability, digits=4))\")\nprintln(\"Medium-quality joint probability: $(round(mq_vertex_data.joint_probability, digits=4))\")\nprintln(\"Quality-aware assembly can make better decisions using this information!\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Use cases","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"Use cases: Error correction, quality-aware assembly, variant calling\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"============================================================================= Tutorial 4: String Graphs - Simplified N-gram Analysis =============================================================================","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\n4. STRING GRAPHS - Simplified N-gram Analysis\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Example: Text processing with simplification","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"text_for_strings = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nprintln(\"Input text: $text_for_strings\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Create N-gram graph first","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"string_ngram_graph = Mycelia.string_to_ngram_graph(s=text_for_strings, n=3)\noriginal_ngrams = collect(values(string_ngram_graph.vertex_labels))\nprintln(\"Original N-grams: $(length(original_ngrams)) 3-grams\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"String graphs are created by simplifying N-gram graphs (Path collapsing functionality may be work in progress)","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"try\n    collapsed_paths = Mycelia.collapse_unbranching_paths(string_ngram_graph)\n    println(\"Simplified paths: $(length(collapsed_paths)) paths\")\ncatch e\n    println(\"Path simplification: Work in progress - $(typeof(e))\")\nend","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Use cases","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"Use cases: Text compression, sequence simplification, path analysis\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"============================================================================= Tutorial 5: FASTA Graphs - Variable-Length BioSequence Analysis =============================================================================","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\n5. FASTA GRAPHS - Variable-Length BioSequence Analysis\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Example: Direct BioSequence graph construction","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"fasta_sequence = \"ATCGATCGATCGATCGTAGCTAGCTAGCTGCGCGCGC\"\nprintln(\"FASTA sequence: $fasta_sequence\")\n\nfasta_record = FASTX.FASTA.Record(\"sample\", fasta_sequence)\nfasta_records = [fasta_record]","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Create BioSequence graph directly","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"bio_graph = Mycelia.build_biosequence_graph(fasta_records)\nbio_sequences = collect(values(bio_graph.vertex_labels))\nprintln(\"BioSequence graph: $(length(bio_sequences)) sequences\")\n\nif !isempty(bio_sequences)\n    first_seq = first(bio_sequences)\n    println(\"First sequence: $first_seq (length: $(length(first_seq)))\")\n    println(\"Sequence type: $(typeof(first_seq))\")\nend","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Example: K-mer to BioSequence conversion","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\\\nK-mer to BioSequence conversion:\")\nkmer_graph = Mycelia.build_kmer_graph_next(Mycelia.Kmers.DNAKmer{5}, fasta_records)\nbio_converted = Mycelia.kmer_graph_to_biosequence_graph(kmer_graph)\nconverted_sequences = collect(values(bio_converted.vertex_labels))\nprintln(\"Converted $(length(kmer_graph.vertex_labels)) k-mers to $(length(converted_sequences)) BioSequences\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Use cases","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"Use cases: Genome assembly, contig construction, sequence alignment\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"============================================================================= Tutorial 6: FASTQ Graphs - Quality-Aware BioSequence Analysis =============================================================================","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\n6. FASTQ GRAPHS - Quality-Aware BioSequence Analysis\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Example: Quality-aware BioSequence graph","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"fastq_sequence = \"ATCGATCGATCGATCGTAGCTAGCTAGCTGCGCGCGC\"\nfastq_quality = repeat(\"H\", length(fastq_sequence))  ## High quality\nprintln(\"FASTQ sequence: $fastq_sequence\")\nprintln(\"Quality string: $fastq_quality\")\n\nfastq_record = FASTX.FASTQ.Record(\"quality_sample\", fastq_sequence, fastq_quality)\nfastq_records = [fastq_record]","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Create quality-aware BioSequence graph","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"quality_bio_graph = Mycelia.build_quality_biosequence_graph(fastq_records)\nquality_sequences = collect(values(quality_bio_graph.vertex_labels))\nprintln(\"Quality BioSequence graph: $(length(quality_sequences)) sequences\")\n\nif !isempty(quality_sequences)\n    first_quality_seq = first(quality_sequences)\n    quality_vertex_data = quality_bio_graph[first_quality_seq]\n    println(\"First sequence: $first_quality_seq\")\n    println(\"Quality scores: $(quality_vertex_data.quality_scores[1:min(10, length(quality_vertex_data.quality_scores))]...)\")\nend","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Example: Qualmer to quality BioSequence conversion","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\\\nQualmer to quality BioSequence conversion:\")\nqualmer_graph = Mycelia.build_qualmer_graph(fastq_records, k=5)\nquality_converted = Mycelia.qualmer_graph_to_quality_biosequence_graph(qualmer_graph)\nquality_converted_sequences = collect(values(quality_converted.vertex_labels))\nprintln(\"Converted $(length(qualmer_graph.vertex_labels)) qualmers to $(length(quality_converted_sequences)) quality BioSequences\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Use cases","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"Use cases: Quality-aware assembly, error correction, variant calling\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"============================================================================= Tutorial 7: Graph Type Hierarchy and Conversions =============================================================================","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\n7. GRAPH TYPE HIERARCHY AND CONVERSIONS\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Demonstrate the hierarchy: Fixed-length → Variable-length","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"sequence_for_hierarchy = \"ATCGATCGATCGATCGTAGCTAGCTAGCTGCGCGCGC\"\nrecords_for_hierarchy = [FASTX.FASTA.Record(\"hierarchy_demo\", sequence_for_hierarchy)]\nfastq_records_for_hierarchy = [FASTX.FASTQ.Record(\"hierarchy_demo\", sequence_for_hierarchy, repeat(\"H\", length(sequence_for_hierarchy)))]\n\nprintln(\"Original sequence: $sequence_for_hierarchy\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Fixed-length graphs","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"ngram_result = Mycelia.string_to_ngram_graph(s=sequence_for_hierarchy, n=3)\nkmer_result = Mycelia.build_kmer_graph_next(Mycelia.Kmers.DNAKmer{5}, records_for_hierarchy)\nqualmer_result = Mycelia.build_qualmer_graph(fastq_records_for_hierarchy, k=5)\n\nprintln(\"\\\\nFixed-length graphs:\")\nprintln(\"  N-grams (n=3): $(length(ngram_result.vertex_labels)) vertices\")\nprintln(\"  K-mers (k=5): $(length(kmer_result.vertex_labels)) vertices\")\nprintln(\"  Qualmers (k=5): $(length(qualmer_result.vertex_labels)) vertices\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Variable-length graphs","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"bio_result = Mycelia.build_biosequence_graph(records_for_hierarchy)\nquality_bio_result = Mycelia.build_quality_biosequence_graph(fastq_records_for_hierarchy)\n\nprintln(\"\\\\nVariable-length graphs:\")\nprintln(\"  BioSequences: $(length(bio_result.vertex_labels)) vertices\")\nprintln(\"  Quality BioSequences: $(length(quality_bio_result.vertex_labels)) vertices\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Conversions","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"kmer_to_bio = Mycelia.kmer_graph_to_biosequence_graph(kmer_result)\nqualmer_to_quality_bio = Mycelia.qualmer_graph_to_quality_biosequence_graph(qualmer_result)\n\nprintln(\"\\\\nConversions:\")\nprintln(\"  K-mer → BioSequence: $(length(kmer_result.vertex_labels)) → $(length(kmer_to_bio.vertex_labels))\")\nprintln(\"  Qualmer → Quality BioSequence: $(length(qualmer_result.vertex_labels)) → $(length(qualmer_to_quality_bio.vertex_labels))\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"============================================================================= Tutorial 8: Practical Assembly Workflow =============================================================================","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\n8. PRACTICAL ASSEMBLY WORKFLOW\")\nprintln(\"-\"^50)","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Simulate a realistic assembly scenario","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"simulated_reads = [\n    \"ATCGATCGATCGATCGTAGC\",\n    \"GATCGATCGATCGTAGCTAG\",\n    \"TCGATCGATCGTAGCTAGCT\",\n    \"GATCGATCGTAGCTAGCTGC\",\n    \"TCGATCGTAGCTAGCTGCGC\"\n]\n\nprintln(\"Simulated sequencing reads:\")\nfor (i, read) in enumerate(simulated_reads)\n    println(\"  Read $i: $read\")\nend","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Create records","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"fasta_reads = [FASTX.FASTA.Record(\"read_$i\", read) for (i, read) in enumerate(simulated_reads)]\nfastq_reads = [FASTX.FASTQ.Record(\"read_$i\", read, repeat(\"H\", length(read))) for (i, read) in enumerate(simulated_reads)]","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Method 1: K-mer graph assembly","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\\\nMethod 1: K-mer graph assembly\")\nassembly_kmer_graph = Mycelia.build_kmer_graph_next(Mycelia.Kmers.DNAKmer{5}, fasta_reads)\nassembly_kmers = collect(values(assembly_kmer_graph.vertex_labels))\nprintln(\"  K-mer graph: $(length(assembly_kmers)) unique k-mers\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Method 2: Quality-aware Qualmer assembly","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\\\nMethod 2: Quality-aware Qualmer assembly\")\nassembly_qualmer_graph = Mycelia.build_qualmer_graph(fastq_reads, k=5)\nassembly_qualmers = collect(values(assembly_qualmer_graph.vertex_labels))\nprintln(\"  Qualmer graph: $(length(assembly_qualmers)) unique qualmers\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Show quality information","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"if !isempty(assembly_qualmers)\n    first_qualmer = first(assembly_qualmers)\n    qualmer_vertex_data = assembly_qualmer_graph[first_qualmer]\n    println(\"  Quality example: $(first_qualmer) with joint prob = $(round(qualmer_vertex_data.joint_probability, digits=4))\")\nend","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"Method 3: BioSequence graph assembly","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\\\nMethod 3: BioSequence graph assembly\")\nassembly_bio_graph = Mycelia.build_biosequence_graph(fasta_reads)\nassembly_sequences = collect(values(assembly_bio_graph.vertex_labels))\nprintln(\"  BioSequence graph: $(length(assembly_sequences)) sequences\")\n\nprintln(\"\\\\nWorkflow summary:\")\nprintln(\"  1. Choose graph type based on data: FASTA → K-mer/BioSequence, FASTQ → Qualmer/Quality BioSequence\")\nprintln(\"  2. Consider quality: Use Qualmer graphs for quality-aware assembly\")\nprintln(\"  3. Use appropriate k-mer size: Smaller k for higher sensitivity, larger k for specificity\")\nprintln(\"  4. Convert between graph types as needed for different analysis steps\")","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"============================================================================= Summary =============================================================================","category":"page"},{"location":"generated/tutorials/04_graph_type_tutorials/","page":"-","title":"-","text":"println(\"\\n\" * \"=\"^80)\nprintln(\"TUTORIAL SUMMARY\")\nprintln(\"=\"^80)\nprintln(\"You've learned about all 6 graph types in Mycelia:\")\nprintln()\nprintln(\"FIXED-LENGTH GRAPHS (Assembly Foundation):\")\nprintln(\"  1. N-gram Graphs - Unicode text analysis\")\nprintln(\"  2. K-mer Graphs - DNA/RNA/protein sequence analysis\")\nprintln(\"  3. Qualmer Graphs - Quality-aware sequence analysis\")\nprintln()\nprintln(\"VARIABLE-LENGTH GRAPHS (Simplified Products):\")\nprintln(\"  4. String Graphs - Simplified N-gram analysis\")\nprintln(\"  5. FASTA Graphs - Variable-length BioSequence analysis\")\nprintln(\"  6. FASTQ Graphs - Quality-aware BioSequence analysis\")\nprintln()\nprintln(\"KEY FEATURES:\")\nprintln(\"  ✓ Type-stable implementation with storage parameters\")\nprintln(\"  ✓ Quality-aware assembly with per-base quality scores\")\nprintln(\"  ✓ Multi-alphabet support (DNA, RNA, amino acids)\")\nprintln(\"  ✓ Strand-aware graph construction\")\nprintln(\"  ✓ Graph type conversions and hierarchy\")\nprintln(\"  ✓ MetaGraphsNext.jl foundation for performance\")\nprintln()\nprintln(\"Choose the right graph type for your analysis:\")\nprintln(\"  - Use N-gram graphs for text analysis\")\nprintln(\"  - Use K-mer graphs for basic sequence analysis\")\nprintln(\"  - Use Qualmer graphs for quality-aware assembly\")\nprintln(\"  - Use BioSequence graphs for variable-length analysis\")\nprintln(\"  - Use Quality BioSequence graphs for quality-aware variable-length analysis\")\nprintln(\"=\"^80)","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Tutorial-6:-Gene-Annotation","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"This tutorial covers comprehensive gene annotation techniques, from basic gene prediction to functional annotation and annotation quality assessment.","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Learning-Objectives","page":"Tutorial 6: Gene Annotation","title":"Learning Objectives","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"By the end of this tutorial, you will understand:","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Different gene prediction approaches and their applications\nStructural annotation techniques for identifying genes and features\nFunctional annotation methods for assigning biological roles\nAnnotation quality assessment and validation\nComparative annotation approaches\nBest practices for different organism types","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Setup","page":"Tutorial 6: Gene Annotation","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"import Pkg\nif isinteractive()\n    Pkg.activate(\"..\")\nend\n\nimport Test\nimport Mycelia\nimport FASTX\nimport Random\nimport Statistics\n\nRandom.seed!(42)","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Part-1:-Gene-Annotation-Overview","page":"Tutorial 6: Gene Annotation","title":"Part 1: Gene Annotation Overview","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Gene annotation is a multi-step process that identifies genes and assigns functional information to genomic sequences.","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"=== Gene Annotation Tutorial ===\")\n\nprintln(\"Annotation Pipeline Overview:\")\nprintln(\"1. Structural Annotation\")\nprintln(\"   - Gene prediction\")\nprintln(\"   - Exon-intron structure\")\nprintln(\"   - Regulatory elements\")\nprintln()\nprintln(\"2. Functional Annotation\")\nprintln(\"   - Protein function prediction\")\nprintln(\"   - Pathway assignment\")\nprintln(\"   - GO term annotation\")\nprintln()\nprintln(\"3. Comparative Annotation\")\nprintln(\"   - Ortholog identification\")\nprintln(\"   - Synteny analysis\")\nprintln(\"   - Evolutionary analysis\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Part-2:-Structural-Annotation","page":"Tutorial 6: Gene Annotation","title":"Part 2: Structural Annotation","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Structural annotation identifies the physical structure of genes and other functional elements.","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"\\n=== Structural Annotation ===\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Preparing-Test-Genome","page":"Tutorial 6: Gene Annotation","title":"Preparing Test Genome","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Create a test genome for annotation demonstration","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Preparing Test Genome ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Generate test genome with gene-like features","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"genome_size = 50000\ntest_genome = Mycelia.random_fasta_record(moltype=:DNA, seed=1, L=genome_size)\ngenome_file = \"test_genome.fasta\"\nMycelia.write_fasta(outfile=genome_file, records=[test_genome])\n\nprintln(\"Test genome prepared: $(genome_size) bp\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Ab-Initio-Gene-Prediction","page":"Tutorial 6: Gene Annotation","title":"Ab Initio Gene Prediction","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Predict genes using sequence signals alone","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Ab Initio Gene Prediction ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement ab initio gene prediction","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Use Prodigal for prokaryotic genes\nIdentify start/stop codons\nPredict coding sequences\nHandle overlapping genes","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Simulate gene prediction results","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"predicted_genes = [\n    Dict(\"start\" => 1000, \"end\" => 2500, \"strand\" => \"+\", \"confidence\" => 0.95),\n    Dict(\"start\" => 3000, \"end\" => 4200, \"strand\" => \"-\", \"confidence\" => 0.88),\n    Dict(\"start\" => 5500, \"end\" => 7000, \"strand\" => \"+\", \"confidence\" => 0.92),\n    Dict(\"start\" => 8000, \"end\" => 9500, \"strand\" => \"+\", \"confidence\" => 0.85),\n    Dict(\"start\" => 10000, \"end\" => 11800, \"strand\" => \"-\", \"confidence\" => 0.90)\n]\n\nprintln(\"Ab Initio Gene Prediction Results:\")\nprintln(\"  Predicted genes: $(length(predicted_genes))\")\nprintln(\"  Mean confidence: $(round(Statistics.mean([g[\"confidence\"] for g in predicted_genes]), digits=3))\")\nprintln(\"  Coding density: $(round(sum([g[\"end\"] - g[\"start\"] + 1 for g in predicted_genes]) / genome_size * 100, digits=1))%\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Homology-Based-Gene-Prediction","page":"Tutorial 6: Gene Annotation","title":"Homology-Based Gene Prediction","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Use similarity to known genes for prediction","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Homology-Based Gene Prediction ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement homology-based prediction","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"BLAST against protein databases\nIdentify homologous sequences\nTransfer annotations from homologs\nHandle partial matches","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Simulate homology search results","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"homology_results = [\n    Dict(\"query\" => \"gene_1\", \"subject\" => \"protein_X\", \"identity\" => 85.2, \"coverage\" => 95.0),\n    Dict(\"query\" => \"gene_2\", \"subject\" => \"protein_Y\", \"identity\" => 78.9, \"coverage\" => 88.0),\n    Dict(\"query\" => \"gene_3\", \"subject\" => \"protein_Z\", \"identity\" => 92.1, \"coverage\" => 97.0),\n    Dict(\"query\" => \"gene_4\", \"subject\" => \"protein_W\", \"identity\" => 65.4, \"coverage\" => 82.0),\n    Dict(\"query\" => \"gene_5\", \"subject\" => \"protein_V\", \"identity\" => 88.7, \"coverage\" => 91.0)\n]\n\nprintln(\"Homology Search Results:\")\nfor result in homology_results\n    println(\"  $(result[\"query\"]) -> $(result[\"subject\"]): $(result[\"identity\"])% identity, $(result[\"coverage\"])% coverage\")\nend","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#RNA-seq-Guided-Prediction","page":"Tutorial 6: Gene Annotation","title":"RNA-seq Guided Prediction","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Use transcriptome data to improve gene prediction","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- RNA-seq Guided Prediction ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement RNA-seq guided prediction","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Map RNA-seq reads to genome\nIdentify transcribed regions\nPredict exon-intron structure\nHandle alternative splicing","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Regulatory-Element-Prediction","page":"Tutorial 6: Gene Annotation","title":"Regulatory Element Prediction","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Identify promoters, enhancers, and other regulatory sequences","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Regulatory Element Prediction ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement regulatory element prediction","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Promoter prediction\nTranscription factor binding sites\nCpG islands\nRepetitive elements","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Part-3:-Functional-Annotation","page":"Tutorial 6: Gene Annotation","title":"Part 3: Functional Annotation","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Functional annotation assigns biological roles to predicted genes","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"\\n=== Functional Annotation ===\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Protein-Function-Prediction","page":"Tutorial 6: Gene Annotation","title":"Protein Function Prediction","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Predict protein functions using various approaches","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Protein Function Prediction ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement protein function prediction","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Domain identification (Pfam, InterPro)\nEnzyme classification (EC numbers)\nPathway assignment (KEGG, MetaCyc)\nGO term annotation","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Simulate functional annotation results","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"functional_annotations = [\n    Dict(\"gene\" => \"gene_1\", \"function\" => \"DNA helicase\", \"ec\" => \"3.6.4.12\", \"confidence\" => 0.92),\n    Dict(\"gene\" => \"gene_2\", \"function\" => \"Transcriptional regulator\", \"ec\" => \"\", \"confidence\" => 0.78),\n    Dict(\"gene\" => \"gene_3\", \"function\" => \"Ribosomal protein L1\", \"ec\" => \"\", \"confidence\" => 0.95),\n    Dict(\"gene\" => \"gene_4\", \"function\" => \"Hypothetical protein\", \"ec\" => \"\", \"confidence\" => 0.45),\n    Dict(\"gene\" => \"gene_5\", \"function\" => \"ATP synthase subunit\", \"ec\" => \"3.6.3.14\", \"confidence\" => 0.88)\n]\n\nprintln(\"Functional Annotation Results:\")\nfor annot in functional_annotations\n    ec_str = annot[\"ec\"] != \"\" ? \" (EC: $(annot[\"ec\"]))\" : \"\"\n    println(\"  $(annot[\"gene\"]): $(annot[\"function\"])$ec_str [$(annot[\"confidence\"])]\")\nend","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Database-Annotation","page":"Tutorial 6: Gene Annotation","title":"Database Annotation","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Annotate genes using specialized databases","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Database Annotation ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement database annotation","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"BLAST against Swiss-Prot\nSearch COG database\nQuery KEGG pathways\nCheck specialized databases","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Gene-Ontology-Annotation","page":"Tutorial 6: Gene Annotation","title":"Gene Ontology Annotation","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Assign GO terms for standardized functional description","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Gene Ontology Annotation ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement GO annotation","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Assign GO terms\nValidate GO term relationships\nCalculate GO term confidence\nGenerate GO term summaries","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Simulate GO annotation results","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"go_annotations = [\n    Dict(\"gene\" => \"gene_1\", \"go_terms\" => [\"GO:0003678\", \"GO:0006310\"], \"aspect\" => [\"MF\", \"BP\"]),\n    Dict(\"gene\" => \"gene_2\", \"go_terms\" => [\"GO:0003677\", \"GO:0006355\"], \"aspect\" => [\"MF\", \"BP\"]),\n    Dict(\"gene\" => \"gene_3\", \"go_terms\" => [\"GO:0003735\", \"GO:0006412\"], \"aspect\" => [\"MF\", \"BP\"]),\n    Dict(\"gene\" => \"gene_4\", \"go_terms\" => [], \"aspect\" => []),\n    Dict(\"gene\" => \"gene_5\", \"go_terms\" => [\"GO:0046933\", \"GO:0015986\"], \"aspect\" => [\"MF\", \"BP\"])\n]\n\nprintln(\"GO Annotation Results:\")\nfor annot in go_annotations\n    if !isempty(annot[\"go_terms\"])\n        println(\"  $(annot[\"gene\"]): $(join(annot[\"go_terms\"], \", \"))\")\n    else\n        println(\"  $(annot[\"gene\"]): No GO terms assigned\")\n    end\nend","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Part-4:-Annotation-Quality-Assessment","page":"Tutorial 6: Gene Annotation","title":"Part 4: Annotation Quality Assessment","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Evaluate the quality and completeness of annotations","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"\\n=== Annotation Quality Assessment ===\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Annotation-Completeness","page":"Tutorial 6: Gene Annotation","title":"Annotation Completeness","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Assess what fraction of genes have functional annotations","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Annotation Completeness ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Calculate annotation statistics","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"total_genes = length(predicted_genes)\nfunctionally_annotated = sum([annot[\"function\"] != \"Hypothetical protein\" for annot in functional_annotations])\nec_annotated = sum([annot[\"ec\"] != \"\" for annot in functional_annotations])\ngo_annotated = sum([!isempty(annot[\"go_terms\"]) for annot in go_annotations])\n\nannotation_stats = Dict(\n    \"total_genes\" => total_genes,\n    \"functionally_annotated\" => functionally_annotated,\n    \"ec_annotated\" => ec_annotated,\n    \"go_annotated\" => go_annotated,\n    \"functional_coverage\" => functionally_annotated / total_genes * 100,\n    \"ec_coverage\" => ec_annotated / total_genes * 100,\n    \"go_coverage\" => go_annotated / total_genes * 100\n)\n\nprintln(\"Annotation Completeness:\")\nfor (metric, value) in annotation_stats\n    println(\"  $metric: $value\")\nend","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Annotation-Consistency","page":"Tutorial 6: Gene Annotation","title":"Annotation Consistency","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Check for consistency between different annotation methods","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Annotation Consistency ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement annotation consistency checks","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Compare ab initio vs homology predictions\nValidate functional annotations\nCheck for conflicting annotations\nAssess annotation confidence","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Annotation-Validation","page":"Tutorial 6: Gene Annotation","title":"Annotation Validation","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Validate annotations using external evidence","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Annotation Validation ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement annotation validation","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Cross-reference with literature\nValidate with experimental data\nCheck annotation standards compliance\nAssess annotation quality scores","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Part-5:-Comparative-Annotation","page":"Tutorial 6: Gene Annotation","title":"Part 5: Comparative Annotation","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Use comparative genomics to improve annotation quality","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"\\n=== Comparative Annotation ===\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Ortholog-Identification","page":"Tutorial 6: Gene Annotation","title":"Ortholog Identification","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Identify corresponding genes in related species","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Ortholog Identification ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement ortholog identification","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Bidirectional best hits\nOrtholog clustering\nPhylogenetic analysis\nSynteny-based validation","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Synteny-Analysis","page":"Tutorial 6: Gene Annotation","title":"Synteny Analysis","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Analyze conserved gene order for annotation validation","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Synteny Analysis ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement synteny analysis","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Identify syntenic blocks\nValidate gene annotations\nDetect gene duplications\nAnalyze evolutionary events","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Evolutionary-Analysis","page":"Tutorial 6: Gene Annotation","title":"Evolutionary Analysis","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Analyze gene evolution patterns","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Evolutionary Analysis ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement evolutionary analysis","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Selection pressure analysis\nGene family evolution\nHorizontal gene transfer detection\nPseudogene identification","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Part-6:-Specialized-Annotation-Types","page":"Tutorial 6: Gene Annotation","title":"Part 6: Specialized Annotation Types","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Handle organism-specific annotation challenges","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"\\n=== Specialized Annotation ===\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Prokaryotic-Annotation","page":"Tutorial 6: Gene Annotation","title":"Prokaryotic Annotation","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Features specific to bacterial and archaeal genomes","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Prokaryotic Annotation ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement prokaryotic-specific annotation","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Operon prediction\nSigma factor binding sites\nRibosome binding sites\nCRISPR arrays","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"prokaryotic_features = Dict(\n    \"operons\" => 3,\n    \"sigma_sites\" => 12,\n    \"ribosome_binding_sites\" => 5,\n    \"crispr_arrays\" => 1\n)\n\nprintln(\"Prokaryotic Features:\")\nfor (feature, count) in prokaryotic_features\n    println(\"  $feature: $count\")\nend","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Eukaryotic-Annotation","page":"Tutorial 6: Gene Annotation","title":"Eukaryotic Annotation","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Features specific to eukaryotic genomes","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Eukaryotic Annotation ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement eukaryotic-specific annotation","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Intron-exon structure\nAlternative splicing\nPseudogenes\nNon-coding RNAs","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Viral-Annotation","page":"Tutorial 6: Gene Annotation","title":"Viral Annotation","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Features specific to viral genomes","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Viral Annotation ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement viral-specific annotation","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Overlapping genes\nFrameshift elements\nRegulatory sequences\nHost interaction factors","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Part-7:-Annotation-Visualization","page":"Tutorial 6: Gene Annotation","title":"Part 7: Annotation Visualization","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Create visualizations for annotation results","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"\\n=== Annotation Visualization ===\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Genome-Browser-Tracks","page":"Tutorial 6: Gene Annotation","title":"Genome Browser Tracks","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Generate tracks for genome browsers","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Genome Browser Tracks ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement genome browser track generation","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Gene structure tracks\nFunctional annotation tracks\nComparative annotation tracks\nQuality assessment tracks","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Annotation-Summary-Plots","page":"Tutorial 6: Gene Annotation","title":"Annotation Summary Plots","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Create summary visualizations","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Annotation Summary Plots ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement annotation visualization","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Functional category pie charts\nAnnotation quality histograms\nComparative annotation plots\nPathway enrichment plots","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Part-8:-Annotation-File-Formats","page":"Tutorial 6: Gene Annotation","title":"Part 8: Annotation File Formats","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Work with standard annotation file formats","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"\\n=== Annotation File Formats ===\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#GFF3-Format","page":"Tutorial 6: Gene Annotation","title":"GFF3 Format","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Generate and manipulate GFF3 files","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- GFF3 Format ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement GFF3 handling","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Generate GFF3 from predictions\nValidate GFF3 format\nConvert between formats\nMerge annotation files","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Generate example GFF3 content","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"gff3_content = \"\"\"\n##gff-version 3\n##sequence-region test_genome 1 50000\ntest_genome\\tprodigal\\tgene\\t1000\\t2500\\t0.95\\t+\\t.\\tID=gene_1;Name=gene_1\ntest_genome\\tprodigal\\tCDS\\t1000\\t2500\\t0.95\\t+\\t0\\tID=cds_1;Parent=gene_1\ntest_genome\\tprodigal\\tgene\\t3000\\t4200\\t0.88\\t-\\t.\\tID=gene_2;Name=gene_2\ntest_genome\\tprodigal\\tCDS\\t3000\\t4200\\t0.88\\t-\\t0\\tID=cds_2;Parent=gene_2\n\"\"\"\n\ngff3_file = \"annotations.gff3\"\nopen(gff3_file, \"w\") do io\n    write(io, gff3_content)\nend\n\nprintln(\"GFF3 file generated: $gff3_file\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#GenBank-Format","page":"Tutorial 6: Gene Annotation","title":"GenBank Format","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Generate GenBank format files","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- GenBank Format ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement GenBank format handling","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Generate GenBank files\nInclude sequence and annotations\nValidate format compliance\nExtract annotations from GenBank","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Part-9:-Annotation-Pipelines","page":"Tutorial 6: Gene Annotation","title":"Part 9: Annotation Pipelines","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Integrate annotation steps into comprehensive pipelines","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"\\n=== Annotation Pipelines ===\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Automated-Annotation-Pipeline","page":"Tutorial 6: Gene Annotation","title":"Automated Annotation Pipeline","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Create automated annotation workflows","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Automated Pipeline ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement automated annotation pipeline","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Combine multiple prediction methods\nAutomated quality control\nStandardized output formats\nBatch processing capabilities","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Manual-Curation-Interface","page":"Tutorial 6: Gene Annotation","title":"Manual Curation Interface","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Tools for manual annotation improvement","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"--- Manual Curation ---\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"TODO: Implement manual curation tools","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Interactive annotation editor\nEvidence integration interface\nCollaborative annotation platform\nVersion control for annotations","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Part-10:-Best-Practices-and-Guidelines","page":"Tutorial 6: Gene Annotation","title":"Part 10: Best Practices and Guidelines","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Recommendations for high-quality annotation","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"\\n=== Annotation Best Practices ===\")\n\nprintln(\"General Principles:\")\nprintln(\"- Use multiple complementary approaches\")\nprintln(\"- Validate predictions with experimental data\")\nprintln(\"- Maintain annotation standards compliance\")\nprintln(\"- Document annotation procedures and evidence\")\nprintln()\nprintln(\"Quality Thresholds:\")\nprintln(\"- Functional annotation: >80% of genes\")\nprintln(\"- Homology confidence: >70% identity, >80% coverage\")\nprintln(\"- GO term coverage: >60% of genes\")\nprintln(\"- Manual validation: High-confidence predictions\")\nprintln()\nprintln(\"Organism-Specific Considerations:\")\nprintln(\"- Prokaryotes: Focus on operons and regulation\")\nprintln(\"- Eukaryotes: Handle alternative splicing carefully\")\nprintln(\"- Viruses: Account for overlapping genes\")\nprintln(\"- Metagenomes: Use taxonomic context\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/#Summary","page":"Tutorial 6: Gene Annotation","title":"Summary","text":"","category":"section"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"println(\"\\n=== Gene Annotation Summary ===\")\nprintln(\"✓ Understanding structural and functional annotation approaches\")\nprintln(\"✓ Implementing ab initio and homology-based gene prediction\")\nprintln(\"✓ Assigning functional annotations and GO terms\")\nprintln(\"✓ Evaluating annotation quality and completeness\")\nprintln(\"✓ Applying comparative annotation techniques\")\nprintln(\"✓ Handling organism-specific annotation challenges\")\nprintln(\"✓ Working with standard annotation file formats\")\nprintln(\"✓ Creating comprehensive annotation pipelines\")","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"Cleanup","category":"page"},{"location":"generated/tutorials/06_gene_annotation/","page":"Tutorial 6: Gene Annotation","title":"Tutorial 6: Gene Annotation","text":"cleanup_files = [genome_file, gff3_file]\nfor file in cleanup_files\n    if isfile(file)\n        rm(file, force=true)\n    end\nend\n\nprintln(\"\\nNext: Tutorial 7 - Comparative Genomics\")\n\nnothing","category":"page"},{"location":"api/examples/basic-workflows/#Basic-Workflows","page":"Basic Workflows","title":"Basic Workflows","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"Complete examples of common bioinformatics analysis workflows using Mycelia functions. These examples show how to combine functions from different modules to accomplish typical research tasks.","category":"page"},{"location":"api/examples/basic-workflows/#Overview","page":"Basic Workflows","title":"Overview","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"These workflows demonstrate:","category":"page"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"Complete analysis pipelines from start to finish\nFunction integration across different modules\nParameter selection for common use cases\nError handling and quality control\nResult interpretation and next steps","category":"page"},{"location":"api/examples/basic-workflows/#Workflow-1:-Bacterial-Genome-Assembly","page":"Basic Workflows","title":"Workflow 1: Bacterial Genome Assembly","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"Complete bacterial genome analysis from raw reads to annotated assembly.","category":"page"},{"location":"api/examples/basic-workflows/#Step-1:-Data-Acquisition","page":"Basic Workflows","title":"Step 1: Data Acquisition","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"import Mycelia\n\n# Download reference genome for comparison\nreference = Mycelia.download_genome_by_accession(\"NC_000913.3\")  # E. coli K-12\n\n# Or use your own sequencing data\nreads_file = \"bacterial_reads.fastq\"","category":"page"},{"location":"api/examples/basic-workflows/#Step-2:-Quality-Control","page":"Basic Workflows","title":"Step 2: Quality Control","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"# Assess initial data quality\nprintln(\"=== Initial Quality Assessment ===\")\ninitial_quality = Mycelia.analyze_fastq_quality(reads_file)\nprintln(\"Total reads: $(initial_quality.n_reads)\")\nprintln(\"Mean quality: $(initial_quality.mean_quality)\")\nprintln(\"Mean length: $(initial_quality.mean_length)\")\n\n# Filter low-quality reads\nprintln(\"\\n=== Quality Filtering ===\")\nfiltered_reads = Mycelia.filter_by_quality(\n    reads_file,\n    min_quality=25,      # Q25 threshold\n    min_length=1000,     # Minimum 1kb reads\n    max_n_percent=5      # Maximum 5% N's\n)\n\nMycelia.write_fastq(\"filtered_reads.fastq\", filtered_reads)\nprintln(\"Filtered reads: $(length(filtered_reads))\")","category":"page"},{"location":"api/examples/basic-workflows/#Step-3:-K-mer-Analysis","page":"Basic Workflows","title":"Step 3: K-mer Analysis","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"\\n=== K-mer Analysis ===\")\n# Count k-mers for genome size estimation\nkmer_counts = Mycelia.count_kmers(\"filtered_reads.fastq\", k=21)\nspectrum = Mycelia.kmer_frequency_spectrum(kmer_counts)\n\n# Estimate genome size\ngenome_size = Mycelia.estimate_genome_size_from_kmers(kmer_counts)\nprintln(\"Estimated genome size: $(genome_size.size) bp\")\nprintln(\"Estimated coverage: $(genome_size.coverage)x\")\n\n# Plot k-mer spectrum\nMycelia.plot_kmer_spectrum(spectrum, title=\"21-mer Frequency Spectrum\")","category":"page"},{"location":"api/examples/basic-workflows/#Step-4:-Genome-Assembly","page":"Basic Workflows","title":"Step 4: Genome Assembly","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"\\n=== Genome Assembly ===\")\n# Assemble genome using hifiasm (for HiFi reads) or adjust for your data type\nassembly_result = Mycelia.assemble_genome(\n    \"filtered_reads.fastq\",\n    assembler=\"hifiasm\",     # Use \"spades\" for Illumina\n    output_dir=\"assembly\",\n    threads=8,\n    min_contig_length=500\n)\n\nprintln(\"Assembly completed: $(assembly_result.contigs)\")","category":"page"},{"location":"api/examples/basic-workflows/#Step-5:-Assembly-Validation","page":"Basic Workflows","title":"Step 5: Assembly Validation","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"\\n=== Assembly Validation ===\")\n# Calculate assembly statistics\nassembly_stats = Mycelia.calculate_assembly_stats(assembly_result.contigs)\nprintln(\"Assembly Statistics:\")\nprintln(\"  Contigs: $(assembly_stats.n_contigs)\")\nprintln(\"  Total length: $(assembly_stats.total_length) bp\")\nprintln(\"  N50: $(assembly_stats.n50)\")\nprintln(\"  Largest contig: $(assembly_stats.largest_contig)\")\n\n# Validate assembly quality\nvalidation_result = Mycelia.validate_assembly(\n    assembly_result.contigs,\n    \"filtered_reads.fastq\",\n    reference_genome=reference\n)\n\nprintln(\"Assembly Quality:\")\nprintln(\"  Completeness: $(validation_result.completeness)%\")\nprintln(\"  Accuracy: $(validation_result.accuracy)%\")","category":"page"},{"location":"api/examples/basic-workflows/#Step-6:-Gene-Annotation","page":"Basic Workflows","title":"Step 6: Gene Annotation","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"\\n=== Gene Annotation ===\")\n# Predict genes\npredicted_genes = Mycelia.predict_genes(\n    assembly_result.contigs,\n    method=\"prodigal\",\n    genetic_code=\"standard\"\n)\n\nprintln(\"Predicted genes: $(length(predicted_genes))\")\n\n# Functional annotation\nfunctional_annotations = Mycelia.annotate_functions(\n    predicted_genes,\n    database=\"uniprot\",\n    evalue_threshold=1e-5\n)\n\nprintln(\"Functionally annotated genes: $(Mycelia.count_annotated(functional_annotations)))\")\n\n# Save annotations\nMycelia.write_gff3(\"bacterial_genome.gff3\", predicted_genes, functional_annotations)","category":"page"},{"location":"api/examples/basic-workflows/#Step-7:-Results-Summary","page":"Basic Workflows","title":"Step 7: Results Summary","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"\\n=== Analysis Summary ===\")\nprintln(\"Workflow completed successfully!\")\nprintln(\"Files generated:\")\nprintln(\"  - filtered_reads.fastq: Quality-controlled reads\")\nprintln(\"  - assembly/contigs.fasta: Assembled genome\")\nprintln(\"  - bacterial_genome.gff3: Gene annotations\")\nprintln(\"  - assembly_stats.json: Assembly statistics\")","category":"page"},{"location":"api/examples/basic-workflows/#Workflow-2:-Comparative-Genomics-Analysis","page":"Basic Workflows","title":"Workflow 2: Comparative Genomics Analysis","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"Compare multiple bacterial genomes to build a pangenome and phylogenetic tree.","category":"page"},{"location":"api/examples/basic-workflows/#Step-1:-Data-Preparation","page":"Basic Workflows","title":"Step 1: Data Preparation","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"# Download multiple related genomes\nspecies_genomes = [\n    \"GCF_000005825.2\",  # E. coli K-12 MG1655\n    \"GCF_000009605.1\",  # Salmonella enterica\n    \"GCF_000027325.1\",  # Yersinia pestis\n    \"GCF_000006945.2\",  # Shigella flexneri\n]\n\nprintln(\"=== Downloading Genomes ===\")\ngenome_files = []\nfor accession in species_genomes\n    result = Mycelia.ncbi_genome_download_accession(accession)\n    push!(genome_files, result.genome)\n    println(\"Downloaded: $accession\")\nend","category":"page"},{"location":"api/examples/basic-workflows/#Step-2:-Gene-Prediction","page":"Basic Workflows","title":"Step 2: Gene Prediction","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"\\n=== Gene Prediction ===\")\nall_genes = []\nfor (i, genome_file) in enumerate(genome_files)\n    genes = Mycelia.predict_genes(genome_file, method=\"prodigal\")\n    push!(all_genes, genes)\n    println(\"Genome $i: $(length(genes)) genes predicted\")\nend","category":"page"},{"location":"api/examples/basic-workflows/#Step-3:-Pangenome-Construction","page":"Basic Workflows","title":"Step 3: Pangenome Construction","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"\\n=== Pangenome Construction ===\")\n# Build pangenome from all genomes\npangenome = Mycelia.build_pangenome(\n    all_genes,\n    similarity_threshold=0.9,\n    coverage_threshold=0.8\n)\n\nprintln(\"Pangenome Statistics:\")\nprintln(\"  Core genes: $(pangenome.core_genes)\")\nprintln(\"  Accessory genes: $(pangenome.accessory_genes)\")\nprintln(\"  Unique genes: $(pangenome.unique_genes)\")\nprintln(\"  Total gene families: $(pangenome.total_families)\")\n\n# Visualize pangenome\nMycelia.plot_pangenome_heatmap(pangenome, title=\"Gene Presence/Absence Matrix\")","category":"page"},{"location":"api/examples/basic-workflows/#Step-4:-Phylogenetic-Analysis","page":"Basic Workflows","title":"Step 4: Phylogenetic Analysis","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"\\n=== Phylogenetic Analysis ===\")\n# Extract core genes for phylogeny\ncore_gene_alignments = Mycelia.extract_core_gene_alignments(pangenome)\n\n# Build phylogenetic tree\nphylo_tree = Mycelia.build_phylogenetic_tree(\n    core_gene_alignments,\n    method=\"ml\",\n    model=\"GTR+G\",\n    bootstrap=100\n)\n\nprintln(\"Phylogenetic tree constructed with $(Mycelia.get_bootstrap_support(phylo_tree)) average support\")\n\n# Visualize tree\nMycelia.plot_phylogenetic_tree(phylo_tree, layout=\"rectangular\", show_support=true)","category":"page"},{"location":"api/examples/basic-workflows/#Step-5:-Functional-Analysis","page":"Basic Workflows","title":"Step 5: Functional Analysis","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"\\n=== Functional Analysis ===\")\n# Analyze functional categories\nfunctional_analysis = Mycelia.analyze_pangenome_functions(pangenome)\n\nprintln(\"Functional Distribution:\")\nfor (category, count) in functional_analysis.categories\n    println(\"  $category: $count genes\")\nend\n\n# Identify core vs accessory functional differences\nfunctional_comparison = Mycelia.compare_core_accessory_functions(pangenome)","category":"page"},{"location":"api/examples/basic-workflows/#Workflow-3:-Quality-Control-Pipeline","page":"Basic Workflows","title":"Workflow 3: Quality Control Pipeline","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"Comprehensive quality control workflow for different sequencing platforms.","category":"page"},{"location":"api/examples/basic-workflows/#HiFi-Sequencing-Data","page":"Basic Workflows","title":"HiFi Sequencing Data","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"=== HiFi Quality Control ===\")\n\n# HiFi-specific quality assessment\nhifi_quality = Mycelia.assess_hifi_quality(\"hifi_reads.fastq\")\nprintln(\"HiFi Quality Metrics:\")\nprintln(\"  Mean accuracy: $(hifi_quality.mean_accuracy)\")\nprintln(\"  Mean length: $(hifi_quality.mean_length)\")\nprintln(\"  Length N50: $(hifi_quality.length_n50)\")\n\n# HiFi-optimized filtering\nhifi_filtered = Mycelia.filter_hifi_reads(\n    \"hifi_reads.fastq\",\n    min_accuracy=0.99,\n    min_length=5000,\n    max_length=30000\n)\n\nprintln(\"HiFi reads after filtering: $(length(hifi_filtered))\")","category":"page"},{"location":"api/examples/basic-workflows/#Illumina-Sequencing-Data","page":"Basic Workflows","title":"Illumina Sequencing Data","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"\\n=== Illumina Quality Control ===\")\n\n# Paired-end Illumina data\nillumina_quality = Mycelia.assess_illumina_quality(\"illumina_R1.fastq\", \"illumina_R2.fastq\")\n\n# Remove adapters and low-quality bases\ncleaned_reads = Mycelia.preprocess_illumina_reads(\n    \"illumina_R1.fastq\", \"illumina_R2.fastq\",\n    adapter_removal=true,\n    quality_trimming=true,\n    min_quality=20,\n    min_length=50\n)\n\nMycelia.write_fastq(\"illumina_R1_clean.fastq\", cleaned_reads.read1)\nMycelia.write_fastq(\"illumina_R2_clean.fastq\", cleaned_reads.read2)","category":"page"},{"location":"api/examples/basic-workflows/#Nanopore-Sequencing-Data","page":"Basic Workflows","title":"Nanopore Sequencing Data","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"\\n=== Nanopore Quality Control ===\")\n\n# Nanopore-specific assessment\nnanopore_quality = Mycelia.assess_nanopore_quality(\"nanopore_reads.fastq\")\n\n# Filter based on quality and length\nnanopore_filtered = Mycelia.filter_nanopore_reads(\n    \"nanopore_reads.fastq\",\n    min_quality=7,       # Lower threshold for Nanopore\n    min_length=500,\n    max_length=100000\n)","category":"page"},{"location":"api/examples/basic-workflows/#Workflow-4:-Assembly-Optimization","page":"Basic Workflows","title":"Workflow 4: Assembly Optimization","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"Optimize assembly parameters for best results.","category":"page"},{"location":"api/examples/basic-workflows/#Parameter-Testing","page":"Basic Workflows","title":"Parameter Testing","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"=== Assembly Parameter Optimization ===\")\n\n# Test different k-mer sizes\nk_values = [19, 21, 25, 31, 35]\nassembly_results = []\n\nfor k in k_values\n    println(\"Testing k=$k...\")\n    result = Mycelia.assemble_genome(\n        \"reads.fastq\",\n        assembler=\"hifiasm\",\n        k=k,\n        output_dir=\"assembly_k$k\"\n    )\n    \n    stats = Mycelia.calculate_assembly_stats(result.contigs)\n    push!(assembly_results, (k=k, n50=stats.n50, contigs=stats.n_contigs))\nend\n\n# Find optimal k-mer size\noptimal_k = Mycelia.find_optimal_assembly_parameters(assembly_results)\nprintln(\"Optimal k-mer size: $(optimal_k.k)\")","category":"page"},{"location":"api/examples/basic-workflows/#Multi-Assembler-Comparison","page":"Basic Workflows","title":"Multi-Assembler Comparison","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"\\n=== Multi-Assembler Comparison ===\")\n\nassemblers = [\"hifiasm\", \"canu\", \"flye\"]\nassembler_results = []\n\nfor assembler in assemblers\n    println(\"Running $assembler...\")\n    result = Mycelia.assemble_genome(\n        \"reads.fastq\",\n        assembler=assembler,\n        output_dir=\"assembly_$assembler\"\n    )\n    \n    validation = Mycelia.validate_assembly(result.contigs, \"reads.fastq\")\n    push!(assembler_results, (\n        assembler=assembler,\n        n50=validation.n50,\n        completeness=validation.completeness\n    ))\nend\n\n# Select best assembler\nbest_assembler = Mycelia.select_best_assembly(assembler_results)\nprintln(\"Best assembler: $(best_assembler.assembler)\")","category":"page"},{"location":"api/examples/basic-workflows/#Workflow-5:-Contamination-Detection-and-Removal","page":"Basic Workflows","title":"Workflow 5: Contamination Detection and Removal","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"Comprehensive contamination screening and removal pipeline.","category":"page"},{"location":"api/examples/basic-workflows/#Multi-Source-Contamination-Screening","page":"Basic Workflows","title":"Multi-Source Contamination Screening","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"println(\"=== Contamination Screening ===\")\n\n# Screen for multiple contamination sources\ncontamination_results = Mycelia.screen_all_contamination(\n    \"reads.fastq\",\n    host_genome=\"human_genome.fasta\",\n    vector_db=\"vector_database.fasta\",\n    adapter_db=\"adapter_sequences.fasta\"\n)\n\nprintln(\"Contamination Summary:\")\nprintln(\"  Host contamination: $(contamination_results.host_rate)%\")\nprintln(\"  Vector contamination: $(contamination_results.vector_rate)%\")\nprintln(\"  Adapter contamination: $(contamination_results.adapter_rate)%\")\n\n# Remove all contamination\nclean_reads = Mycelia.remove_all_contamination(\n    \"reads.fastq\",\n    contamination_results\n)\n\nMycelia.write_fastq(\"decontaminated_reads.fastq\", clean_reads)","category":"page"},{"location":"api/examples/basic-workflows/#Error-Handling-and-Robustness","page":"Basic Workflows","title":"Error Handling and Robustness","text":"","category":"section"},{"location":"api/examples/basic-workflows/#Robust-Pipeline-with-Error-Handling","page":"Basic Workflows","title":"Robust Pipeline with Error Handling","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"function robust_genome_analysis(reads_file::String)\n    try\n        # Quality control with validation\n        if !isfile(reads_file)\n            error(\"Input file not found: $reads_file\")\n        end\n        \n        quality_data = Mycelia.analyze_fastq_quality(reads_file)\n        if quality_data.mean_quality < 15\n            @warn \"Low quality data detected (Q$(quality_data.mean_quality))\"\n        end\n        \n        # Assembly with retry logic\n        assembly_result = nothing\n        for attempt in 1:3\n            try\n                assembly_result = Mycelia.assemble_genome(reads_file)\n                break\n            catch e\n                @warn \"Assembly attempt $attempt failed: $e\"\n                if attempt == 3\n                    rethrow(e)\n                end\n            end\n        end\n        \n        # Validation with quality checks\n        validation = Mycelia.validate_assembly(assembly_result.contigs, reads_file)\n        if validation.completeness < 90\n            @warn \"Low assembly completeness: $(validation.completeness)%\"\n        end\n        \n        return assembly_result\n        \n    catch e\n        @error \"Analysis failed\" exception=(e, catch_backtrace())\n        return nothing\n    end\nend","category":"page"},{"location":"api/examples/basic-workflows/#Performance-Optimization","page":"Basic Workflows","title":"Performance Optimization","text":"","category":"section"},{"location":"api/examples/basic-workflows/#Memory-Efficient-Large-File-Processing","page":"Basic Workflows","title":"Memory-Efficient Large File Processing","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"function process_large_dataset(large_file::String)\n    # Check available memory\n    available_memory = Mycelia.get_available_memory_gb()\n    if available_memory < 8\n        @warn \"Limited memory available: $(available_memory)GB\"\n    end\n    \n    # Use streaming for large files\n    file_size_gb = filesize(large_file) / 1024^3\n    if file_size_gb > available_memory / 2\n        println(\"Using streaming processing for $(file_size_gb)GB file\")\n        return Mycelia.stream_kmer_counting(large_file, k=21, chunk_size=50000)\n    else\n        return Mycelia.count_kmers(large_file, k=21)\n    end\nend","category":"page"},{"location":"api/examples/basic-workflows/#Next-Steps","page":"Basic Workflows","title":"Next Steps","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"After completing these basic workflows, you can:","category":"page"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"Explore advanced techniques in Advanced Usage\nCustomize parameters using the Parameter Guide\nIntegrate external tools following Tool Integration (planned)\nScale to HPC systems with Deployment Guide","category":"page"},{"location":"api/examples/basic-workflows/#See-Also","page":"Basic Workflows","title":"See Also","text":"","category":"section"},{"location":"api/examples/basic-workflows/","page":"Basic Workflows","title":"Basic Workflows","text":"Function Index - Complete function reference\nWorkflow-Specific Guides - Detailed workflow documentation\nTutorials - Step-by-step learning materials\nFAQ - Common questions and troubleshooting","category":"page"},{"location":"api/workflows/sequence-analysis/#Sequence-Analysis-and-K-mers","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"Functions for analyzing sequence composition, counting k-mers, and extracting genomic features from sequencing data.","category":"page"},{"location":"api/workflows/sequence-analysis/#Overview","page":"Sequence Analysis & K-mers","title":"Overview","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"Sequence analysis forms the foundation of many bioinformatics algorithms. Mycelia provides comprehensive tools for:","category":"page"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"K-mer counting and analysis using efficient algorithms\nGenome size estimation from k-mer frequency spectra\nError detection and correction using k-mer patterns\nSequence composition analysis and bias detection\nMemory-efficient processing of large datasets","category":"page"},{"location":"api/workflows/sequence-analysis/#Common-Workflows","page":"Sequence Analysis & K-mers","title":"Common Workflows","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#1.-Basic-K-mer-Analysis","page":"Sequence Analysis & K-mers","title":"1. Basic K-mer Analysis","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Count k-mers in sequencing reads\nkmer_counts = Mycelia.count_kmers(\"reads.fastq\", k=21)\n\n# Analyze k-mer frequency spectrum\nspectrum = Mycelia.kmer_frequency_spectrum(kmer_counts)","category":"page"},{"location":"api/workflows/sequence-analysis/#2.-Genome-Size-Estimation","page":"Sequence Analysis & K-mers","title":"2. Genome Size Estimation","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Estimate genome size from k-mer spectrum\ngenome_size = Mycelia.estimate_genome_size_from_kmers(kmer_counts, coverage_peak=30)","category":"page"},{"location":"api/workflows/sequence-analysis/#3.-Contamination-Detection","page":"Sequence Analysis & K-mers","title":"3. Contamination Detection","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Detect contamination using k-mer profiles\ncontamination = Mycelia.detect_contamination_kmers(\"reads.fastq\", expected_profile)","category":"page"},{"location":"api/workflows/sequence-analysis/#K-mer-Counting","page":"Sequence Analysis & K-mers","title":"K-mer Counting","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#Basic-K-mer-Counting","page":"Sequence Analysis & K-mers","title":"Basic K-mer Counting","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#Mycelia.count_kmers","page":"Sequence Analysis & K-mers","title":"Mycelia.count_kmers","text":"count_kmers(\n    _::Type{Kmers.Kmer{A<:BioSequences.DNAAlphabet, K}},\n    sequence::BioSequences.LongSequence\n) -> Any\n\n\nCount the frequency of each k-mer in a DNA sequence.\n\nArguments\n\n::Type{Kmers.Kmer{A,K}}: K-mer type with alphabet A and length K\nsequence::BioSequences.LongSequence: Input DNA sequence to analyze\n\nReturns\n\nA sorted dictionary mapping each k-mer to its frequency count in the sequence.\n\nType Parameters\n\nA <: BioSequences.DNAAlphabet: DNA alphabet type\nK: Length of k-mers\n\n\n\n\n\ncount_kmers(\n    _::Type{Kmers.Kmer{A<:BioSequences.RNAAlphabet, K}},\n    sequence::BioSequences.LongSequence\n) -> Any\n\n\nCount the frequency of each k-mer in an RNA sequence.\n\nArguments\n\nKmer: Type parameter specifying the k-mer length K and RNA alphabet\nsequence: Input RNA sequence to analyze\n\nReturns\n\nDict{Kmers.Kmer, Int}: Sorted dictionary mapping each k-mer to its frequency count\n\n\n\n\n\ncount_kmers(\n    _::Type{Kmers.Kmer{A<:BioSequences.AminoAcidAlphabet, K}},\n    sequence::BioSequences.LongSequence\n) -> OrderedCollections.OrderedDict{K, Int64} where K<:(Kmers.Kmer{BioSequences.AminoAcidAlphabet, _A, _B} where {_B, _A})\n\n\nCount the frequency of amino acid k-mers in a biological sequence.\n\nArguments\n\nKmers.Kmer{A,K}: Type parameter specifying amino acid alphabet (A) and k-mer length (K)\nsequence: Input biological sequence to analyze\n\nReturns\n\nA sorted dictionary mapping each k-mer to its frequency count in the sequence.\n\n\n\n\n\ncount_kmers(\n    _::Type{KMER_TYPE},\n    record::Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}\n) -> Any\n\n\nCount the frequency of amino acid k-mers in a biological sequence.\n\nArguments\n\nKmers.Kmer{A,K}: Type parameter specifying amino acid alphabet (A) and k-mer length (K)\nsequence: Input biological sequence to analyze\n\nReturns\n\nA sorted dictionary mapping each k-mer to its frequency count in the sequence.\n\n\n\n\n\ncount_kmers(\n    _::Type{KMER_TYPE},\n    records::AbstractArray{T<:Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}, 1}\n) -> Any\n\n\nCount k-mers across multiple sequence records and return a sorted frequency table.\n\nArguments\n\nKMER_TYPE: Type parameter specifying the k-mer length (e.g., DNAKmer{3} for 3-mers)\nrecords: Vector of FASTA/FASTQ records to analyze\n\nReturns\n\nDict{KMER_TYPE, Int}: Sorted dictionary mapping k-mers to their frequencies\n\n\n\n\n\ncount_kmers(\n    _::Type{KMER_TYPE},\n    sequences::Union{FASTX.FASTA.Reader, FASTX.FASTQ.Reader}\n) -> Any\n\n\nCounts k-mer occurrences in biological sequences from a FASTA/FASTQ reader.\n\nArguments\n\nKMER_TYPE: Type parameter specifying the k-mer length and encoding (e.g., DNAKmer{4} for 4-mers)\nsequences: A FASTA or FASTQ reader containing the biological sequences to analyze\n\nReturns\n\nA dictionary mapping k-mers to their counts in the input sequences\n\n\n\n\n\ncount_kmers(\n    _::Type{KMER_TYPE},\n    fastx_files::AbstractArray{T<:AbstractString, 1}\n) -> Any\n\n\nCount k-mers across multiple FASTA/FASTQ files and merge the results.\n\nArguments\n\nKMER_TYPE: Type parameter specifying the k-mer length (e.g., DNAKmer{4} for 4-mers)\nfastx_files: Vector of paths to FASTA/FASTQ files\n\nReturns\n\nDict{KMER_TYPE, Int}: Dictionary mapping k-mers to their total counts across all files\n\n\n\n\n\ncount_kmers(\n    _::Type{KMER_TYPE},\n    fastx_file::AbstractString\n) -> Any\n\n\nCount k-mers in a FASTA/FASTQ file and return their frequencies.\n\nArguments\n\nKMER_TYPE: Type parameter specifying the k-mer type (e.g., DNAKmer{K})\nfastx_file: Path to input FASTA/FASTQ file\n\nReturns\n\nDict{KMER_TYPE, Int}: Dictionary mapping each k-mer to its frequency\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/sequence-analysis/#Mycelia.count_canonical_kmers","page":"Sequence Analysis & K-mers","title":"Mycelia.count_canonical_kmers","text":"count_canonical_kmers(_::Type{KMER_TYPE}, sequences) -> Any\n\n\nCount canonical k-mers in biological sequences. A canonical k-mer is the lexicographically  smaller of a DNA sequence and its reverse complement, ensuring strand-independent counting.\n\nArguments\n\nKMER_TYPE: Type parameter specifying the k-mer size and structure\nsequences: Iterator of biological sequences to analyze\n\nReturns\n\nDict{KMER_TYPE,Int}: Dictionary mapping canonical k-mers to their counts\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/sequence-analysis/#Mycelia.fasta_list_to_dense_kmer_counts","page":"Sequence Analysis & K-mers","title":"Mycelia.fasta_list_to_dense_kmer_counts","text":"fasta_list_to_dense_kmer_counts(\n;\n    fasta_list,\n    k,\n    alphabet,\n    temp_dir_parent,\n    count_element_type,\n    result_file,\n    force,\n    cleanup_temp,\n    force_threading,\n    force_temp_files,\n    force_progress_bars,\n    threading_file_threshold,\n    threading_size_threshold,\n    memory_safety_factor,\n    progress_time_threshold\n)\n\n\nCreate a dense k-mer counts table for a set of FASTA files, with disk-backed temporary storage,  custom element type, robust error handling, and optional output file caching.\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/sequence-analysis/#Mycelia.fasta_list_to_sparse_kmer_counts","page":"Sequence Analysis & K-mers","title":"Mycelia.fasta_list_to_sparse_kmer_counts","text":"fasta_list_to_sparse_kmer_counts(\n;\n    fasta_list,\n    k,\n    alphabet,\n    temp_dir_parent,\n    count_element_type,\n    rarefaction_data_filename,\n    rarefaction_plot_basename,\n    show_rarefaction_plot,\n    skip_rarefaction_plot,\n    result_file,\n    out_dir,\n    force,\n    force_threading,\n    force_temp_files,\n    force_progress_bars,\n    skip_rarefaction_data,\n    threading_file_threshold,\n    threading_size_threshold,\n    memory_safety_factor,\n    progress_time_threshold,\n    rarefaction_plot_kwargs...\n)\n\n\nCreate a sparse kmer counts table (SparseMatrixCSC) from a list of FASTA files using a 3-pass approach. Pass 1 (Parallel): Counts kmers per file and writes to temporary JLD2 files. Pass 2 (Serial): Aggregates unique kmers, max count, nnz per file, and rarefaction data from temp files.                  Generates and saves a k-mer rarefaction plot. Pass 3 (Parallel): Reads temporary counts again to construct the final sparse matrix.\n\nOptionally, a results filename can be provided to save/load the output. If the file exists and force is false, the result is loaded and returned. If force is true or the file does not exist, results are computed and saved.\n\nOutput Directory Behavior\n\nAll auxiliary output files (e.g., rarefaction data, plots) are written to a common output directory.\nBy default, this is:\nThe value of out_dir if provided.\nOtherwise, the directory containing result_file (if provided and has a directory component).\nOtherwise, the current working directory (pwd()).\nIf you provide an absolute path for an output file (e.g. rarefaction_data_filename), that path is used directly.\nIf both out_dir and a relative filename are given, the file is written to out_dir.\n\nArguments\n\nfasta_list::AbstractVector{<:AbstractString}: A list of paths to FASTA files.\nk::Integer: The length of the kmer.\nalphabet::Symbol: The alphabet type (:AA, :DNA, :RNA).\ntemp_dir_parent::AbstractString: Parent directory for creating the temporary working directory. Defaults to Base.tempdir().\ncount_element_type::Union{Type{<:Unsigned}, Nothing}: Optional. Specifies the unsigned integer type for the counts. If nothing (default), the smallest UInt type capable of holding the maximum observed count is used.\nrarefaction_data_filename::AbstractString: Filename for the TSV output of rarefaction data. If a relative path, will be written to out_dir.\nrarefaction_plot_basename::AbstractString: Basename for the output rarefaction plots. If a relative path, will be written to out_dir.\nshow_rarefaction_plot::Bool: Whether to display the rarefaction plot after generation. Defaults to true.\nskip_rarefaction_plot::Bool: If true, completely skip rarefaction plot generation (including loading plotting libraries). Defaults to false.\nresult_file::Union{Nothing, AbstractString}: Optional. If provided, path to a file to save/load the full results (kmers, counts, etc) as a JLD2 file.\nout_dir::Union{Nothing, AbstractString}: Optional. Output directory for auxiliary outputs. Defaults as described above.\nforce::Bool: If true, recompute and overwrite the output file even if it exists. Defaults to false.\nrarefaction_plot_kwargs...: Keyword arguments to pass to plot_kmer_rarefaction for plot customization.\n\nReturns\n\nNamedTuple{(:kmers, :counts, :rarefaction_data_path)}:\nkmers: A sorted Vector of unique kmer objects.\ncounts: A SparseArrays.SparseMatrixCSC{V, Int} storing kmer counts.\nrarefaction_data_path: Path to the saved TSV file with rarefaction data.\n\nRaises\n\nErrorException: If input fasta_list is empty, alphabet is invalid, or required Kmer/counting functions are not found.\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/sequence-analysis/#Example:-K-mer-Counting-Comparison","page":"Sequence Analysis & K-mers","title":"Example: K-mer Counting Comparison","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Compare different k-mer counting approaches\nreads_file = \"reads.fastq\"\n\n# Dense counting (stores all possible k-mers)\ndense_counts = Mycelia.count_kmers(reads_file, k=15, method=\"dense\")\nprintln(\"Dense matrix size: $(size(dense_counts))\")\n\n# Sparse counting (only observed k-mers)\nsparse_counts = Mycelia.count_kmers(reads_file, k=21, method=\"sparse\")\nprintln(\"Unique k-mers: $(length(sparse_counts))\")\n\n# Canonical k-mers (combines forward and reverse complement)\ncanonical_counts = Mycelia.count_canonical_kmers(reads_file, k=21)\nprintln(\"Canonical k-mers: $(length(canonical_counts))\")","category":"page"},{"location":"api/workflows/sequence-analysis/#Advanced-K-mer-Analysis","page":"Sequence Analysis & K-mers","title":"Advanced K-mer Analysis","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"<!– buildkmergraph, findkmeroverlaps, extractkmerpaths, analyzekmerconnectivity not yet implemented as documented –>","category":"page"},{"location":"api/workflows/sequence-analysis/#Mycelia.build_kmer_graph_next","page":"Sequence Analysis & K-mers","title":"Mycelia.build_kmer_graph_next","text":"build_kmer_graph_next(\n    kmer_type,\n    observations::AbstractVector{<:Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}};\n    graph_mode\n) -> MetaGraphsNext.MetaGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Label, VertexData, EdgeData, Nothing, WeightFunction, Float64} where {Label, VertexData, EdgeData, WeightFunction}\n\n\nCreate a next-generation, type-stable k-mer graph using MetaGraphsNext.\n\nThis implementation uses canonical k-mers as vertices with strand-aware edges that respect biological transition constraints for both single-strand and double-strand sequences.\n\nArguments\n\nkmer_type: Type of k-mer (e.g., DNAKmer{K})\nobservations: Vector of FASTA/FASTQ records\ngraph_mode: SingleStrand for directional sequences, DoubleStrand for DNA (default)\n\nReturns\n\nMetaGraphsNext.MetaGraph with canonical vertices and strand-aware edges\n\nDetails\n\nVertices: Always canonical k-mers (lexicographically smaller of kmer/reverse_complement)\nEdges: Strand-aware transitions that respect biological constraints\nSingleStrand mode: Only forward-strand transitions allowed\nDoubleStrand mode: Both forward and reverse-complement transitions allowed\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/sequence-analysis/#Mycelia.build_stranded_kmer_graph","page":"Sequence Analysis & K-mers","title":"Mycelia.build_stranded_kmer_graph","text":"build_stranded_kmer_graph(\n    kmer_type,\n    observations::AbstractVector{<:Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}}\n) -> MetaGraphs.MetaDiGraph{T, Float64} where T<:Integer\n\n\nCreate a weighted, strand-specific kmer (de bruijn) graph from a set of kmers and a series of sequence observations in FASTA format.\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/sequence-analysis/#Mycelia.build_directed_kmer_graph","page":"Sequence Analysis & K-mers","title":"Mycelia.build_directed_kmer_graph","text":"build_directed_kmer_graph(; fastq, k, plot)\n\n\nConstructs a directed graph representation of k-mer transitions from FASTQ sequencing data.\n\nArguments\n\nfastq: Path to input FASTQ file\nk: K-mer size (default: 1). Must be odd and prime. If k=1, optimal size is auto-determined\nplot: Boolean to display quality distribution plot (default: false)\n\nReturns\n\nMetaDiGraph with properties:\n\nassembly_k: k-mer size used\nkmer_counts: frequency of each k-mer\ntransition_likelihoods: edge weights between k-mers\nkmermeanquality, kmertotalquality: quality metrics\nbranchingnodes, unbranchingnodes: topological classification\nlikelyvalidkmer_indices: k-mers above mean quality threshold\nlikelysequencingartifact_indices: potential erroneous k-mers\n\nNote\n\nFor DNA assembly, quality scores are normalized across both strands.\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/sequence-analysis/#Example:-K-mer-Graph-Construction","page":"Sequence Analysis & K-mers","title":"Example: K-mer Graph Construction","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Build k-mer overlap graph\nkmer_graph = Mycelia.build_kmer_graph(\n    sequences,\n    k=31,\n    min_overlap=20,\n    min_coverage=5\n)\n\n# Analyze graph properties\ngraph_stats = Mycelia.analyze_kmer_connectivity(kmer_graph)\nprintln(\"Graph nodes: $(graph_stats.n_nodes)\")\nprintln(\"Graph edges: $(graph_stats.n_edges)\")\nprintln(\"Connected components: $(graph_stats.n_components)\")","category":"page"},{"location":"api/workflows/sequence-analysis/#K-mer-Frequency-Analysis","page":"Sequence Analysis & K-mers","title":"K-mer Frequency Analysis","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#Frequency-Spectra","page":"Sequence Analysis & K-mers","title":"Frequency Spectra","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"<!– kmerfrequencyspectrum, analyzespectrumpeaks, fitspectrummodel not yet implemented as documented –>","category":"page"},{"location":"api/workflows/sequence-analysis/#Mycelia.jellyfish_counts_to_kmer_frequency_histogram","page":"Sequence Analysis & K-mers","title":"Mycelia.jellyfish_counts_to_kmer_frequency_histogram","text":"jellyfish_counts_to_kmer_frequency_histogram(\n    jellyfish_counts_file\n) -> Any\njellyfish_counts_to_kmer_frequency_histogram(\n    jellyfish_counts_file,\n    outfile\n) -> Any\n\n\nConvert a Jellyfish k-mer count file into a frequency histogram.\n\nArguments\n\njellyfish_counts_file::String: Path to the gzipped TSV file containing Jellyfish k-mer counts\noutfile::String=replace(jellyfish_counts_file, r\"\\.tsv\\.gz$\" => \".count_histogram.tsv\"): Optional output file path\n\nReturns\n\nString: Path to the generated histogram file\n\nDescription\n\nProcesses a Jellyfish k-mer count file to create a frequency histogram where:\n\nColumn 1: Number of k-mers that share the same count\nColumn 2: The count they share\n\nUses system sorting with LC_ALL=C for optimal performance on large files.\n\nNotes\n\nRequires gzip, sort, uniq, and sed command line tools\nUses intermediate disk storage for sorting large files\nSkips processing if output file already exists\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/sequence-analysis/#Mycelia.plot_kmer_frequency_spectra","page":"Sequence Analysis & K-mers","title":"Mycelia.plot_kmer_frequency_spectra","text":"plot_kmer_frequency_spectra(\n    counts;\n    log_scale,\n    kwargs...\n) -> Plots.Plot\n\n\nPlots a histogram of kmer counts against # of kmers with those counts\n\nReturns the plot object for adding additional layers and saving\n\nCreates a scatter plot visualizing the k-mer frequency spectrum - the relationship between k-mer frequencies and how many k-mers occur at each frequency.\n\nArguments\n\ncounts::AbstractVector{<:Integer}: Vector of k-mer counts/frequencies\nlog_scale::Union{Function,Nothing} = log2: Function to apply logarithmic scaling to both axes. Set to nothing to use linear scaling.\nkwargs...: Additional keyword arguments passed to StatsPlots.plot()\n\nReturns\n\nPlots.Plot: A scatter plot object that can be further modified or saved\n\nDetails\n\nThe x-axis shows k-mer frequencies (how many times each k-mer appears), while the y-axis shows how many distinct k-mers appear at each frequency. Both axes are log-scaled by default using log2.\n\n\n\n\n\n","category":"function"},{"location":"api/workflows/sequence-analysis/#Example:-K-mer-Spectrum-Analysis","page":"Sequence Analysis & K-mers","title":"Example: K-mer Spectrum Analysis","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Generate and analyze k-mer frequency spectrum\nkmer_counts = Mycelia.count_kmers(\"reads.fastq\", k=21)\nspectrum = Mycelia.kmer_frequency_spectrum(kmer_counts)\n\n# Identify characteristic peaks\npeaks = Mycelia.analyze_spectrum_peaks(spectrum)\nprintln(\"Coverage peak at frequency: $(peaks.main_peak)\")\nprintln(\"Error peak at frequency: $(peaks.error_peak)\")\n\n# Fit mathematical model to spectrum\nmodel = Mycelia.fit_spectrum_model(spectrum, model_type=\"negative_binomial\")\nprintln(\"Model fit R²: $(model.r_squared)\")","category":"page"},{"location":"api/workflows/sequence-analysis/#Genome-Characteristics-from-K-mers","page":"Sequence Analysis & K-mers","title":"Genome Characteristics from K-mers","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"<!– estimategenomesizefromkmers, estimatecoveragefromkmers, detectrepetitivekmers, calculategenome_complexity not yet implemented as documented –>","category":"page"},{"location":"api/workflows/sequence-analysis/#Example:-Genome-Size-Estimation","page":"Sequence Analysis & K-mers","title":"Example: Genome Size Estimation","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Estimate genome size using k-mer spectrum\nkmer_counts = Mycelia.count_kmers(\"reads.fastq\", k=21)\nspectrum = Mycelia.kmer_frequency_spectrum(kmer_counts)\n\n# Find coverage peak\ncoverage_peak = Mycelia.find_coverage_peak(spectrum)\nprintln(\"Estimated coverage: $(coverage_peak)x\")\n\n# Calculate genome size\ntotal_kmers = sum(spectrum.frequencies .* spectrum.counts)\ngenome_size = total_kmers ÷ coverage_peak\nprintln(\"Estimated genome size: $(genome_size) bp\")\n\n# Alternative method with error correction\ncorrected_estimate = Mycelia.estimate_genome_size_from_kmers(\n    kmer_counts,\n    error_correction=true,\n    ploidy=1\n)\nprintln(\"Corrected genome size: $(corrected_estimate.size) bp\")\nprintln(\"Confidence interval: $(corrected_estimate.confidence_interval)\")","category":"page"},{"location":"api/workflows/sequence-analysis/#Error-Detection-and-Correction","page":"Sequence Analysis & K-mers","title":"Error Detection and Correction","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#K-mer-Based-Error-Detection","page":"Sequence Analysis & K-mers","title":"K-mer Based Error Detection","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"<!– identifyerrorkmers, correctsequencingerrors, validateerrorcorrection not yet implemented as documented –>","category":"page"},{"location":"api/workflows/sequence-analysis/#Example:-Error-Detection","page":"Sequence Analysis & K-mers","title":"Example: Error Detection","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Identify likely error k-mers\nerror_kmers = Mycelia.identify_error_kmers(\n    kmer_counts,\n    min_coverage=3,\n    max_coverage=100\n)\n\nprintln(\"Potential error k-mers: $(length(error_kmers))\")\nprintln(\"Error rate estimate: $(length(error_kmers) / length(kmer_counts) * 100)%\")\n\n# Correct errors in reads\ncorrected_reads = Mycelia.correct_sequencing_errors(\n    \"reads.fastq\",\n    error_kmers,\n    correction_method=\"consensus\"\n)\n\n# Validate correction effectiveness\nvalidation = Mycelia.validate_error_correction(\n    \"reads.fastq\",\n    corrected_reads,\n    reference_genome=\"reference.fasta\"\n)\nprintln(\"Error reduction: $(validation.error_reduction_percent)%\")","category":"page"},{"location":"api/workflows/sequence-analysis/#Sequence-Composition-Analysis","page":"Sequence Analysis & K-mers","title":"Sequence Composition Analysis","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#Nucleotide-Composition","page":"Sequence Analysis & K-mers","title":"Nucleotide Composition","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"<!– calculatenucleotidefrequencies, analyzedinucleotidefrequencies, calculatecodonusage, detectsequencebias not yet implemented as documented –>","category":"page"},{"location":"api/workflows/sequence-analysis/#Example:-Comprehensive-Composition-Analysis","page":"Sequence Analysis & K-mers","title":"Example: Comprehensive Composition Analysis","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Analyze nucleotide composition\ncomposition = Mycelia.calculate_nucleotide_frequencies(\"sequences.fasta\")\nprintln(\"GC content: $(composition.gc_content)%\")\nprintln(\"AT content: $(composition.at_content)%\")\n\n# Dinucleotide analysis\ndinuc_freq = Mycelia.analyze_dinucleotide_frequencies(\"sequences.fasta\")\nprintln(\"CpG frequency: $(dinuc_freq.CG)\")\nprintln(\"Expected CpG: $(dinuc_freq.expected_CG)\")\nprintln(\"CpG O/E ratio: $(dinuc_freq.CG_oe_ratio)\")\n\n# Detect composition bias\nbias_analysis = Mycelia.detect_sequence_bias(composition)\nif bias_analysis.bias_detected\n    println(\"Sequence bias detected:\")\n    println(\"  Type: $(bias_analysis.bias_type)\")\n    println(\"  Strength: $(bias_analysis.bias_strength)\")\nend","category":"page"},{"location":"api/workflows/sequence-analysis/#Codon-Usage-Analysis","page":"Sequence Analysis & K-mers","title":"Codon Usage Analysis","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"<!– calculatecodonusage, analyzecodonbias, comparecodonusage, optimizecodonusage not yet implemented as documented –>","category":"page"},{"location":"api/workflows/sequence-analysis/#Example:-Codon-Usage-Analysis","page":"Sequence Analysis & K-mers","title":"Example: Codon Usage Analysis","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Analyze codon usage in coding sequences\ncds_file = \"coding_sequences.fasta\"\ncodon_usage = Mycelia.calculate_codon_usage(cds_file, genetic_code=\"standard\")\n\n# Calculate codon bias metrics\nbias_metrics = Mycelia.analyze_codon_bias(codon_usage)\nprintln(\"Effective Number of Codons (ENC): $(bias_metrics.enc)\")\nprintln(\"Codon Adaptation Index (CAI): $(bias_metrics.cai)\")\nprintln(\"Frequency of Optimal Codons (FOP): $(bias_metrics.fop)\")\n\n# Compare with reference organism\nreference_usage = Mycelia.load_reference_codon_usage(\"escherichia_coli\")\ncomparison = Mycelia.compare_codon_usage(codon_usage, reference_usage)\nprintln(\"Similarity to E. coli: $(comparison.similarity_score)\")","category":"page"},{"location":"api/workflows/sequence-analysis/#Memory-Efficient-Processing","page":"Sequence Analysis & K-mers","title":"Memory-Efficient Processing","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#Large-Dataset-Handling","page":"Sequence Analysis & K-mers","title":"Large Dataset Handling","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"<!– streamkmercounting, processkmersinchunks, parallelkmeranalysis, memoryefficient_counting not yet implemented as documented –>","category":"page"},{"location":"api/workflows/sequence-analysis/#Example:-Large-File-Processing","page":"Sequence Analysis & K-mers","title":"Example: Large File Processing","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Process large files with memory constraints\nlarge_file = \"large_dataset.fastq\"\n\n# Stream processing for memory efficiency\nkmer_counts = Mycelia.stream_kmer_counting(\n    large_file,\n    k=21,\n    chunk_size=100000,\n    memory_limit_gb=8\n)\n\n# Parallel processing for speed\nparallel_counts = Mycelia.parallel_kmer_analysis(\n    large_file,\n    k=21,\n    n_workers=8,\n    merge_strategy=\"sum\"\n)","category":"page"},{"location":"api/workflows/sequence-analysis/#Optimized-Data-Structures","page":"Sequence Analysis & K-mers","title":"Optimized Data Structures","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"<!– createsparsekmermatrix, buildcompressedkmerindex, usebloomfiltercounting, implementcountminsketch not yet implemented as documented –>","category":"page"},{"location":"api/workflows/sequence-analysis/#Example:-Memory-Optimization","page":"Sequence Analysis & K-mers","title":"Example: Memory Optimization","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Use probabilistic data structures for very large datasets\nbloom_filter = Mycelia.create_kmer_bloom_filter(\n    estimated_kmers=1_000_000_000,\n    false_positive_rate=0.01\n)\n\n# Streaming k-mer presence testing\nfor read in Mycelia.stream_fastq(\"huge_dataset.fastq\")\n    for kmer in Mycelia.extract_kmers(read, k=21)\n        if Mycelia.probably_present(bloom_filter, kmer)\n            # Process likely present k-mer\n            Mycelia.process_kmer(kmer)\n        end\n    end\nend","category":"page"},{"location":"api/workflows/sequence-analysis/#Comparative-K-mer-Analysis","page":"Sequence Analysis & K-mers","title":"Comparative K-mer Analysis","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#Multi-Sample-Analysis","page":"Sequence Analysis & K-mers","title":"Multi-Sample Analysis","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"<!– comparekmerprofiles, buildkmerdistancematrix, clusterbykmersimilarity, identifysamplespecific_kmers not yet implemented as documented –>","category":"page"},{"location":"api/workflows/sequence-analysis/#Example:-Multi-Sample-K-mer-Comparison","page":"Sequence Analysis & K-mers","title":"Example: Multi-Sample K-mer Comparison","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Compare k-mer profiles across multiple samples\nsample_files = [\"sample1.fastq\", \"sample2.fastq\", \"sample3.fastq\"]\n\n# Build k-mer profiles for each sample\nprofiles = [Mycelia.count_kmers(file, k=21) for file in sample_files]\n\n# Calculate pairwise distances\ndistance_matrix = Mycelia.build_kmer_distance_matrix(profiles, metric=\"jaccard\")\nprintln(\"Pairwise k-mer distances:\")\ndisplay(distance_matrix)\n\n# Cluster samples by k-mer similarity\nclusters = Mycelia.cluster_by_kmer_similarity(profiles, method=\"hierarchical\")\nprintln(\"Sample clusters: $(clusters)\")","category":"page"},{"location":"api/workflows/sequence-analysis/#Contamination-Detection","page":"Sequence Analysis & K-mers","title":"Contamination Detection","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"<!– detectcontaminationkmers, identifyforeignkmers, classifykmersources, removecontaminatingkmers not yet implemented as documented –>","category":"page"},{"location":"api/workflows/sequence-analysis/#Example:-Contamination-Detection","page":"Sequence Analysis & K-mers","title":"Example: Contamination Detection","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Detect contamination using k-mer profiles\nsample_kmers = Mycelia.count_kmers(\"sample.fastq\", k=21)\nreference_kmers = Mycelia.count_kmers(\"reference_genome.fasta\", k=21)\n\n# Identify foreign k-mers\nforeign_kmers = Mycelia.identify_foreign_kmers(\n    sample_kmers,\n    reference_kmers,\n    min_abundance=5\n)\n\ncontamination_rate = length(foreign_kmers) / length(sample_kmers)\nprintln(\"Contamination rate: $(contamination_rate * 100)%\")\n\n# Classify contamination sources\ncontamination_sources = Mycelia.classify_kmer_sources(\n    foreign_kmers,\n    database_kmers=[\"human\", \"bacterial\", \"viral\"]\n)\n\nfor (source, proportion) in contamination_sources\n    println(\"$(source): $(proportion * 100)%\")\nend","category":"page"},{"location":"api/workflows/sequence-analysis/#Visualization-and-Reporting","page":"Sequence Analysis & K-mers","title":"Visualization and Reporting","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#K-mer-Plots","page":"Sequence Analysis & K-mers","title":"K-mer Plots","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"<!– plotkmerspectrum, plotkmercomposition, plotgenomesizeestimation, createkmer_dashboard not yet implemented as individual functions –>","category":"page"},{"location":"api/workflows/sequence-analysis/#Example:-K-mer-Visualization","page":"Sequence Analysis & K-mers","title":"Example: K-mer Visualization","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Create comprehensive k-mer analysis plots\nkmer_counts = Mycelia.count_kmers(\"reads.fastq\", k=21)\n\n# K-mer frequency spectrum\nspectrum_plot = Mycelia.plot_kmer_spectrum(kmer_counts, \n                                  title=\"21-mer Frequency Spectrum\",\n                                  log_scale=true)\n\n# Genome size estimation plot\nsize_plot = Mycelia.plot_genome_size_estimation(kmer_counts,\n                                       show_confidence_interval=true)\n\n# Combined dashboard\nkmer_dashboard = Mycelia.create_kmer_dashboard(kmer_counts)\nMycelia.save_plot(kmer_dashboard, \"kmer_analysis.png\")","category":"page"},{"location":"api/workflows/sequence-analysis/#Performance-Considerations","page":"Sequence Analysis & K-mers","title":"Performance Considerations","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#Algorithm-Selection","page":"Sequence Analysis & K-mers","title":"Algorithm Selection","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"Dense matrices: Use for small k (k ≤ 12) or small genomes\nSparse matrices: Use for large k (k ≥ 15) or large genomes\nStreaming: Use for memory-constrained environments\nParallel processing: Use for time-critical applications","category":"page"},{"location":"api/workflows/sequence-analysis/#Memory-Usage","page":"Sequence Analysis & K-mers","title":"Memory Usage","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"k=15: ~1 GB for dense counting\nk=21: ~17 GB for dense counting (use sparse)\nk=31: Sparse counting only\nLarge genomes: Consider streaming or chunked processing","category":"page"},{"location":"api/workflows/sequence-analysis/#Computational-Complexity","page":"Sequence Analysis & K-mers","title":"Computational Complexity","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"Time: O(n) for sequence length n\nSpace: O(4^k) for dense, O(unique k-mers) for sparse\nParallel: Near-linear speedup for independent samples","category":"page"},{"location":"api/workflows/sequence-analysis/#Common-Issues-and-Solutions","page":"Sequence Analysis & K-mers","title":"Common Issues and Solutions","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#Memory-Limitations","page":"Sequence Analysis & K-mers","title":"Memory Limitations","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Handle memory constraints\nif Mycelia.estimate_memory_usage(file, k=21) > Mycelia.available_memory()\n    # Use streaming approach\n    kmer_counts = Mycelia.stream_kmer_counting(file, k=21, chunk_size=50000)\nelse\n    # Use standard approach\n    kmer_counts = Mycelia.count_kmers(file, k=21)\nend","category":"page"},{"location":"api/workflows/sequence-analysis/#Parameter-Selection","page":"Sequence Analysis & K-mers","title":"Parameter Selection","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"# Choose optimal k-mer size\noptimal_k = Mycelia.select_optimal_k(\n    genome_size_estimate=5_000_000,\n    error_rate=0.01,\n    coverage=30\n)\nprintln(\"Recommended k-mer size: $(optimal_k)\")","category":"page"},{"location":"api/workflows/sequence-analysis/#Related-Functions","page":"Sequence Analysis & K-mers","title":"Related Functions","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#Data-Structures","page":"Sequence Analysis & K-mers","title":"Data Structures","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"KmerCounts - K-mer count data structure\nKmerSpectrum - Frequency spectrum representation\nKmerGraph - K-mer overlap graph","category":"page"},{"location":"api/workflows/sequence-analysis/#File-I/O","page":"Sequence Analysis & K-mers","title":"File I/O","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"read_fastq - Read sequence files\nsave_kmer_counts - Save k-mer counts\nload_kmer_counts - Load saved counts","category":"page"},{"location":"api/workflows/sequence-analysis/#Related-Workflows","page":"Sequence Analysis & K-mers","title":"Related Workflows","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/#Previous-Steps","page":"Sequence Analysis & K-mers","title":"Previous Steps","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"Quality Control - Preprocess reads before k-mer analysis","category":"page"},{"location":"api/workflows/sequence-analysis/#Next-Steps","page":"Sequence Analysis & K-mers","title":"Next Steps","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"Genome Assembly (planned) - Use k-mer analysis for assembly\nComparative Genomics (planned) - Compare k-mer profiles","category":"page"},{"location":"api/workflows/sequence-analysis/#See-Also","page":"Sequence Analysis & K-mers","title":"See Also","text":"","category":"section"},{"location":"api/workflows/sequence-analysis/","page":"Sequence Analysis & K-mers","title":"Sequence Analysis & K-mers","text":"Tutorial 3: K-mer Analysis\nAssembly Workflows (planned)\nPerformance Optimization","category":"page"},{"location":"api-reference/#API-Reference","page":"Complete API Reference","title":"API Reference","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"This page provides comprehensive documentation for all public functions in Mycelia, automatically generated from docstrings.","category":"page"},{"location":"api-reference/#Table-of-Contents","page":"Complete API Reference","title":"Table of Contents","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Pages = [\"api-reference.md\"]\nDepth = 3","category":"page"},{"location":"api-reference/#Assembly-Functions","page":"Complete API Reference","title":"Assembly Functions","text":"","category":"section"},{"location":"api-reference/#Intelligent-Assembly","page":"Complete API Reference","title":"Intelligent Assembly","text":"","category":"section"},{"location":"api-reference/#Mycelia.mycelia_assemble-Tuple{Vector{<:FASTX.FASTQ.Record}}","page":"Complete API Reference","title":"Mycelia.mycelia_assemble","text":"Main Mycelia intelligent assembly algorithm. Implements iterative prime k-mer progression with error correction.\n\n\n\n\n\n","category":"method"},{"location":"api-reference/#Mycelia.mycelia_assemble-Tuple{Union{String, Vector{String}}}","page":"Complete API Reference","title":"Mycelia.mycelia_assemble","text":"mycelia_assemble(\n    input_file::Union{String, Vector{String}};\n    output_dir,\n    max_k,\n    memory_limit,\n    verbose\n) -> Dict\n\n\nUser-friendly wrapper for intelligent assembly that accepts file paths.\n\nArguments\n\ninput_file::Union{String, Vector{String}}: Path to FASTQ file(s) or directory containing FASTQ files\noutput_dir::String: Directory to write assembly results (default: \"mycelia_assembly\")\nmax_k::Int: Maximum k-mer size to try (default: 101)\nmemory_limit::Int: Memory limit in bytes (default: 32GB)\nverbose::Bool: Print progress information (default: true)\n\nReturns\n\nAssembly results dictionary with contigs, statistics, and metadata\n\nExamples\n\n# Assemble single file\nresults = Mycelia.mycelia_assemble(\"reads.fastq\")\n\n# Assemble with custom parameters\nresults = Mycelia.mycelia_assemble(\"reads.fastq\", \n                                  output_dir=\"my_assembly\",\n                                  max_k=51, \n                                  memory_limit=4_000_000_000)\n\n# Assemble multiple files (will be merged)\nresults = Mycelia.mycelia_assemble([\"reads1.fastq\", \"reads2.fastq\"])\n\nNotes\n\nInput files can be gzipped (.gz extension)\nUses intelligent k-mer selection and error correction\nAutomatically creates output directory if it doesn't exist\nProgress is saved incrementally for long assemblies\n\n\n\n\n\n","category":"method"},{"location":"api-reference/#Assembly-Utilities","page":"Complete API Reference","title":"Assembly Utilities","text":"","category":"section"},{"location":"api-reference/#Mycelia.dynamic_k_prime_pattern","page":"Complete API Reference","title":"Mycelia.dynamic_k_prime_pattern","text":"dynamic_k_prime_pattern() -> Vector{Int64}\ndynamic_k_prime_pattern(start_prime::Int64) -> Vector{Int64}\ndynamic_k_prime_pattern(\n    start_prime::Int64,\n    max_k::Int64\n) -> Vector{Int64}\ndynamic_k_prime_pattern(\n    start_prime::Int64,\n    max_k::Int64,\n    initial_step::Int64\n) -> Vector{Int64}\n\n\nGenerate optimal k-mer sizes using dynamic prime pattern algorithm.\n\nBased on the novel k-primes pattern from Mycelia-Dev research. This algorithm generates a sequence of prime numbers with progressively increasing gaps, providing computational efficiency through:\n\nTwin prime avoidance (skips one member of twin prime pairs)\nProgressive spacing reduces computational overlap\nBuilt-in prime discovery without pre-computation\n\nArguments\n\nstart_prime::Int: Initial prime number (default: 11, optimal for strain-level resolution)\nmax_k::Int: Maximum k-mer size to consider (default: 101)\ninitial_step::Int: Initial step size (default: 2)\n\nReturns\n\nVector{Int}: Sequence of prime k-mer sizes with progressive spacing\n\nAlgorithm\n\nStart with initial prime and step size\nEach iteration: current_prime += step, then step += 2\nContinue while result remains prime and ≤ max_k\nNatural stopping when non-prime encountered\n\nExample\n\n# Generates: [11, 13, 17, 23, 31, 41, 53, 67, 83, 101]\nks = dynamic_k_prime_pattern(11, 101, 2)\n\n# For error-prone data, start smaller\nks = dynamic_k_prime_pattern(7, 51, 2)  # [7, ...]\n\nReferences\n\nBased on k-primes-pattern.ipynb from Mycelia-Dev research demonstrating mathematical elegance of using prime number distribution for genomic analysis optimization.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.error_optimized_k_sequence","page":"Complete API Reference","title":"Mycelia.error_optimized_k_sequence","text":"error_optimized_k_sequence(\n    error_rate::Float64\n) -> Vector{Int64}\nerror_optimized_k_sequence(\n    error_rate::Float64,\n    max_k::Int64\n) -> Vector{Int64}\nerror_optimized_k_sequence(\n    error_rate::Float64,\n    max_k::Int64,\n    sequence_length::Union{Nothing, Int64}\n) -> Vector{Int64}\n\n\nGenerate k-mer sizes optimized for specific error rates using mathematical foundation.\n\nCombines the error rate formula from Mycelia-Dev research with dynamic prime pattern generation for optimal k-mer selection.\n\nArguments\n\nerror_rate::Float64: Expected sequencing error rate (0.0-1.0)\nmax_k::Int: Maximum k-mer size to consider (default: 101)\nsequence_length::Union{Int, Nothing}: Optional sequence length for log4 optimization\n\nReturns\n\nVector{Int}: Optimally spaced prime k-mer sizes\n\nAlgorithm\n\nCalculate lower bound: lower_bound_k = max(3, Int(floor(1/error_rate - 1)))\nIf sequencelength provided, optimize using log4(sequencelength) pattern\nGenerate dynamic prime pattern starting from optimal lower bound\n\nExample\n\n# For 1% error rate data\nks = error_optimized_k_sequence(0.01)  # Starts around k=99\n\n# For 5% error rate with known sequence length  \nks = error_optimized_k_sequence(0.05, 101, 10000)  # Optimized for 10kb sequences\n\nMathematical Foundation\n\nLower bound formula: k >= 1/error_rate - 1\nLog4 optimization: optimal_k ≈ log4(sequence_length) for divergence point\nProgressive spacing reduces redundant analysis\n\nReferences\n\nBased on 2020-12-22 k-mer size selection and 2020-12-19 error rate analysis from Mycelia-Dev research.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.calculate_assembly_reward","page":"Complete API Reference","title":"Mycelia.calculate_assembly_reward","text":"Calculate reward for current k-mer processing iteration. Higher rewards indicate better assembly quality progress.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Qualmer-Analysis","page":"Complete API Reference","title":"Qualmer Analysis","text":"","category":"section"},{"location":"api-reference/#Core-Qualmer-Types","page":"Complete API Reference","title":"Core Qualmer Types","text":"","category":"section"},{"location":"api-reference/#Mycelia.Qualmer","page":"Complete API Reference","title":"Mycelia.Qualmer","text":"struct Qualmer{KmerT, K}\n\nA quality-aware k-mer that pairs sequence k-mers with their corresponding quality scores.\n\nFields\n\nkmer::Any\nqualities::Tuple{Vararg{UInt8, K}} where K\n\nExamples\n\nusing Mycelia\nusing Kmers\n\n# Create a DNA k-mer with quality scores\nkmer = DNAKmer(\"ATCG\")\nqualities = [30, 35, 32, 28]  # Phred quality scores\nqmer = Qualmer(kmer, qualities)\n\n# Access individual bases and qualities\nbase, quality = qmer[1]  # Returns ('A', 30)\n\nThis structure is essential for quality-aware sequence analysis and assembly algorithms that consider both sequence content and sequencing quality information.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/#Mycelia.QualmerVertexData","page":"Complete API Reference","title":"Mycelia.QualmerVertexData","text":"struct QualmerVertexData{QualmerT<:Mycelia.Qualmer}\n\nVertex data for quality-aware k-mer graphs that stores k-mer observations with quality scores.\n\nFields\n\ncanonical_qualmer::Mycelia.Qualmer\nobservations::Array{Mycelia.QualmerObservation{QualmerT}, 1} where QualmerT<:Mycelia.Qualmer\njoint_probability::Float64\ncoverage::Int64\nmean_quality::Float64\n\nThis structure aggregates multiple observations of the same k-mer and computes quality-based statistics for use in quality-aware assembly algorithms.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/#Mycelia.QualmerEdgeData","page":"Complete API Reference","title":"Mycelia.QualmerEdgeData","text":"struct QualmerEdgeData\n\nEdge data for quality-aware k-mer graphs that connects k-mer vertices with strand information.\n\nFields\n\nobservations::Vector{Tuple{Int64, Int64}}\nsrc_strand::Mycelia.StrandOrientation\ndst_strand::Mycelia.StrandOrientation\nweight::Float64\nquality_weight::Float64\n\nThis structure represents connections between k-mers in quality-aware graphs, including strand orientation and quality-weighted edge weights for assembly algorithms.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/#Qualmer-Generation","page":"Complete API Reference","title":"Qualmer Generation","text":"","category":"section"},{"location":"api-reference/#Mycelia.qualmers_fw","page":"Complete API Reference","title":"Mycelia.qualmers_fw","text":"qualmers_fw(\n    sequence::BioSequences.LongSequence{A},\n    quality::AbstractVector{<:Integer},\n    _::Val{K}\n) -> Base.Generator{I, F} where {I<:(Base.Iterators.Enumerate{I} where I<:(Kmers.FwKmers{A, _A, S} where {A<:BioSequences.Alphabet, _A, S<:(BioSequences.LongSequence{A} where A)})), F<:(Mycelia.var\"#253#254\"{_A, <:AbstractVector{var\"#s34\"}} where {_A, var\"#s34\"<:Integer})}\n\n\nCreate an iterator that yields DNA qualmers from the given sequence and quality scores.\n\n\n\n\n\nqualmers_fw(\n    record::FASTX.FASTQ.Record,\n    k::Int64\n) -> Base.Generator\n\n\nGenerate forward qualmers from a FASTQ record. Extracts all k-mers in the forward direction with their associated quality scores from the FASTQ record.\n\nArguments\n\nrecord: FASTQ record containing sequence and quality data\nk: K-mer size\n\nReturns\n\nIterator yielding (Qualmer, position) tuples for each k-mer\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.qualmers_canonical","page":"Complete API Reference","title":"Mycelia.qualmers_canonical","text":"qualmers_canonical(\n    sequence::BioSequences.LongSequence{BioSequences.DNAAlphabet{N}},\n    quality::AbstractVector{<:Integer},\n    _::Val{K}\n) -> Base.Generator{I, F} where {I<:(Base.Iterators.Enumerate{I} where I<:(Kmers.FwKmers{A, _A, S} where {A<:(BioSequences.DNAAlphabet), _A, S<:(BioSequences.LongDNA)})), F<:(Mycelia.var\"#259#260\"{_A, <:AbstractVector{var\"#s34\"}} where {_A, var\"#s34\"<:Integer})}\n\n\nGenerate canonical DNA qualmers from sequence and quality scores. For each k-mer, returns the lexicographically smaller of the k-mer and its reverse complement, ensuring consistent representation regardless of strand.\n\nArguments\n\nsequence: DNA sequence as LongDNA\nquality: Vector of quality scores corresponding to each base\n::Val{K}: K-mer size as a type parameter\n\nReturns\n\nIterator yielding (Qualmer, position) tuples with canonical k-mer representation\n\n\n\n\n\nqualmers_canonical(\n    sequence::BioSequences.LongAA,\n    quality::AbstractVector{<:Integer},\n    _::Val{K}\n) -> Base.Generator{I, F} where {I<:(Base.Iterators.Enumerate{I} where I<:(Kmers.FwAAMers{_A, BioSequences.LongAA} where _A)), F<:(Mycelia.var\"#253#254\"{_A, <:AbstractVector{var\"#s36\"}} where {_A, var\"#s36\"<:Integer})}\n\n\nGenerate canonical amino acid qualmers from protein sequence and quality scores. For amino acid sequences, canonical representation is the same as forward representation since proteins don't have reverse complements.\n\nArguments\n\nsequence: Protein sequence as LongAA\nquality: Vector of quality scores corresponding to each amino acid\n::Val{K}: K-mer size as a type parameter\n\nReturns\n\nIterator yielding (Qualmer, position) tuples for each k-mer\n\n\n\n\n\nqualmers_canonical(\n    record::FASTX.FASTQ.Record,\n    k::Int64\n) -> Base.Generator\n\n\nGenerate canonical qualmers from a FASTQ record. Extracts k-mers in canonical representation (lexicographically smaller of forward and reverse complement) with their associated quality scores.\n\nArguments\n\nrecord: FASTQ record containing sequence and quality data\nk: K-mer size\n\nReturns\n\nIterator yielding (Qualmer, position) tuples with canonical k-mer representation\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.qualmers_unambiguous","page":"Complete API Reference","title":"Mycelia.qualmers_unambiguous","text":"qualmers_unambiguous(\n    sequence::BioSequences.LongSequence{BioSequences.DNAAlphabet{N}},\n    quality::AbstractVector{<:Integer},\n    _::Val{K}\n) -> Base.Generator{I, F} where {I<:(Kmers.UnambiguousDNAMers{_A, S} where {_A, S<:(BioSequences.LongDNA)}), F<:(Mycelia.var\"#255#256\"{_A, <:AbstractVector{var\"#s34\"}} where {_A, var\"#s34\"<:Integer})}\n\n\nGenerate unambiguous DNA qualmers from sequence and quality scores. Only includes k-mers that contain unambiguous nucleotides (A, T, G, C). Skips k-mers containing ambiguous bases like N.\n\nArguments\n\nsequence: DNA sequence as LongDNA\nquality: Vector of quality scores corresponding to each base\n::Val{K}: K-mer size as a type parameter\n\nReturns\n\nIterator yielding (Qualmer, position) tuples for each unambiguous k-mer\n\n\n\n\n\nqualmers_unambiguous(\n    sequence::BioSequences.LongSequence{BioSequences.RNAAlphabet{N}},\n    quality::AbstractVector{<:Integer},\n    _::Val{K}\n) -> Base.Generator{I, F} where {I<:(Kmers.UnambiguousRNAMers{_A, S} where {_A, S<:(BioSequences.LongRNA)}), F<:(Mycelia.var\"#257#258\"{_A, <:AbstractVector{var\"#s34\"}} where {_A, var\"#s34\"<:Integer})}\n\n\nGenerate unambiguous RNA qualmers from sequence and quality scores. Only includes k-mers that contain unambiguous nucleotides (A, U, G, C). Skips k-mers containing ambiguous bases like N.\n\nArguments\n\nsequence: RNA sequence as LongRNA\nquality: Vector of quality scores corresponding to each base\n::Val{K}: K-mer size as a type parameter\n\nReturns\n\nIterator yielding (Qualmer, position) tuples for each unambiguous k-mer\n\n\n\n\n\nqualmers_unambiguous(\n    sequence::BioSequences.LongAA,\n    quality::AbstractVector{<:Integer},\n    _::Val{K}\n) -> Base.Generator{I, F} where {I<:(Base.Iterators.Enumerate{I} where I<:(Kmers.FwAAMers{_A, BioSequences.LongAA} where _A)), F<:(Mycelia.var\"#253#254\"{_A, <:AbstractVector{var\"#s36\"}} where {_A, var\"#s36\"<:Integer})}\n\n\nGenerate amino acid qualmers from protein sequence and quality scores. For amino acid sequences, all k-mers are considered unambiguous, so this falls back to the forward qualmer generation.\n\nArguments\n\nsequence: Protein sequence as LongAA\nquality: Vector of quality scores corresponding to each amino acid\n::Val{K}: K-mer size as a type parameter\n\nReturns\n\nIterator yielding (Qualmer, position) tuples for each k-mer\n\n\n\n\n\nqualmers_unambiguous(\n    record::FASTX.FASTQ.Record,\n    k::Int64\n) -> Base.Generator\n\n\nGenerate unambiguous qualmers from a FASTQ record. Extracts only k-mers that contain unambiguous nucleotides (no N bases) with their associated quality scores.\n\nArguments\n\nrecord: FASTQ record containing sequence and quality data\nk: K-mer size\n\nReturns\n\nIterator yielding (Qualmer, position) tuples for each unambiguous k-mer\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.qualmers_unambiguous_canonical","page":"Complete API Reference","title":"Mycelia.qualmers_unambiguous_canonical","text":"qualmers_unambiguous_canonical(\n    record::FASTX.FASTQ.Record,\n    k::Int64\n) -> Base.Generator{I, Mycelia.var\"#261#262\"} where I\n\n\nGenerate unambiguous canonical qualmers from the given FASTQ record.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Quality-Analysis","page":"Complete API Reference","title":"Quality Analysis","text":"","category":"section"},{"location":"api-reference/#Mycelia.phred_to_probability","page":"Complete API Reference","title":"Mycelia.phred_to_probability","text":"phred_to_probability(phred_score::UInt8) -> Float64\n\n\nConvert PHRED quality score to probability of correctness. PHRED score Q relates to error probability P by: Q = -10 * log10(P) Therefore, correctness probability = 1 - P = 1 - 10^(-Q/10)\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.qualmer_correctness_probability","page":"Complete API Reference","title":"Mycelia.qualmer_correctness_probability","text":"qualmer_correctness_probability(\n    qmer::Mycelia.Qualmer\n) -> Float64\n\n\nCalculate joint probability that a single qualmer is correct. For a k-mer with quality scores [q1, q2, ..., qk], the joint probability that all positions are correct is: ∏(1 - 10^(-qi/10))\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.joint_qualmer_probability","page":"Complete API Reference","title":"Mycelia.joint_qualmer_probability","text":"joint_qualmer_probability(\n    qualmers::Vector{<:Mycelia.Qualmer};\n    use_log_space\n) -> Float64\n\n\nCalculate joint probability that multiple observations of the same k-mer are all correct. For independent observations of the same k-mer sequence, this represents our confidence that the k-mer truly exists in the data.\n\nArguments\n\nqualmers: Vector of Qualmer observations of the same k-mer sequence\nuse_log_space: Use log-space arithmetic for numerical stability (default: true)\n\nReturns\n\nFloat64: Joint probability that all observations are correct\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.position_wise_joint_probability","page":"Complete API Reference","title":"Mycelia.position_wise_joint_probability","text":"position_wise_joint_probability(\n    qualmers::Vector{<:Mycelia.Qualmer};\n    use_log_space\n) -> Float64\n\n\nCalculate position-wise joint probability for multiple qualmer observations. This is more sophisticated than joint_qualmer_probability as it considers the quality at each position across all observations.\n\nArguments\n\nqualmers: Vector of Qualmer observations of the same k-mer sequence\nuse_log_space: Use log-space arithmetic for numerical stability (default: true)\n\nReturns\n\nFloat64: Position-wise joint probability\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Graph-Construction","page":"Complete API Reference","title":"Graph Construction","text":"","category":"section"},{"location":"api-reference/#Mycelia.build_qualmer_graph","page":"Complete API Reference","title":"Mycelia.build_qualmer_graph","text":"build_qualmer_graph(\n    fastq_records::Vector{FASTX.FASTQ.Record};\n    k,\n    graph_mode,\n    min_quality,\n    min_coverage\n) -> MetaGraphsNext.MetaGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Label, VertexData, EdgeData, Nothing, WeightFunction, Float64} where {Label, VertexData, EdgeData, WeightFunction}\n\n\nBuild a quality-aware k-mer graph from FASTQ records using existing Qualmer functionality. This function leverages the existing qualmer extraction functions and adds graph construction.\n\nArguments\n\nfastq_records: Vector of FASTQ records with quality scores\nk: K-mer size\ngraph_mode: SingleStrand or DoubleStrand mode (default: DoubleStrand)\nmin_quality: Minimum average PHRED quality to include k-mer (default: 10)\nmin_coverage: Minimum coverage (observations) to include k-mer (default: 1)\n\nReturns\n\nMetaGraphsNext.MetaGraph with QualmerVertexData and QualmerEdgeData\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.get_qualmer_statistics","page":"Complete API Reference","title":"Mycelia.get_qualmer_statistics","text":"get_qualmer_statistics(\n    graph::MetaGraphsNext.MetaGraph\n) -> Dict{String, Any}\n\n\nGet comprehensive statistics about a qualmer graph.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#String-Graphs","page":"Complete API Reference","title":"String Graphs","text":"","category":"section"},{"location":"api-reference/#N-gram-Analysis","page":"Complete API Reference","title":"N-gram Analysis","text":"","category":"section"},{"location":"api-reference/#Mycelia.ngrams","page":"Complete API Reference","title":"Mycelia.ngrams","text":"ngrams(s::AbstractString, n::Int64) -> Any\n\n\nExtract all n-grams from a string. Returns a vector containing all contiguous substrings of length n from the input string.\n\nArguments\n\ns: Input string to extract n-grams from\nn: Length of each n-gram (must be positive)\n\nReturns\n\nVector{String}: All n-grams of length n from the string\n\nExamples\n\nngrams(\"hello\", 3)  # Returns [\"hel\", \"ell\", \"llo\"]\nngrams(\"abcd\", 2)   # Returns [\"ab\", \"bc\", \"cd\"]\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.string_to_ngram_graph","page":"Complete API Reference","title":"Mycelia.string_to_ngram_graph","text":"string_to_ngram_graph(; s, n)\n\n\nBuild a directed graph from string n-grams with edge and vertex weights. Creates a MetaGraph where vertices represent unique n-grams and edges represent transitions between consecutive n-grams in the original string.\n\nArguments\n\ns: Input string to build graph from\nn: N-gram size (length of each substring)\n\nReturns\n\nMetaGraphsNext.MetaGraph: Directed graph with:\nVertex labels: String n-grams\nVertex data: Integer counts of n-gram occurrences\nEdge data: Integer counts of n-gram transitions\n\nDetails\n\nThe graph construction process:\n\nExtract all n-grams from the string\nCount occurrences of each unique n-gram (stored as vertex data)\nCount transitions between consecutive n-grams (stored as edge data)\nBuild a directed graph representing the n-gram sequence structure\n\nExamples\n\ngraph = string_to_ngram_graph(s=\"abcabc\", n=2)\n# Creates graph with vertices \"ab\", \"bc\", \"ca\" and weighted edges\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.plot_ngram_graph","page":"Complete API Reference","title":"Mycelia.plot_ngram_graph","text":"plot_ngram_graph(g) -> Any\n\n\nCreate a visual plot of an n-gram graph using GraphPlot.jl. Displays the graph structure with vertex labels showing the n-grams.\n\nArguments\n\ng: MetaGraph containing n-gram data (typically from string_to_ngram_graph)\n\nReturns\n\nPlot object showing the graph layout with labeled vertices\n\nDetails\n\nUses a spring layout algorithm to position vertices and displays n-gram strings as vertex labels for easy interpretation of the graph structure.\n\nExamples\n\ngraph = string_to_ngram_graph(s=\"hello\", n=2)\nplot_ngram_graph(graph)  # Shows visual representation\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Graph-Simplification","page":"Complete API Reference","title":"Graph Simplification","text":"","category":"section"},{"location":"api-reference/#Mycelia.collapse_unbranching_paths","page":"Complete API Reference","title":"Mycelia.collapse_unbranching_paths","text":"Collapse linear paths (vertices with one incoming and one outgoing edge) into a simpler graph where sequences are concatenated.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.find_connected_components","page":"Complete API Reference","title":"Mycelia.find_connected_components","text":"Find all connected components in the graph. Returns a vector of vectors of vertex indices.\n\nFor directed graphs, uses weakly connected components. For undirected graphs, uses standard connected components.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.assemble_strings","page":"Complete API Reference","title":"Mycelia.assemble_strings","text":"assemble_strings(\n    graph::MetaGraphsNext.MetaGraph\n) -> Vector{String}\n\n\nAssemble strings by performing graph walks from each connected component.\n\nTraverses the string graph to reconstruct sequences by walking through connected components and assembling overlapping n-grams back into full strings.\n\nArguments\n\ngraph: MetaGraphsNext.MetaGraph containing n-gram vertices and transition edges\n\nReturns\n\nVector{String}: Assembled sequences, one for each connected component\n\nExamples\n\n# Create a string graph from overlapping sequences\ngraph = build_string_ngram_metagraph(\"ATCGATCG\", 3)\nsequences = assemble_strings(graph)\n\nThis function is useful for reconstructing original sequences from n-gram decompositions and for string-based genome assembly approaches.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Sequence-I/O","page":"Complete API Reference","title":"Sequence I/O","text":"","category":"section"},{"location":"api-reference/#File-Handling","page":"Complete API Reference","title":"File Handling","text":"","category":"section"},{"location":"api-reference/#Mycelia.open_fastx","page":"Complete API Reference","title":"Mycelia.open_fastx","text":"open_fastx(path::AbstractString) -> Any\n\n\nOpen and return a reader for FASTA or FASTQ format files.\n\nArguments\n\npath::AbstractString: Path to input file. Can be:\nLocal file path\nHTTP/FTP URL\nGzip compressed (.gz extension)\n\nSupported formats\n\nFASTA (.fasta, .fna, .faa, .fa)\nFASTQ (.fastq, .fq)\n\nReturns\n\nFASTX.FASTA.Reader for FASTA files\nFASTX.FASTQ.Reader for FASTQ files\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Format-Conversion","page":"Complete API Reference","title":"Format Conversion","text":"","category":"section"},{"location":"api-reference/#Mycelia.convert_sequence","page":"Complete API Reference","title":"Mycelia.convert_sequence","text":"convert_sequence(seq::AbstractString) -> Any\n\n\nConverts the given sequence (output from FASTX.sequence) into the appropriate BioSequence type:\n\nDNA sequences are converted using BioSequences.LongDNA\nRNA sequences are converted using BioSequences.LongRNA\nAA sequences are converted using BioSequences.LongAA\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#K-mer-Analysis","page":"Complete API Reference","title":"K-mer Analysis","text":"","category":"section"},{"location":"api-reference/#K-mer-Counting","page":"Complete API Reference","title":"K-mer Counting","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"For k-mer counting functions, see Sequence Analysis Workflow.","category":"page"},{"location":"api-reference/#Distance-Metrics","page":"Complete API Reference","title":"Distance Metrics","text":"","category":"section"},{"location":"api-reference/#Mycelia.jaccard_distance","page":"Complete API Reference","title":"Mycelia.jaccard_distance","text":"Compute the Jaccard distance between columns of a binary matrix.\n\nArguments\n\nM::AbstractMatrix{<:Integer}: Binary matrix where rows are features and columns are samples\n\nReturns\n\nMatrix{Float64}: Symmetric distance matrix with Jaccard distances\n\n\n\n\n\njaccard_distance(set1, set2) -> Any\n\n\nCalculate the Jaccard distance between two sets, which is the complement of the Jaccard similarity.\n\nThe Jaccard distance is defined as: J_d(AB) = 1 - J_s(AB) = 1 - fracA  BA  B\n\nArguments\n\nset1: First set to compare\nset2: Second set to compare\n\nReturns\n\nFloat64: A value in [0,1] where 0 indicates identical sets and 1 indicates disjoint sets\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.kmer_counts_to_js_divergence","page":"Complete API Reference","title":"Mycelia.kmer_counts_to_js_divergence","text":"kmer_counts_to_js_divergence(\n    kmer_counts_1,\n    kmer_counts_2\n) -> Any\n\n\nCalculate the Jensen-Shannon divergence between two k-mer frequency distributions.\n\nArguments\n\nkmer_counts_1: Dictionary mapping k-mers to their counts in first sequence\nkmer_counts_2: Dictionary mapping k-mers to their counts in second sequence\n\nReturns\n\nNormalized Jensen-Shannon divergence score between 0 and 1, where:\n0 indicates identical distributions\n1 indicates maximally different distributions\n\nNotes\n\nThe measure is symmetric: JS(P||Q) = JS(Q||P)\nCounts are automatically normalized to probability distributions\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Simulation-and-Testing","page":"Complete API Reference","title":"Simulation and Testing","text":"","category":"section"},{"location":"api-reference/#Read-Simulation","page":"Complete API Reference","title":"Read Simulation","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"See Data Acquisition Workflow for read simulation functions.","category":"page"},{"location":"api-reference/#Assembly-Testing","page":"Complete API Reference","title":"Assembly Testing","text":"","category":"section"},{"location":"api-reference/#Mycelia.test_intelligent_assembly","page":"Complete API Reference","title":"Mycelia.test_intelligent_assembly","text":"Test function to verify the implementation with sample data.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Quality-Control","page":"Complete API Reference","title":"Quality Control","text":"","category":"section"},{"location":"api-reference/#FASTQ-Analysis","page":"Complete API Reference","title":"FASTQ Analysis","text":"","category":"section"},{"location":"api-reference/#Mycelia.calculate_gc_content","page":"Complete API Reference","title":"Mycelia.calculate_gc_content","text":"calculate_gc_content(\n    sequence::BioSequences.LongSequence\n) -> Float64\n\n\nCalculate GC content (percentage of G and C bases) from a BioSequence.\n\nThis function calculates the percentage of guanine (G) and cytosine (C) bases in a nucleotide sequence. Works with both DNA and RNA sequences.\n\nArguments\n\nsequence::BioSequences.LongSequence: Input DNA or RNA sequence\n\nReturns\n\nFloat64: GC content as a percentage (0.0-100.0)\n\nExamples\n\n# Calculate GC content for DNA\ndna_seq = BioSequences.LongDNA{4}(\"ATCGATCGATCG\")\ngc_percent = calculate_gc_content(dna_seq)\n\n# Calculate GC content for RNA\nrna_seq = BioSequences.LongRNA{4}(\"AUCGAUCGAUCG\") \ngc_percent = calculate_gc_content(rna_seq)\n\n\n\n\n\ncalculate_gc_content(sequence::AbstractString) -> Float64\n\n\nCalculate GC content from a string sequence.\n\nConvenience function that accepts string input and converts to appropriate BioSequence. Automatically detects DNA/RNA based on presence of T/U.\n\nArguments\n\nsequence::AbstractString: Input DNA or RNA sequence as string\n\nReturns\n\nFloat64: GC content as a percentage (0.0-100.0)\n\nExamples\n\n# Calculate GC content from string\ngc_percent = calculate_gc_content(\"ATCGATCGATCG\")\n\n\n\n\n\ncalculate_gc_content(\n    records::AbstractArray{T<:Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}, 1}\n) -> Float64\n\n\nCalculate GC content from FASTA/FASTQ records.\n\nProcesses multiple records and calculates overall GC content across all sequences.\n\nArguments\n\nrecords::AbstractVector{T} where T <: Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}`: Input records\n\nReturns\n\nFloat64: Overall GC content as a percentage (0.0-100.0)\n\nExamples\n\n# Calculate GC content from FASTA records\nrecords = collect(FASTX.FASTA.Reader(open(\"sequences.fasta\")))\ngc_percent = calculate_gc_content(records)\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.assess_duplication_rates","page":"Complete API Reference","title":"Mycelia.assess_duplication_rates","text":"assess_duplication_rates(fastq; results_table) -> Any\n\n\nAnalyze sequence duplication rates in a FASTQ file.\n\nThis function processes a FASTQ file to quantify both exact sequence duplications and  canonical duplications (considering sequences and their reverse complements as equivalent). The function makes two passes through the file: first to count total records, then to analyze unique sequences.\n\nArguments\n\nfastq::String: Path to the input FASTQ file to analyze\nresults_table::String: Optional. Path where the results will be saved as a tab-separated file. Defaults to the same path as the input file but with extension changed to \".duplication_rates.tsv\"\n\nReturns\n\nString: Path to the results table file\n\nOutput\n\nGenerates a tab-separated file containing the following metrics:\n\ntotal_records: Total number of sequence records in the file\ntotal_unique_observations: Count of unique sequence strings\ntotal_unique_canonical_observations: Count of unique canonical sequences  (after normalizing for reverse complements)\npercent_unique_observations: Percentage of sequences that are unique\npercent_unique_canonical_observations: Percentage of sequences that are unique after canonicalization\npercent_duplication_rate: Percentage of sequences that are duplicates (100 - percentuniqueobservations)\npercent_canonical_duplication_rate: Percentage of sequences that are duplicates after canonicalization\n\nNotes\n\nIf the specified results file already exists and is not empty, the function will return early without recomputing.\nProgress is displayed during processing with a progress bar showing speed.\n\nExample\n\n# Analyze a FASTQ file and save results to default location\nresult_path = assess_duplication_rates(\"data/sample.fastq\")\n\n# Specify custom output path\nresult_path = assess_duplication_rates(\"data/sample.fastq\", results_table=\"results/duplication_analysis.tsv\")\n\n\n\n\n\n","category":"function"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"For FASTQ quality analysis functions, see Quality Control Workflow.","category":"page"},{"location":"api-reference/#External-Tool-Integration","page":"Complete API Reference","title":"External Tool Integration","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"For quality control and filtering functions, see Quality Control Workflow.","category":"page"},{"location":"api-reference/#Assembly-Validation","page":"Complete API Reference","title":"Assembly Validation","text":"","category":"section"},{"location":"api-reference/#Quality-Assessment","page":"Complete API Reference","title":"Quality Assessment","text":"","category":"section"},{"location":"api-reference/#Mycelia.assess_assembly_quality","page":"Complete API Reference","title":"Mycelia.assess_assembly_quality","text":"assess_assembly_quality(contigs_file)\n\nAssess basic assembly quality metrics from a FASTA file.\n\nCalculates standard assembly quality metrics including contig count, total length, and N50 statistic for assembly evaluation.\n\nArguments\n\ncontigs_file: Path to FASTA file containing assembly contigs\n\nReturns\n\nTuple of (ncontigs, totallength, n50, l50)\nn_contigs: Number of contigs in the assembly\ntotal_length: Total length of all contigs in base pairs\nn50: N50 statistic (length of shortest contig in the set covering 50% of assembly)\nl50: L50 statistic (number of contigs needed to reach 50% of assembly length)\n\nExample\n\nn_contigs, total_length, n50, l50 = assess_assembly_quality(\"assembly.fasta\")\nprintln(\"Assembly has $n_contigs contigs, $total_length bp total, N50=$n50, L50=$l50\")\n\nSee Also\n\nassess_assembly_kmer_quality: For k-mer based assembly quality assessment\n\n\n\n\n\nassess_assembly_quality(; assembly, observations, ks)\n\n\nAssess assembly quality using k-mer based metrics including QV scores.\n\nThis function provides a comprehensive quality assessment of genome assemblies by comparing k-mer distributions between the assembly and source sequencing data. It calculates multiple quality metrics across different k-mer sizes, with the  QV (Quality Value) score being the primary measure of assembly accuracy.\n\nArguments\n\nassembly: Path to assembly file (FASTA format) or assembly sequences\nobservations: Path to sequencing data file(s) (FASTQ format) or sequence observations\nks::Vector{Int}: K-mer sizes to analyze (default: 11,13,17,19,23,31,53 for comprehensive evaluation)\n\nReturns\n\nDataFrame containing quality metrics for each k-mer size:\n\nk::Int: K-mer length used\ncosine_distance::Float64: Cosine similarity between k-mer distributions  \njs_divergence::Float64: Jensen-Shannon divergence between distributions\nqv::Float64: Merqury-style Quality Value score (primary assembly accuracy metric)\n\nQV Score Interpretation\n\nQV ≥ 40: High quality assembly (>99.99% base accuracy)\nQV 30-40: Good quality assembly (99.9-99.99% base accuracy) \nQV 20-30: Moderate quality assembly (99-99.9% base accuracy)\nQV < 20: Lower quality assembly (<99% base accuracy)\n\nImplementation Details\n\nThe QV score follows the Merqury methodology:\n\nCount k-mers in both assembly and sequencing data\nCalculate shared k-mers between datasets\nEstimate base-level accuracy: P = (Kshared/Ktotal)^(1/k)\nConvert to Phred scale: QV = -10log₁₀(1-P)\n\nPerformance Notes\n\nUses multiple k-mer sizes for robust quality assessment\nLarger k-mer sizes provide more discriminative power\nParallel k-mer counting for computational efficiency\nProgress tracking for long-running analyses\n\nReferences\n\nRhie, A. et al. \"Merqury: reference-free quality, completeness, and phasing  assessment for genome assemblies.\" Genome Biology 21, 245 (2020).\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.validate_assembly","page":"Complete API Reference","title":"Mycelia.validate_assembly","text":"validate_assembly(assembly::AssemblyResult; reference=nothing) -> Dict{String, Any}\n\nValidate assembly quality using various metrics and optional reference comparison.\n\nArguments\n\nassembly: Assembly result to validate\nreference: Optional reference sequence for comparison\n\nReturns\n\nDict{String, Any}: Comprehensive validation metrics\n\nDetails\n\nComputes assembly quality metrics including:\n\nN50, N90 statistics\nTotal assembly length and number of contigs\nCoverage uniformity (if reference provided)\nStructural variant detection (if reference provided)\nGap analysis and repeat characterization\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#External-Validators","page":"Complete API Reference","title":"External Validators","text":"","category":"section"},{"location":"api-reference/#Mycelia.run_quast","page":"Complete API Reference","title":"Mycelia.run_quast","text":"run_quast(assembly_files::Vector{String}; outdir::String=\"quast_results\", reference::Union{String,Nothing}=nothing, threads::Int=Sys.CPU_THREADS, min_contig::Int=500, gene_finding::Bool=false)\n\nRun QUAST (Quality Assessment Tool for Genome Assemblies) to evaluate assembly quality.\n\nArguments\n\nassembly_files::Vector{String}: Vector of paths to assembly FASTA files to evaluate\noutdir::String=\"quast_results\": Output directory for QUAST results\nreference::Union{String,Nothing}=nothing: Optional reference genome for reference-based metrics\nthreads::Int=Sys.CPU_THREADS: Number of threads to use\nmin_contig::Int=500: Minimum contig length to consider\ngene_finding::Bool=false: Whether to run gene finding (requires GeneMark-ES/ET)\n\nReturns\n\nString: Path to the output directory containing QUAST results\n\nOutput Files\n\nreport.html: Interactive HTML report\nreport.txt: Text summary report\nreport.tsv: Tab-separated values report for programmatic access\ntransposed_report.tsv: Transposed TSV format\nicarus.html: Icarus contig browser (if reference provided)\n\nExamples\n\n# Basic assembly evaluation\nassemblies = [\"assembly1.fasta\", \"assembly2.fasta\"]\nquast_dir = Mycelia.run_quast(assemblies)\n\n# With reference genome\nref_genome = \"reference.fasta\"\nquast_dir = Mycelia.run_quast(assemblies, reference=ref_genome)\n\n# Custom parameters\nquast_dir = Mycelia.run_quast(assemblies, \n                             outdir=\"my_quast_results\",\n                             min_contig=1000,\n                             threads=8)\n\nNotes\n\nRequires QUAST to be installed via Bioconda\nWithout reference: provides basic metrics (N50, total length, # contigs, etc.)\nWith reference: adds reference-based metrics (genome fraction, misassemblies, etc.)\nGene finding requires additional dependencies and is disabled by default\n\n\n\n\n\nrun_quast(assembly_file::String; kwargs...)\n\nRun QUAST on a single assembly file. See run_quast(::Vector{String}) for details.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.run_busco","page":"Complete API Reference","title":"Mycelia.run_busco","text":"run_busco(assembly_files::Vector{String}; outdir::String=\"busco_results\", lineage::String=\"auto\", mode::String=\"genome\", threads::Int=Sys.CPU_THREADS, force::Bool=false)\n\nRun BUSCO (Benchmarking Universal Single-Copy Orthologs) to assess genome assembly completeness.\n\nArguments\n\nassembly_files::Vector{String}: Vector of paths to assembly FASTA files to evaluate\noutdir::String=\"busco_results\": Output directory for BUSCO results\nlineage::String=\"auto\": BUSCO lineage dataset to use (e.g., \"bacteriaodb10\", \"eukaryotaodb10\", \"auto\")\nmode::String=\"genome\": BUSCO mode (\"genome\", \"transcriptome\", \"proteins\")\nthreads::Int=Sys.CPU_THREADS: Number of threads to use\nforce::Bool=false: Force overwrite existing results\n\nReturns\n\nString: Path to the output directory containing BUSCO results\n\nOutput Files\n\nshort_summary.specific.lineage.txt: Summary statistics\nfull_table.tsv: Complete BUSCO results table\nmissing_busco_list.tsv: List of missing BUSCOs\nrun_lineage/: Detailed results directory\n\nExamples\n\n# Basic completeness assessment\nassemblies = [\"assembly1.fasta\", \"assembly2.fasta\"]\nbusco_dir = Mycelia.run_busco(assemblies)\n\n# Specific lineage\nbusco_dir = Mycelia.run_busco(assemblies, lineage=\"bacteria_odb10\")\n\n# Custom parameters\nbusco_dir = Mycelia.run_busco(assemblies,\n                             outdir=\"my_busco_results\",\n                             lineage=\"enterobacterales_odb10\",\n                             threads=8)\n\nNotes\n\nRequires BUSCO to be installed via Bioconda\nAuto lineage detection requires internet connection for first run\nAvailable lineages: bacteriaodb10, archaeaodb10, eukaryotaodb10, fungiodb10, etc.\nResults provide Complete, Fragmented, and Missing BUSCO counts\n\n\n\n\n\nrun_busco(assembly_file::String; kwargs...)\n\nRun BUSCO on a single assembly file. See run_busco(::Vector{String}) for details.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.run_mummer","page":"Complete API Reference","title":"Mycelia.run_mummer","text":"run_mummer(reference::String, query::String; outdir::String=\"mummer_results\", prefix::String=\"out\", mincluster::Int=65, minmatch::Int=20, threads::Int=1)\n\nRun MUMmer for genome comparison and alignment between reference and query sequences.\n\nArguments\n\nreference::String: Path to reference genome FASTA file\nquery::String: Path to query genome FASTA file  \noutdir::String=\"mummer_results\": Output directory for MUMmer results\nprefix::String=\"out\": Prefix for output files\nmincluster::Int=65: Minimum cluster length for nucmer\nminmatch::Int=20: Minimum match length for nucmer\nthreads::Int=1: Number of threads (note: MUMmer has limited multithreading)\n\nReturns\n\nString: Path to the output directory containing MUMmer results\n\nOutput Files\n\nprefix.delta: Delta alignment file (main output)\nprefix.coords: Human-readable coordinates file\nprefix.snps: SNP/indel report (if show-snps is run)\nprefix.plot.png: Dot plot visualization (if mummerplot is run)\n\nExamples\n\n# Basic genome comparison\nref_genome = \"reference.fasta\"\nquery_genome = \"assembly.fasta\"\nmummer_dir = Mycelia.run_mummer(ref_genome, query_genome)\n\n# Custom parameters\nmummer_dir = Mycelia.run_mummer(ref_genome, query_genome,\n                               outdir=\"comparison_results\",\n                               prefix=\"comparison\",\n                               mincluster=100,\n                               minmatch=30)\n\nNotes\n\nRequires MUMmer to be installed via Bioconda\nnucmer is used for DNA sequence alignment\nshow-coords generates human-readable coordinate output\nResults include alignment coordinates, percent identity, and coverage\nFor visualization, use mummerplot (requires gnuplot)\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Annotation","page":"Complete API Reference","title":"Annotation","text":"","category":"section"},{"location":"api-reference/#Gene-Prediction","page":"Complete API Reference","title":"Gene Prediction","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Functions for gene prediction and annotation (using external tools):","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Pyrodigal integration\nBLAST+ searches\nMMSeqs2 searches\nTransTerm terminator prediction\ntRNAscan-SE tRNA detection\nMLST typing","category":"page"},{"location":"api-reference/#Comparative-Genomics","page":"Complete API Reference","title":"Comparative Genomics","text":"","category":"section"},{"location":"api-reference/#Pangenome-Analysis","page":"Complete API Reference","title":"Pangenome Analysis","text":"","category":"section"},{"location":"api-reference/#Mycelia.analyze_pangenome_kmers","page":"Complete API Reference","title":"Mycelia.analyze_pangenome_kmers","text":"analyze_pangenome_kmers(genome_files::Vector{String}; kmer_type=Kmers.DNAKmer{21}, distance_metric=:jaccard)\n\nPerform comprehensive k-mer based pangenome analysis using existing Mycelia infrastructure.\n\nLeverages existing count_canonical_kmers and distance metric functions to analyze genomic content across multiple genomes, identifying core, accessory, and unique regions.\n\nArguments\n\ngenome_files: Vector of FASTA file paths containing genome sequences\nkmer_type: K-mer type from Kmers.jl (default: Kmers.DNAKmer{21})\ndistance_metric: Distance metric (:jaccard, :bray_curtis, :cosine, :js_divergence)\n\nReturns\n\nPangenomeAnalysisResult with comprehensive pangenome statistics\n\nExample\n\ngenome_files = [\"genome1.fasta\", \"genome2.fasta\", \"genome3.fasta\"]\nresult = Mycelia.analyze_pangenome_kmers(genome_files, kmer_type=Kmers.DNAKmer{31})\nprintln(\"Core k-mers: $(length(result.core_kmers))\")\nprintln(\"Total pangenome size: $(size(result.presence_absence_matrix, 1)) k-mers\")\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.build_genome_distance_matrix","page":"Complete API Reference","title":"Mycelia.build_genome_distance_matrix","text":"build_genome_distance_matrix(genome_files::Vector{String}; kmer_type=Kmers.DNAKmer{21}, metric=:js_divergence)\n\nBuild a distance matrix between all genome pairs using existing distance metrics.\n\nCreates a comprehensive pairwise distance matrix using established k-mer distance functions, suitable for phylogenetic analysis and clustering.\n\nArguments\n\ngenome_files: Vector of genome FASTA file paths\nkmer_type: K-mer type from Kmers.jl (default: Kmers.DNAKmer{21})\nmetric: Distance metric (:js_divergence, :cosine, :jaccard)\n\nReturns\n\nNamed tuple with distance matrix and genome names\n\nExample\n\ngenomes = [\"genome1.fasta\", \"genome2.fasta\", \"genome3.fasta\"]\nresult = Mycelia.build_genome_distance_matrix(genomes, kmer_type=Kmers.DNAKmer{31})\nprintln(\"Distance matrix: $(result.distance_matrix)\")\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Visualization","page":"Complete API Reference","title":"Visualization","text":"","category":"section"},{"location":"api-reference/#Plotting-Functions","page":"Complete API Reference","title":"Plotting Functions","text":"","category":"section"},{"location":"api-reference/#Mycelia.visualize_genome_coverage","page":"Complete API Reference","title":"Mycelia.visualize_genome_coverage","text":"visualize_genome_coverage(\n    coverage_table::DataFrames.AbstractDataFrame;\n    entity\n) -> Makie.Figure\n\n\nCreates a multi-panel visualization of genome coverage across chromosomes.\n\nArguments\n\ncoverage_table: DataFrame containing columns \"chromosome\" and \"coverage\" with genomic coverage data\n\nKeyword Arguments\n\nentity: Optional string to specify the entity being analyzed. If provided, chromosome titles become \"(entity) (chromosome) otherwise just (chromosome)\"\n\nReturns\n\nCairoMakie.Figure: A composite figure with coverage plots for each chromosome\n\nDetails\n\nGenerates one subplot per chromosome, arranged vertically. Each subplot shows the coverage  distribution across genomic positions for that chromosome.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.plot_embeddings","page":"Complete API Reference","title":"Mycelia.plot_embeddings","text":"Plot embeddings with optional true and fitted cluster labels using Makie.jl,  with legend outside, and color by fit labels, shape by true labels.\n\nArguments\n\nembeddings::Matrix{<:Real}: 2D embedding matrix where each column is a data point\ntitle::String: Title of the plot\nxlabel::String: Label for the x-axis\nylabel::String: Label for the y-axis\ntrue_labels::Vector{<:Integer}: Vector of true cluster labels (optional)\nfit_labels::Vector{<:Integer}: Vector of fitted cluster labels (optional)\n\nReturns\n\nMakie.Figure: Figure object that can be displayed or saved\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.plot_taxa_abundances","page":"Complete API Reference","title":"Mycelia.plot_taxa_abundances","text":"plot_taxa_abundances(\n    df::DataFrames.DataFrame, \n    taxa_level::String; \n    top_n::Int = 10,\n    sample_id_col::String = \"sample_id\",\n    filter_taxa::Union{Vector{Union{String, Missing}}, Nothing} = nothing,\n    figure_width::Int = 1500,\n    figure_height::Int = 1000,\n    bar_width::Float64 = 0.7,\n    x_rotation::Int = 45,\n    sort_samples::Bool = true,\n    color_seed::Union{Int, Nothing} = nothing,\n    legend_fontsize::Float64 = 12.0,\n    legend_itemsize::Float64 = 12.0,\n    legend_padding::Float64 = 5.0,\n    legend_rowgap::Float64 = 1.0,\n    legend_labelwidth::Union{Nothing, Float64} = nothing,\n    legend_titlesize::Float64 = 15.0,\n    legend_nbanks::Int = 1\n)\n\nCreate a stacked bar chart showing taxa relative abundances for each sample.\n\nArguments\n\ndf: DataFrame with sample_id and taxonomic assignments at different levels\ntaxa_level: Taxonomic level to analyze (e.g., \"genus\", \"species\")\ntop_n: Number of top taxa to display individually, remainder grouped as \"Other\"\nsample_id_col: Column name containing sample identifiers\nfilter_taxa: Taxa to exclude from visualization (default: nothing - no filtering)\nfigure_width: Width of the figure in pixels\nfigure_height: Height of the figure in pixels\nbar_width: Width of each bar (between 0 and 1)\nx_rotation: Rotation angle for x-axis labels in degrees\nsort_samples: Whether to sort samples alphabetically\ncolor_seed: Seed for reproducible color generation\nlegend_fontsize: Font size for legend entries\nlegend_itemsize: Size of the colored marker/icon in the legend\nlegend_padding: Padding around legend elements\nlegend_rowgap: Space between legend rows\nlegend_labelwidth: Maximum width for legend labels (truncation)\nlegend_titlesize: Font size for legend title\nlegend_nbanks: Number of legend columns\n\nReturns\n\nfig: CairoMakie figure object\nax: CairoMakie axis object\ntaxa_colors: Dictionary mapping taxa to their assigned colors\n\n\n\n\n\n","category":"function"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"For k-mer frequency plotting, see Sequence Analysis Workflow.","category":"page"},{"location":"api-reference/#Utility-Functions","page":"Complete API Reference","title":"Utility Functions","text":"","category":"section"},{"location":"api-reference/#Memory-Management","page":"Complete API Reference","title":"Memory Management","text":"","category":"section"},{"location":"api-reference/#Mycelia.estimate_memory_usage","page":"Complete API Reference","title":"Mycelia.estimate_memory_usage","text":"Estimate memory usage for a graph with given number of k-mers. Provides rough estimate for memory monitoring.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Mycelia.check_memory_limits","page":"Complete API Reference","title":"Mycelia.check_memory_limits","text":"Check if memory usage is within acceptable limits.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#File-Operations","page":"Complete API Reference","title":"File Operations","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Helper functions for robust file handling and data validation.","category":"page"},{"location":"api-reference/#Progress-Tracking","page":"Complete API Reference","title":"Progress Tracking","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Functions for user feedback during long-running operations.","category":"page"},{"location":"api-reference/#Graph-Types-and-Enums","page":"Complete API Reference","title":"Graph Types and Enums","text":"","category":"section"},{"location":"api-reference/#Graph-Modes","page":"Complete API Reference","title":"Graph Modes","text":"","category":"section"},{"location":"api-reference/#Mycelia.GraphMode","page":"Complete API Reference","title":"Mycelia.GraphMode","text":"Graph mode for handling strand information.\n\nSingleStrand: Sequences are single-stranded (RNA, amino acids, or directional DNA)\nDoubleStrand: Sequences are double-stranded DNA/RNA with canonical representation\n\n\n\n\n\n","category":"type"},{"location":"api-reference/#Mycelia.StrandOrientation","page":"Complete API Reference","title":"Mycelia.StrandOrientation","text":"Strand orientation for k-mer observations and transitions.\n\nForward: k-mer as observed (5' to 3')\nReverse: reverse complement of k-mer (3' to 5')\n\n\n\n\n\n","category":"type"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Used to control how graphs are constructed and oriented.","category":"page"},{"location":"api-reference/#Data-Structures","page":"Complete API Reference","title":"Data Structures","text":"","category":"section"},{"location":"api-reference/#Assembly-Results","page":"Complete API Reference","title":"Assembly Results","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"The result of assembly operations typically includes:","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":":final_assembly: Vector of assembled sequences\n:k_progression: K-mer sizes used\n:metadata: Assembly statistics and parameters","category":"page"},{"location":"api-reference/#Quality-Metrics","page":"Complete API Reference","title":"Quality Metrics","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Standard quality metrics returned by analysis functions:","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Coverage statistics\nQuality score distributions  \nJoint probability calculations\nAssembly completeness measures","category":"page"},{"location":"api-reference/#Function-Categories","page":"Complete API Reference","title":"Function Categories","text":"","category":"section"},{"location":"api-reference/#Core-Assembly-Pipeline","page":"Complete API Reference","title":"Core Assembly Pipeline","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Input Processing: open_fastx, convert_sequence\nQuality Analysis: analyze_fastq_quality, qualmer functions\nAssembly: mycelia_assemble, graph construction\nValidation: assess_assembly_quality, validate_assembly\nOutput: Assembly statistics and final sequences","category":"page"},{"location":"api-reference/#Supporting-Workflows","page":"Complete API Reference","title":"Supporting Workflows","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Data Acquisition: Download and simulation functions\nQuality Control: Filtering and trimming tools\nAnalysis: K-mer analysis and distance calculations\nVisualization: Plotting and reporting functions","category":"page"},{"location":"api-reference/#Type-System","page":"Complete API Reference","title":"Type System","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Mycelia uses a strict type system based on BioSequences.jl:","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"DNA sequences: BioSequences.LongDNA{4}\nRNA sequences: BioSequences.LongRNA{4}  \nProtein sequences: BioSequences.LongAA\nK-mers: Kmers.DNAKmer{K}, Kmers.RNAKmer{K}, Kmers.AAKmer{K}","category":"page"},{"location":"api-reference/#Quality-Aware-Types","page":"Complete API Reference","title":"Quality-Aware Types","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Qualmer: Combines k-mer with quality scores\nQualmerVertexData: Graph vertex with quality metadata\nQualmerEdgeData: Graph edge with transition weights","category":"page"},{"location":"api-reference/#Performance-Characteristics","page":"Complete API Reference","title":"Performance Characteristics","text":"","category":"section"},{"location":"api-reference/#Scalability","page":"Complete API Reference","title":"Scalability","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Most functions scale as follows with input size:","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Linear: File I/O, k-mer counting\nQuadratic: Distance matrix calculations\nVariable: Assembly (depends on complexity)","category":"page"},{"location":"api-reference/#Memory-Usage","page":"Complete API Reference","title":"Memory Usage","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Typical memory requirements:","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Small genomes (< 10 Mb): 1-4 GB RAM\nBacterial genomes (1-10 Mb): 4-16 GB RAM  \nLarge genomes (> 100 Mb): 32-128 GB RAM","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Use memory_limit parameters to control usage.","category":"page"},{"location":"api-reference/#Parallelization","page":"Complete API Reference","title":"Parallelization","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Functions that support parallel execution:","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"K-mer counting (automatic)\nAssembly (multi-threaded)\nQuality analysis (vectorized)","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Set JULIA_NUM_THREADS environment variable for best performance.","category":"page"},{"location":"api-reference/#Error-Handling","page":"Complete API Reference","title":"Error Handling","text":"","category":"section"},{"location":"api-reference/#Common-Exceptions","page":"Complete API Reference","title":"Common Exceptions","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"ArgumentError: Invalid parameters\nMethodError: Wrong types\nOutOfMemoryError: Insufficient RAM\nSystemError: File I/O issues","category":"page"},{"location":"api-reference/#Debugging-Tips","page":"Complete API Reference","title":"Debugging Tips","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Check inputs: Use typeof() and length() \nMonitor memory: Use memory_limit parameters\nEnable logging: Set verbose=true in functions\nTest subset: Use smaller datasets for debugging","category":"page"},{"location":"api-reference/#Integration-Points","page":"Complete API Reference","title":"Integration Points","text":"","category":"section"},{"location":"api-reference/#External-Tools","page":"Complete API Reference","title":"External Tools","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Mycelia integrates with numerous bioinformatics tools via Bioconda:","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Assemblers: SPAdes, Megahit, Miniasm, Raven\nQC Tools: FastP, Filtlong, Trim Galore\nValidators: QUAST, BUSCO, MUMmer\nAnnotators: Pyrodigal, BLAST+, MMSeqs2","category":"page"},{"location":"api-reference/#File-Formats","page":"Complete API Reference","title":"File Formats","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Supported formats:","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Input: FASTA, FASTQ (including gzipped)\nOutput: FASTA, CSV, JSON, JLD2\nIntermediate: Graph formats, quality scores","category":"page"},{"location":"api-reference/#Workflow-Integration","page":"Complete API Reference","title":"Workflow Integration","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Functions are designed to work together in pipelines:","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"# Typical workflow\ndata = open_fastx(\"reads.fastq\")\nquality_report = analyze_fastq_quality(data)\nassembly = mycelia_assemble(\"reads.fastq\")\nvalidation = assess_assembly_quality(assembly)","category":"page"},{"location":"api-reference/#Version-Compatibility","page":"Complete API Reference","title":"Version Compatibility","text":"","category":"section"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"This documentation corresponds to Mycelia version 0.1.0+. ","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"Breaking changes will be noted in release notes\nDeprecated functions include migration guidance\nExperimental features are clearly marked","category":"page"},{"location":"api-reference/","page":"Complete API Reference","title":"Complete API Reference","text":"For the latest updates, see the CHANGELOG.","category":"page"},{"location":"api/quick-reference/parameter-guide/#Parameter-Guide","page":"Parameter Guide","title":"Parameter Guide","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Common parameters used across Mycelia functions with explanations, defaults, and best practices.","category":"page"},{"location":"api/quick-reference/parameter-guide/#Overview","page":"Parameter Guide","title":"Overview","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"This guide covers the most frequently used parameters in Mycelia functions. Understanding these parameters helps you:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Optimize performance for your specific use case\nChoose appropriate values for different data types\nUnderstand parameter interactions and trade-offs\nTroubleshoot issues related to parameter selection","category":"page"},{"location":"api/quick-reference/parameter-guide/#File-Path-Parameters","page":"Parameter Guide","title":"File Path Parameters","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/#Input-Files","page":"Parameter Guide","title":"Input Files","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Most functions accept file paths as input. Common patterns:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"# Single file input\nresult = Mycelia.analyze_function(\"input.fastq\")\n\n# Multiple file input\nresult = Mycelia.analyze_function([\"file1.fastq\", \"file2.fastq\"])\n\n# Directory input (processes all files)\nresult = Mycelia.analyze_function(\"input_directory/\")","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Common Parameters:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"input_file::String - Path to input file\ninput_files::Vector{String} - Multiple input files\ninput_dir::String - Directory containing input files","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Best Practices:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Use absolute paths for better reliability\nCheck file existence before processing\nHandle compressed files (.gz) automatically","category":"page"},{"location":"api/quick-reference/parameter-guide/#Output-Specification","page":"Parameter Guide","title":"Output Specification","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"# Output file specification\nresult = Mycelia.process_function(\"input.fastq\", output=\"output.fastq\")\n\n# Output directory\nresult = Mycelia.process_function(\"input.fastq\", output_dir=\"results/\")\n\n# Auto-generated output names\nresult = Mycelia.process_function(\"input.fastq\", auto_output=true)","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Common Parameters:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"output::String - Output file path\noutput_dir::String - Output directory\noutput_prefix::String - Prefix for output files\noverwrite::Bool = false - Overwrite existing files","category":"page"},{"location":"api/quick-reference/parameter-guide/#Quality-Control-Parameters","page":"Parameter Guide","title":"Quality Control Parameters","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/#Quality-Thresholds","page":"Parameter Guide","title":"Quality Thresholds","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"# Quality score thresholds\nMycelia.filter_by_quality(\"reads.fastq\", \n    min_quality=20,        # Minimum average quality score\n    min_base_quality=15,   # Minimum per-base quality\n    quality_window=10      # Sliding window size\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Parameter Details:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"min_quality::Int = 20 - Minimum average Phred score (Q20 = 1% error)\nmin_base_quality::Int = 10 - Minimum individual base quality\nquality_window::Int = 4 - Window size for quality assessment","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Quality Score Reference:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Q10: 10% error rate (poor)\nQ20: 1% error rate (acceptable)\nQ30: 0.1% error rate (good)\nQ40: 0.01% error rate (excellent)","category":"page"},{"location":"api/quick-reference/parameter-guide/#Length-Filtering","page":"Parameter Guide","title":"Length Filtering","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.filter_by_length(\"reads.fastq\",\n    min_length=1000,       # Minimum read length\n    max_length=50000,      # Maximum read length\n    length_tolerance=0.1   # Tolerance for length variation\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Parameter Details:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"min_length::Int = 500 - Minimum acceptable read length\nmax_length::Int = Inf - Maximum acceptable read length\nlength_tolerance::Float64 = 0.2 - Acceptable length variation","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Platform-Specific Defaults:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Illumina: minlength=50, maxlength=300\nPacBio HiFi: minlength=1000, maxlength=30000\nNanopore: minlength=500, maxlength=100000","category":"page"},{"location":"api/quick-reference/parameter-guide/#K-mer-Analysis-Parameters","page":"Parameter Guide","title":"K-mer Analysis Parameters","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/#K-mer-Size-Selection","page":"Parameter Guide","title":"K-mer Size Selection","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.count_kmers(\"reads.fastq\", \n    k=21,                  # K-mer size\n    alphabet=:DNA,         # Sequence alphabet\n    canonical=true         # Use canonical k-mers\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Parameter Details:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"k::Int = 21 - K-mer size (length of subsequences)\nalphabet::Symbol = :DNA - Sequence alphabet (:DNA, :RNA, :PROTEIN)\ncanonical::Bool = true - Combine forward and reverse complement","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"K-mer Size Guidelines:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"k=11-15: Error correction, small genomes\nk=19-25: General analysis, genome size estimation\nk=31-51: Large genomes, repeat resolution\nk>51: Very large genomes, high specificity","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Memory Considerations:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Dense counting: 4^k possible k-mers\nk=15: ~1 GB memory\nk=21: ~17 GB memory (use sparse)\nk≥25: Always use sparse counting","category":"page"},{"location":"api/quick-reference/parameter-guide/#Counting-Methods","page":"Parameter Guide","title":"Counting Methods","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.count_kmers(\"reads.fastq\",\n    method=\"sparse\",       # Counting method\n    min_count=1,          # Minimum count threshold\n    max_count=1000        # Maximum count threshold\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Method Options:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"\"dense\": Store all possible k-mers (memory intensive)\n\"sparse\": Store only observed k-mers (memory efficient)\n\"streaming\": Process in chunks (very large files)","category":"page"},{"location":"api/quick-reference/parameter-guide/#Assembly-Parameters","page":"Parameter Guide","title":"Assembly Parameters","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/#Assembly-Configuration","page":"Parameter Guide","title":"Assembly Configuration","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.assemble_genome(\"reads.fastq\",\n    assembler=\"hifiasm\",   # Assembly software\n    k=31,                 # K-mer size for assembly\n    min_overlap=1000,     # Minimum overlap length\n    threads=8             # Number of CPU threads\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Assembler Options:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"\"hifiasm\": Best for HiFi reads\n\"canu\": Good for long reads with higher error rates\n\"flye\": Fast assembly for long reads\n\"spades\": Best for Illumina reads","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Performance Parameters:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"threads::Int = 4 - Number of CPU threads\nmemory_gb::Int = 16 - Maximum memory usage\ntmp_dir::String = \"/tmp\" - Temporary file directory","category":"page"},{"location":"api/quick-reference/parameter-guide/#Assembly-Quality-Control","page":"Parameter Guide","title":"Assembly Quality Control","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.assemble_genome(\"reads.fastq\",\n    min_contig_length=1000,  # Minimum contig size\n    min_coverage=5,          # Minimum coverage depth\n    error_correction=true,   # Enable error correction\n    polish=true             # Enable polishing\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/#Comparative-Genomics-Parameters","page":"Parameter Guide","title":"Comparative Genomics Parameters","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/#Pangenome-Construction","page":"Parameter Guide","title":"Pangenome Construction","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.build_pangenome(genomes,\n    similarity_threshold=0.95,  # Gene similarity cutoff\n    coverage_threshold=0.8,     # Minimum coverage for alignment\n    clustering_method=\"mcl\",    # Clustering algorithm\n    inflation=2.0              # MCL inflation parameter\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Similarity Thresholds:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"0.95: Very strict (same species)\n0.90: Strict (closely related strains)\n0.80: Moderate (related species)\n0.70: Permissive (distant relationships)","category":"page"},{"location":"api/quick-reference/parameter-guide/#Phylogenetic-Analysis","page":"Parameter Guide","title":"Phylogenetic Analysis","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.build_phylogenetic_tree(alignment,\n    method=\"ml\",              # Tree construction method\n    model=\"GTR+G\",           # Evolutionary model\n    bootstrap=1000,          # Bootstrap replicates\n    outgroup=\"species_A\"     # Outgroup specification\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Method Options:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"\"ml\": Maximum likelihood (most accurate)\n\"nj\": Neighbor-joining (fast)\n\"mp\": Maximum parsimony (character-based)","category":"page"},{"location":"api/quick-reference/parameter-guide/#Performance-Parameters","page":"Parameter Guide","title":"Performance Parameters","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/#Parallel-Processing","page":"Parameter Guide","title":"Parallel Processing","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.parallel_function(data,\n    threads=8,               # Number of CPU threads\n    workers=4,              # Number of worker processes\n    chunk_size=1000,        # Data chunk size\n    load_balance=true       # Enable load balancing\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Thread Guidelines:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Use Sys.CPU_THREADS for maximum threads\nLeave 1-2 threads free for system\nMemory-bound tasks: threads = cores\nI/O-bound tasks: threads = 2x cores","category":"page"},{"location":"api/quick-reference/parameter-guide/#Memory-Management","page":"Parameter Guide","title":"Memory Management","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.memory_intensive_function(data,\n    memory_limit_gb=16,      # Maximum memory usage\n    chunk_processing=true,   # Process in chunks\n    gc_frequency=1000,      # Garbage collection frequency\n    tmp_dir=\"/fast_storage\" # Temporary file location\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Memory Guidelines:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Monitor with memory_usage() function\nUse streaming for files > available RAM\nSet conservative limits for shared systems","category":"page"},{"location":"api/quick-reference/parameter-guide/#File-Format-Parameters","page":"Parameter Guide","title":"File Format Parameters","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/#Compression","page":"Parameter Guide","title":"Compression","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.write_output(data,\n    compress=true,          # Enable compression\n    compression_level=6,    # Compression level (1-9)\n    format=\"auto\"          # Output format detection\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Compression Levels:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"1-3: Fast compression, larger files\n4-6: Balanced compression and speed\n7-9: Maximum compression, slower","category":"page"},{"location":"api/quick-reference/parameter-guide/#Format-Specification","page":"Parameter Guide","title":"Format Specification","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.read_sequences(\"input.file\",\n    format=\"auto\",          # Format detection\n    validate=true,         # Validate file format\n    encoding=\"utf-8\"       # Text encoding\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Format Options:","category":"page"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"\"auto\": Automatic detection from extension\n\"fasta\": FASTA format\n\"fastq\": FASTQ format\n\"gff3\": GFF3 annotation format","category":"page"},{"location":"api/quick-reference/parameter-guide/#Error-Handling-Parameters","page":"Parameter Guide","title":"Error Handling Parameters","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/#Validation-and-Checks","page":"Parameter Guide","title":"Validation and Checks","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.robust_function(input,\n    validate_input=true,    # Validate input data\n    strict_mode=false,     # Strict error checking\n    continue_on_error=false, # Continue despite errors\n    max_errors=10          # Maximum allowed errors\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/#Retry-Logic","page":"Parameter Guide","title":"Retry Logic","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Mycelia.network_function(url,\n    max_retries=3,         # Maximum retry attempts\n    retry_delay=30,        # Delay between retries (seconds)\n    exponential_backoff=true, # Increase delay each retry\n    timeout=300           # Operation timeout (seconds)\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/#Common-Parameter-Patterns","page":"Parameter Guide","title":"Common Parameter Patterns","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/#Quality-Control-Pattern","page":"Parameter Guide","title":"Quality Control Pattern","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"standard_qc_params = Dict(\n    :min_quality => 20,\n    :min_length => 1000,\n    :max_n_percent => 5,\n    :trim_ends => true,\n    :remove_duplicates => false\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/#Performance-Pattern","page":"Parameter Guide","title":"Performance Pattern","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"performance_params = Dict(\n    :threads => min(8, Sys.CPU_THREADS),\n    :memory_gb => 16,\n    :chunk_size => 10000,\n    :parallel => true\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/#Output-Pattern","page":"Parameter Guide","title":"Output Pattern","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"output_params = Dict(\n    :output_dir => \"results\",\n    :compress => true,\n    :overwrite => false,\n    :create_manifest => true\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/#Parameter-Validation","page":"Parameter Guide","title":"Parameter Validation","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/#Built-in-Validation","page":"Parameter Guide","title":"Built-in Validation","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"# Most functions automatically validate parameters\ntry\n    result = Mycelia.count_kmers(\"reads.fastq\", k=0)  # Invalid k\ncatch ArgumentError as e\n    println(\"Parameter error: $e\")\nend","category":"page"},{"location":"api/quick-reference/parameter-guide/#Manual-Validation","page":"Parameter Guide","title":"Manual Validation","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"# Validate parameters before expensive operations\nif !Mycelia.validate_parameters(k=21, min_quality=20, threads=8)\n    error(\"Invalid parameter combination\")\nend","category":"page"},{"location":"api/quick-reference/parameter-guide/#Troubleshooting-Common-Issues","page":"Parameter Guide","title":"Troubleshooting Common Issues","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/#Memory-Problems","page":"Parameter Guide","title":"Memory Problems","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"# Reduce memory usage\nMycelia.count_kmers(\"large_file.fastq\", \n    k=21,\n    method=\"sparse\",        # Use sparse instead of dense\n    chunk_size=50000,      # Process in smaller chunks\n    memory_limit_gb=8      # Set memory limit\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/#Performance-Issues","page":"Parameter Guide","title":"Performance Issues","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"# Optimize for speed\nMycelia.process_function(data,\n    threads=Sys.CPU_THREADS,  # Use all available cores\n    chunk_size=1000,          # Optimize chunk size\n    parallel=true,            # Enable parallelization\n    cache_results=true        # Cache intermediate results\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/#File-I/O-Problems","page":"Parameter Guide","title":"File I/O Problems","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"# Handle file I/O robustly\nMycelia.read_function(\"file.fastq\",\n    validate=true,            # Validate file format\n    buffer_size=8192,        # Optimize buffer size\n    encoding=\"utf-8\",        # Specify encoding\n    handle_errors=\"skip\"     # Skip problematic records\n)","category":"page"},{"location":"api/quick-reference/parameter-guide/#See-Also","page":"Parameter Guide","title":"See Also","text":"","category":"section"},{"location":"api/quick-reference/parameter-guide/","page":"Parameter Guide","title":"Parameter Guide","text":"Function Index - Complete function listing\nBasic Workflows - Parameter usage examples\nAdvanced Usage - Complex parameter combinations\nPerformance Guide - Optimization strategies","category":"page"},{"location":"#Mycelia-Documentation","page":"Home","title":"Mycelia Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An experimental Julia package for bioinformatics and computational biology","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mycelia is a research-oriented package exploring novel approaches to genomic analysis, with a focus on graph-based genome assembly and quality-aware sequence processing. Currently in early development, it provides both experimental algorithms and integrations with established bioinformatics tools.","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"New to Mycelia? Start with our Getting Started Guide to install the package and complete your first genomic analysis in minutes.","category":"page"},{"location":"#Key-Features-and-Research-Areas","page":"Home","title":"Key Features & Research Areas","text":"","category":"section"},{"location":"#Currently-Available","page":"Home","title":"Currently Available","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"🧬 Sequence Processing: Basic FASTA/FASTQ I/O and read simulation\n📊 K-mer Analysis: Canonical k-mer counting and distance metrics\n🔧 Tool Integration: Wrappers for established assemblers (MEGAHIT, SPAdes, hifiasm)\n⚡ HPC Support: SLURM job submission and rclone integration","category":"page"},{"location":"#In-Active-Development","page":"Home","title":"In Active Development","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"🧪 Novel Assembly Algorithms: Graph-based approaches with quality awareness\n🌐 Pangenome Analysis: K-mer based comparative genomics\n📈 Quality Control: Integration with QC tools (fastp, filtlong, trim_galore)","category":"page"},{"location":"#Planned-Features","page":"Home","title":"Planned Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"🔍 Annotation: Gene prediction and functional annotation\n🌳 Phylogenetics: Tree construction from pangenome data\n📊 Visualization: Interactive plots for genomic data","category":"page"},{"location":"#Documentation-Contents","page":"Home","title":"Documentation Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"getting-started.md\",\n    \"concepts.md\",\n    \"tutorials.md\", \n    \"api.md\",\n    \"visualization-gallery.md\",\n    \"faq.md\",\n    \"contributing.md\"\n]\nDepth = 2","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#Quick-Install","page":"Home","title":"Quick Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(url=\"https://github.com/cjprybol/Mycelia.git\")","category":"page"},{"location":"#Development-Install","page":"Home","title":"Development Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.develop(url=\"git@github.com:cjprybol/Mycelia.git\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"For detailed installation instructions including HPC setup, see the Getting Started Guide.","category":"page"},{"location":"#Function-Docstrings","page":"Home","title":"Function Docstrings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For complete API documentation, see the API Reference section.","category":"page"}]
}
