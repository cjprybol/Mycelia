var documenterSearchIndex = {"docs":
[{"location":"#Mycelia-Documentation","page":"Home","title":"Mycelia Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the Mycelia documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"more","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install Julia (if not already installed)","category":"page"},{"location":"","page":"Home","title":"Home","text":"I have had trouble getting the visualization libraries Plots.jl and Makie.jl (and associated packages) to load correctly on HPC due to the complexities of the default LDLIBRARYPATH","category":"page"},{"location":"","page":"Home","title":"Home","text":"I imagine other research supercomputer users may have similar issues, although I don't have these issues on cloud vendors like GCP or AWS","category":"page"},{"location":"","page":"Home","title":"Home","text":"To enable Julia to install all of it's own necessary dependencies independent of the system, I reset the LDLIBRARYPATH variable prior to launching Julia !!","category":"page"},{"location":"","page":"Home","title":"Home","text":"This can be done easily when launching Julia from the command line by","category":"page"},{"location":"","page":"Home","title":"Home","text":"export LD_LIBRARY_PATH=\"\" && julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"And can be done for Julia jupyter kernels by setting the env key => value pair in the appropriate kernel.json file","category":"page"},{"location":"","page":"Home","title":"Home","text":"Clone the repo directly","category":"page"},{"location":"","page":"Home","title":"Home","text":"cd /path/where/you/want/the/repo\n# for production usage\ngit clone https://github.com/cjprybol/Mycelia.git\n# for development\ngit clone git@github.com:cjprybol/Mycelia.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or as Julia package","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\n# for production usage\nPkg.add(url=\"https://github.com/cjprybol/Mycelia.git\")\n# for development\nPkg.develop(url=\"git@github.com:cjprybol/Mycelia.git\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Mycelia]","category":"page"},{"location":"#Mycelia.add_bioconda_env-Tuple{Any}","page":"Home","title":"Mycelia.add_bioconda_env","text":"add_bioconda_env(pkg; force) -> Union{Nothing, Base.Process}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.add_edgemer_to_graph!-NTuple{4, Any}","page":"Home","title":"Mycelia.add_edgemer_to_graph!","text":"add_edgemer_to_graph!(\n    graph,\n    record_identifier,\n    index,\n    observed_edgemer\n) -> Any\n\n\nA short description of the function\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.add_record_edgemers_to_graph!-Tuple{Any}","page":"Home","title":"Mycelia.add_record_edgemers_to_graph!","text":"add_record_edgemers_to_graph!(graph) -> Any\n\n\nA short description of the function\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.amino_acids_to_codons-Tuple{}","page":"Home","title":"Mycelia.amino_acids_to_codons","text":"amino_acids_to_codons(\n\n) -> Dict{BioSymbols.AminoAcid, DataType}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.annotate_fasta-Tuple{}","page":"Home","title":"Mycelia.annotate_fasta","text":"annotate_fasta(\n;\n    fasta,\n    identifier,\n    basedir,\n    mmseqsdb,\n    threads\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.assess_alignment-Tuple{Any, Any}","page":"Home","title":"Mycelia.assess_alignment","text":"assess_alignment(\n    a,\n    b\n) -> @NamedTuple{total_matches::Int64, total_edits::Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.assess_alignment_accuracy-Tuple{Any}","page":"Home","title":"Mycelia.assess_alignment_accuracy","text":"assess_alignment_accuracy(alignment_result) -> Any\n\n\nReturn proportion of matched bases in alignment to total matches + edits.\n\n0-1, not %\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.assess_assembly_quality-Tuple{}","page":"Home","title":"Mycelia.assess_assembly_quality","text":"assess_assembly_quality(; assembly, observations, ks)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.assess_dnamer_saturation-Tuple{AbstractString}","page":"Home","title":"Mycelia.assess_dnamer_saturation","text":"assess_dnamer_saturation(\n    fastx::AbstractString;\n    power,\n    outdir,\n    min_k,\n    max_k,\n    threshold,\n    kmers_to_assess\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.assess_dnamer_saturation-Tuple{AbstractVector{<:AbstractString}, Any}","page":"Home","title":"Mycelia.assess_dnamer_saturation","text":"assess_dnamer_saturation(\n    fastxs::AbstractVector{<:AbstractString},\n    kmer_type;\n    kmers_to_assess,\n    power,\n    min_count\n) -> Union{@NamedTuple{sampling_points::Vector{Int64}, unique_kmer_counts::Vector{Int64}}, NamedTuple{(:sampling_points, :unique_kmer_counts, :eof), <:Tuple{Vector, Vector{Int64}, Bool}}}\n\n\nA short description of the function\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.assess_dnamer_saturation-Tuple{AbstractVector{<:AbstractString}}","page":"Home","title":"Mycelia.assess_dnamer_saturation","text":"assess_dnamer_saturation(\n    fastxs::AbstractVector{<:AbstractString};\n    power,\n    outdir,\n    min_k,\n    max_k,\n    threshold,\n    kmers_to_assess,\n    plot\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.assess_optimal_kmer_alignment-Tuple{Any, Any}","page":"Home","title":"Mycelia.assess_optimal_kmer_alignment","text":"assess_optimal_kmer_alignment(\n    kmer,\n    observed_kmer\n) -> Tuple{@NamedTuple{total_matches::Int64, total_edits::Int64}, Union{Missing, Bool}}\n\n\nUsed to determine which orientation provides an optimal alignment for initiating path likelihood analyses in viterbi analysis\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.bam_to_fastq-Tuple{}","page":"Home","title":"Mycelia.bam_to_fastq","text":"bam_to_fastq(; bam, fastq)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.bandage_visualize-Tuple{}","page":"Home","title":"Mycelia.bandage_visualize","text":"bandage_visualize(; gfa, img)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.biosequences_to_counts_table-Tuple{}","page":"Home","title":"Mycelia.biosequences_to_counts_table","text":"biosequences_to_counts_table(; biosequences, k)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.biosequences_to_dense_counts_table-Tuple{}","page":"Home","title":"Mycelia.biosequences_to_dense_counts_table","text":"biosequences_to_dense_counts_table(; biosequences, k)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.blastdb_to_fasta-Tuple{}","page":"Home","title":"Mycelia.blastdb_to_fasta","text":"blastdb_to_fasta(; db, dbdir, compressed, outfile)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.build_directed_kmer_graph-Tuple{}","page":"Home","title":"Mycelia.build_directed_kmer_graph","text":"build_directed_kmer_graph(; fastq, k, plot)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.build_stranded_kmer_graph-Tuple{Any, AbstractVector{<:Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}}}","page":"Home","title":"Mycelia.build_stranded_kmer_graph","text":"build_stranded_kmer_graph(\n    kmer_type,\n    observations::AbstractVector{<:Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}}\n) -> MetaGraphs.MetaDiGraph{T, Float64} where T<:Integer\n\n\nCreate a weighted, strand-specific kmer (de bruijn) graph from a set of kmers and a series of sequence observations in FASTA format.\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.canonicalize_kmer_counts!-Tuple{Any}","page":"Home","title":"Mycelia.canonicalize_kmer_counts!","text":"canonicalize_kmer_counts!(kmer_counts) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.canonicalize_kmer_counts-Tuple{Any}","page":"Home","title":"Mycelia.canonicalize_kmer_counts","text":"canonicalize_kmer_counts(kmer_counts) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.codon_optimize-Tuple{}","page":"Home","title":"Mycelia.codon_optimize","text":"codon_optimize(\n;\n    normalized_codon_frequencies,\n    protein_sequence,\n    n_iterations\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.codons_to_amino_acids-Tuple{}","page":"Home","title":"Mycelia.codons_to_amino_acids","text":"codons_to_amino_acids(\n\n) -> Union{Dict{_A, BioSequences.LongAA} where _A, Dict{_A, V} where {_A, V<:(Kmers.Kmer{BioSequences.AminoAcidAlphabet, _A, _B} where {_B, _A})}}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.concatenate_files-Tuple{}","page":"Home","title":"Mycelia.concatenate_files","text":"concatenate_files(; files, file)\n\n\nJoin fasta files without any regard to record uniqueness.\n\nA cross-platform version of cat *.fasta > joint.fasta\n\nSee mergefastafiles\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.contig_is_circular-Tuple{String, String}","page":"Home","title":"Mycelia.contig_is_circular","text":"contig_is_circular(\n    graph_file::String,\n    contig_name::String\n) -> Any\n\n\nReturns bool indicating whether the contig is a circle\n\ngraphfile = path to assembly graph.gfa file contigname = name of the contig\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.contig_is_cleanly_assembled-Tuple{String, String}","page":"Home","title":"Mycelia.contig_is_cleanly_assembled","text":"contig_is_cleanly_assembled(\n    graph_file::String,\n    contig_name::String\n) -> Bool\n\n\nReturns bool indicating whether the contig is cleanly assembled.\n\nBy cleanly assembled we mean that the contig does not have other contigs attached in the same connected component.\n\ngraphfile = path to assembly graph.gfa file contigname = name of the contig\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.convert-Tuple{Any}","page":"Home","title":"Mycelia.convert","text":"convert(args)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.convert_sequence-Tuple{AbstractString}","page":"Home","title":"Mycelia.convert_sequence","text":"convert_sequence(seq::AbstractString)\n\nConverts the given sequence (output from FASTX.sequence) into the appropriate BioSequence type:\n\nDNA sequences are converted using BioSequences.LongDNA\nRNA sequences are converted using BioSequences.LongRNA\nAA sequences are converted using BioSequences.LongAA\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.copy_with_unique_identifier-Tuple{Any, Any, Any}","page":"Home","title":"Mycelia.copy_with_unique_identifier","text":"copy_with_unique_identifier(\n    infile,\n    out_directory,\n    unique_identifier;\n    force\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.count_canonical_kmers-Union{Tuple{KMER_TYPE}, Tuple{Type{KMER_TYPE}, Any}} where KMER_TYPE","page":"Home","title":"Mycelia.count_canonical_kmers","text":"count_canonical_kmers(_::Type{KMER_TYPE}, sequences) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.count_kmers-Union{Tuple{KMER_TYPE}, Tuple{Type{KMER_TYPE}, AbstractString}} where KMER_TYPE","page":"Home","title":"Mycelia.count_kmers","text":"count_kmers(\n    _::Type{KMER_TYPE},\n    fastx_file::AbstractString\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.count_kmers-Union{Tuple{K}, Tuple{A}, Tuple{Type{Kmers.Mer{K, A}}, BioSequences.LongSequence}} where {A<:BioSequences.AminoAcidAlphabet, K}","page":"Home","title":"Mycelia.count_kmers","text":"count_kmers(\n    _::Type{Kmers.Kmer{A<:BioSequences.AminoAcidAlphabet, K}},\n    sequence::BioSequences.LongSequence\n) -> OrderedCollections.OrderedDict{K, Int64} where K<:(Kmers.Kmer{BioSequences.AminoAcidAlphabet, _A, _B} where {_B, _A})\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.count_kmers-Union{Tuple{K}, Tuple{A}, Tuple{Type{Kmers.Mer{K, A}}, BioSequences.LongSequence}} where {A<:BioSequences.DNAAlphabet, K}","page":"Home","title":"Mycelia.count_kmers","text":"count_kmers(\n    _::Type{Kmers.Kmer{A<:BioSequences.DNAAlphabet, K}},\n    sequence::BioSequences.LongSequence\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.count_kmers-Union{Tuple{R}, Tuple{KMER_TYPE}, Tuple{Type{KMER_TYPE}, R}} where {KMER_TYPE, R<:Union{FASTX.FASTA.Reader, FASTX.FASTQ.Reader}}","page":"Home","title":"Mycelia.count_kmers","text":"count_kmers(\n    _::Type{KMER_TYPE},\n    sequences::Union{FASTX.FASTA.Reader, FASTX.FASTQ.Reader}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.count_kmers-Union{Tuple{R}, Tuple{KMER_TYPE}, Tuple{Type{KMER_TYPE}, R}} where {KMER_TYPE, R<:Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}}","page":"Home","title":"Mycelia.count_kmers","text":"count_kmers(\n    _::Type{KMER_TYPE},\n    record::Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.count_kmers-Union{Tuple{T}, Tuple{KMER_TYPE}, Tuple{Type{KMER_TYPE}, AbstractVector{T}}} where {KMER_TYPE, T<:AbstractString}","page":"Home","title":"Mycelia.count_kmers","text":"count_kmers(\n    _::Type{KMER_TYPE},\n    fastx_files::AbstractArray{T<:AbstractString, 1}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.count_kmers-Union{Tuple{T}, Tuple{KMER_TYPE}, Tuple{Type{KMER_TYPE}, AbstractVector{T}}} where {KMER_TYPE, T<:Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}}","page":"Home","title":"Mycelia.count_kmers","text":"count_kmers(\n    _::Type{KMER_TYPE},\n    records::AbstractArray{T<:Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}, 1}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.count_matrix_to_probability_matrix-Tuple{Any}","page":"Home","title":"Mycelia.count_matrix_to_probability_matrix","text":"count_matrix_to_probability_matrix(counts_matrix) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.count_records-Tuple{Any}","page":"Home","title":"Mycelia.count_records","text":"count_records(fastx) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.countmap_columns-Tuple{Any}","page":"Home","title":"Mycelia.countmap_columns","text":"countmap_columns(table)\n\n\nDescription\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.create_database-Tuple{}","page":"Home","title":"Mycelia.create_database","text":"create_database(; database, address, username, password)\n\n\nA short description of the function\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.create_node_constraints-Tuple{Any}","page":"Home","title":"Mycelia.create_node_constraints","text":"create_node_constraints(\n    graph;\n    address,\n    username,\n    password,\n    database\n)\n\n\nDescription\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.create_tarchive-Tuple{}","page":"Home","title":"Mycelia.create_tarchive","text":"create_tarchive(; directory, tarchive)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.cypher-Tuple{Any}","page":"Home","title":"Mycelia.cypher","text":"cypher(\n    cmd;\n    address,\n    username,\n    password,\n    format,\n    database\n) -> Cmd\n\n\nDescription\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.deduplicate_fasta_file-Tuple{Any, Any}","page":"Home","title":"Mycelia.deduplicate_fasta_file","text":"deduplicate_fasta_file(in_fasta, out_fasta) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.detect_alphabet-Tuple{AbstractString}","page":"Home","title":"Mycelia.detect_alphabet","text":"detect_alphabet(seq::AbstractString) -> Symbol\n\nDetermines the alphabet of a sequence. The function scans through seq only once:\n\nIf a 'T' or 't' is found (and no 'U/u'), the sequence is classified as DNA.\nIf a 'U' or 'u' is found (and no 'T/t'), it is classified as RNA.\nIf both T and U occur, an error is thrown.\nIf a character outside the canonical nucleotide and ambiguity codes is encountered, the sequence is assumed to be protein.\nIf neither T nor U are found, the sequence is assumed to be DNA.\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.determine_fasta_coverage-Tuple{Any}","page":"Home","title":"Mycelia.determine_fasta_coverage","text":"determine_fasta_coverage(bam) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.determine_max_canonical_kmers-Tuple{Any, Any}","page":"Home","title":"Mycelia.determine_max_canonical_kmers","text":"determine_max_canonical_kmers(k, ALPHABET) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.determine_max_possible_kmers-Tuple{Any, Any}","page":"Home","title":"Mycelia.determine_max_possible_kmers","text":"determine_max_possible_kmers(k, ALPHABET) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.determine_primary_contig-Tuple{Any}","page":"Home","title":"Mycelia.determine_primary_contig","text":"determine_primary_contig(qualimap_results) -> Any\n\n\nDetermines the contig with the greatest number of total bases mapping to it\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.determine_read_lengths-Tuple{Any}","page":"Home","title":"Mycelia.determine_read_lengths","text":"determine_read_lengths(\n    fastq_file;\n    total_reads\n) -> Vector{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.distance_matrix_to_newick-Tuple{}","page":"Home","title":"Mycelia.distance_matrix_to_newick","text":"distance_matrix_to_newick(\n;\n    distance_matrix,\n    labels,\n    outfile\n)\n\n\nCreate distance matrix from a column-major counts matrix (features as rows and entities as columns) where distance is a proportional to total feature count magnitude (size) and cosine similarity (relative frequency)\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.document_frequency-Tuple{Any}","page":"Home","title":"Mycelia.document_frequency","text":"document_frequency(documents) -> Dict{_A, Int64} where _A\n\n\nA short description of the function\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.download_and_filter_sra_reads-Tuple{}","page":"Home","title":"Mycelia.download_and_filter_sra_reads","text":"download_and_filter_sra_reads(\n;\n    outdir,\n    srr_identifier\n) -> Union{Nothing, Bool}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.download_bandage","page":"Home","title":"Mycelia.download_bandage","text":"download_bandage() -> String\ndownload_bandage(outdir) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"#Mycelia.download_blast_db-Tuple{}","page":"Home","title":"Mycelia.download_blast_db","text":"download_blast_db(; db, dbdir, source, wait)\n\n\nSmart downloading of blast dbs depending on interactive, non interactive context\n\nFor a list of all available databases, run: Mycelia.list_blastdbs()\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.download_genome_by_accession-Tuple{}","page":"Home","title":"Mycelia.download_genome_by_accession","text":"download_genome_by_accession(\n;\n    accession,\n    outdir,\n    compressed\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.download_genome_by_ftp-Tuple{}","page":"Home","title":"Mycelia.download_genome_by_ftp","text":"download_genome_by_ftp(; ftp, outdir)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.download_mmseqs_db-Tuple{}","page":"Home","title":"Mycelia.download_mmseqs_db","text":"download_mmseqs_db(; db, dbdir, force, wait)\n\n\nDownload mmseqs databases\n\n  Name                  Type            Taxonomy        Url                                                           \n- UniRef100             Aminoacid            yes        https://www.uniprot.org/help/uniref\n- UniRef90              Aminoacid            yes        https://www.uniprot.org/help/uniref\n- UniRef50              Aminoacid            yes        https://www.uniprot.org/help/uniref\n- UniProtKB             Aminoacid            yes        https://www.uniprot.org/help/uniprotkb\n- UniProtKB/TrEMBL      Aminoacid            yes        https://www.uniprot.org/help/uniprotkb\n- UniProtKB/Swiss-Prot  Aminoacid            yes        https://uniprot.org\n- NR                    Aminoacid            yes        https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA\n- NT                    Nucleotide             -        https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA\n- GTDB                  Aminoacid            yes        https://gtdb.ecogenomic.org\n- PDB                   Aminoacid              -        https://www.rcsb.org\n- PDB70                 Profile                -        https://github.com/soedinglab/hh-suite\n- Pfam-A.full           Profile                -        https://pfam.xfam.org\n- Pfam-A.seed           Profile                -        https://pfam.xfam.org\n- Pfam-B                Profile                -        https://xfam.wordpress.com/2020/06/30/a-new-pfam-b-is-released\n- CDD                   Profile                -        https://www.ncbi.nlm.nih.gov/Structure/cdd/cdd.shtml\n- eggNOG                Profile                -        http://eggnog5.embl.de\n- VOGDB                 Profile                -        https://vogdb.org\n- dbCAN2                Profile                -        http://bcb.unl.edu/dbCAN2\n- SILVA                 Nucleotide           yes        https://www.arb-silva.de\n- Resfinder             Nucleotide             -        https://cge.cbs.dtu.dk/services/ResFinder\n- Kalamari              Nucleotide           yes        https://github.com/lskatz/Kalamari\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.drop_empty_columns!-Tuple{DataFrames.AbstractDataFrame}","page":"Home","title":"Mycelia.drop_empty_columns!","text":"drop_empty_columns!(\n    df::DataFrames.AbstractDataFrame\n) -> DataFrames.AbstractDataFrame\n\n\nIdentify all columns that have only missing or empty values, and remove those columns from the dataframe in-place.\n\nReturns a modified version of the original dataframe. \n\nSee also: dropemptycolumns\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.drop_empty_columns-Tuple{DataFrames.AbstractDataFrame}","page":"Home","title":"Mycelia.drop_empty_columns","text":"drop_empty_columns(df::DataFrames.AbstractDataFrame) -> Any\n\n\nIdentify all columns that have only missing or empty values, and remove those columns from the dataframe.\n\nReturns a modified copy of the dataframe.\n\nSee also: dropemptycolumns!\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.edge_path_to_sequence-Tuple{Any, Any}","page":"Home","title":"Mycelia.edge_path_to_sequence","text":"edge_path_to_sequence(kmer_graph, edge_path) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.edge_probability-Tuple{Any, Any}","page":"Home","title":"Mycelia.edge_probability","text":"edge_probability(stranded_kmer_graph, edge) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.edgemer_to_vertex_kmers-Tuple{Any}","page":"Home","title":"Mycelia.edgemer_to_vertex_kmers","text":"edgemer_to_vertex_kmers(\n    edgemer\n) -> Tuple{Kmers.Kmer{BioSequences.DNAAlphabet{2}}, Kmers.Kmer{BioSequences.DNAAlphabet{2}}}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.equivalent_fasta_sequences-Tuple{Any, Any}","page":"Home","title":"Mycelia.equivalent_fasta_sequences","text":"equivalent_fasta_sequences(fasta_1, fasta_2) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.error_rate_to_q_value-Tuple{Any}","page":"Home","title":"Mycelia.error_rate_to_q_value","text":"error_rate_to_q_value(error_rate) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.export_blast_db-Tuple{}","page":"Home","title":"Mycelia.export_blast_db","text":"export_blast_db(; path_to_db, fasta)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.export_blast_db_taxonomy_table-Tuple{}","page":"Home","title":"Mycelia.export_blast_db_taxonomy_table","text":"export_blast_db_taxonomy_table(; path_to_db, outfile)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fasta_and_gff_to_genbank-Tuple{}","page":"Home","title":"Mycelia.fasta_and_gff_to_genbank","text":"fasta_and_gff_to_genbank(; fasta, gff, genbank)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fasta_genome_size-Tuple{Any}","page":"Home","title":"Mycelia.fasta_genome_size","text":"fasta_genome_size(fasta_file) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fasta_list_to_dense_counts_table-Tuple{}","page":"Home","title":"Mycelia.fasta_list_to_dense_counts_table","text":"fasta_list_to_dense_counts_table(; fasta_list, k, alphabet)\n\n\nCreate a dense kmer counts table (canonical for DNA, stranded for RNA & AA) for each fasta provided in a list. Scales very well for large numbers of organisms/fasta files, but not for k. Recommended for k <= 13, although 17 may still be possible\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fasta_table_to_fasta-Tuple{Any}","page":"Home","title":"Mycelia.fasta_table_to_fasta","text":"fasta_table_to_fasta(fasta_df) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fasta_to_reference_kmer_counts-Tuple{}","page":"Home","title":"Mycelia.fasta_to_reference_kmer_counts","text":"fasta_to_reference_kmer_counts(; kmer_type, fasta)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fasta_to_table-Tuple{Any}","page":"Home","title":"Mycelia.fasta_to_table","text":"fasta_to_table(fasta) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fasta_xam_mapping_stats-Tuple{}","page":"Home","title":"Mycelia.fasta_xam_mapping_stats","text":"fasta_xam_mapping_stats(; fasta, xam)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fastani_list-Tuple{}","page":"Home","title":"Mycelia.fastani_list","text":"fastani_list(\n;\n    query_list,\n    reference_list,\n    outfile,\n    threads,\n    force\n) -> Union{Nothing, Base.Process}\n\n\nRun fastani with a query and reference list\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fasterq_dump-Tuple{}","page":"Home","title":"Mycelia.fasterq_dump","text":"fasterq_dump(\n;\n    outdir,\n    srr_identifier\n) -> Union{Nothing, Base.Process}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fastq_record-Tuple{}","page":"Home","title":"Mycelia.fastq_record","text":"fastq_record(; identifier, sequence, quality_scores)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fastx_stats-Tuple{Any}","page":"Home","title":"Mycelia.fastx_stats","text":"fastx_stats(fastq) -> Base.Process\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fastx_to_contig_lengths-Tuple{Any}","page":"Home","title":"Mycelia.fastx_to_contig_lengths","text":"fastx_to_contig_lengths(\n    fastx\n) -> OrderedCollections.OrderedDict\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fastx_to_kmer_graph-Tuple{Any, AbstractVector{<:AbstractString}}","page":"Home","title":"Mycelia.fastx_to_kmer_graph","text":"fastx_to_kmer_graph(\n    KMER_TYPE,\n    fastxs::AbstractVector{<:AbstractString}\n) -> MetaGraphs.MetaGraph\n\n\nCreate an in-memory kmer-graph that records:\n\nall kmers\ncounts\nall observed edges between kmers\nedge orientations\nedge counts\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fibonacci_numbers_less_than-Tuple{Int64}","page":"Home","title":"Mycelia.fibonacci_numbers_less_than","text":"fibonacci_numbers_less_than(\n    n::Int64\n) -> Union{Vector{Any}, Vector{Int64}}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.filesize_human_readable-Tuple{Any}","page":"Home","title":"Mycelia.filesize_human_readable","text":"filesize_human_readable(f) -> Any\n\n\nGets the size of a file and returns it in a human-readable format.\n\nArguments\n\nf: The path to the file, either as a String or an AbstractString.\n\nReturns\n\nA string representing the file size in a human-readable format (e.g., \"3.40 MB\").\n\nDetails\n\nThis function internally uses filesize(f) to get the file size in bytes, then leverages Base.format_bytes to convert it into a human-readable format with appropriate units (KB, MB, GB, etc.).\n\nExamples\n\njulia> filesize_human_readable(\"my_image.jpg\")\n\"2.15 MB\"\n\nSee Also\n\nfilesize: Gets the size of a file in bytes.\nBase.format_bytes: Converts a byte count into a human-readable string. \n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.filter_long_reads-Tuple{}","page":"Home","title":"Mycelia.filter_long_reads","text":"filter_long_reads(\n;\n    in_fastq,\n    out_fastq,\n    min_mean_q,\n    keep_percent\n)\n\n\nFilter and process long reads from a FASTQ file using Filtlong.\n\nThis function filters long sequencing reads based on quality and length criteria,  then compresses the output using pigz.\n\nArguments\n\nin_fastq::String: Path to the input FASTQ file.\nout_fastq::String: Path to the output filtered and compressed FASTQ file.   Defaults to the input filename with \".filtlong.fq.gz\" appended.\nmin_mean_q::Int: Minimum mean quality score for reads to be kept. Default is 20.\nkeep_percent::Int: Percentage of reads to keep after filtering. Default is 95.\n\nReturns\n\nCmd: A pipeline command that can be run to execute the filtering and compression.\n\nDetails\n\nThis function uses Filtlong to filter long reads and pigz for compression. It requires the Bioconda environment for Filtlong to be set up, which is handled internally.\n\nExample\n\nfilter_cmd = filter_long_reads(\n    in_fastq = \"input.fastq.gz\",\n    out_fastq = \"filtered_output.fq.gz\",\n    min_mean_q = 25,\n    keep_percent = 90\n)\nrun(filter_cmd)\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.find_matching_prefix-Tuple{String, String}","page":"Home","title":"Mycelia.find_matching_prefix","text":"find_matching_prefix(\n    filename1::String,\n    filename2::String;\n    strip_trailing_delimiters\n) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.find_nonempty_columns-Tuple{Any}","page":"Home","title":"Mycelia.find_nonempty_columns","text":"find_nonempty_columns(df) -> Any\n\n\nIdentify all columns that have only missing or empty values\n\nReturns as a bit array\n\nSee also: dropemptycolumns, dropemptycolumns!\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.find_resampling_stretches-Tuple{}","page":"Home","title":"Mycelia.find_resampling_stretches","text":"find_resampling_stretches(\n;\n    record_kmer_solidity,\n    solid_branching_kmer_indices\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.fit_optimal_number_of_clusters","page":"Home","title":"Mycelia.fit_optimal_number_of_clusters","text":"fit_optimal_number_of_clusters(\n    distance_matrix\n) -> @NamedTuple{optimal_number_of_clusters::Int64, ks_assessed::Vector{Int64}, within_cluster_sum_of_squares::Vector{Float64}, silhouette_scores::Vector{Float64}}\nfit_optimal_number_of_clusters(\n    distance_matrix,\n    ks_to_try\n) -> NamedTuple{(:optimal_number_of_clusters, :ks_assessed, :within_cluster_sum_of_squares, :silhouette_scores), <:Tuple{Any, Any, Vector{Float64}, Vector{Float64}}}\n\n\nA short description of the function\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"function"},{"location":"#Mycelia.fit_optimal_number_of_clusters_hclust","page":"Home","title":"Mycelia.fit_optimal_number_of_clusters_hclust","text":"fit_optimal_number_of_clusters_hclust(\n    distance_matrix\n) -> NamedTuple{(:optimal_number_of_clusters, :ks_assessed, :silhouette_scores, :hclust_result), <:Tuple{Int64, Vector{Int64}, Vector{Float64}, Clustering.Hclust}}\nfit_optimal_number_of_clusters_hclust(\n    distance_matrix,\n    ks_to_try\n) -> NamedTuple{(:optimal_number_of_clusters, :ks_assessed, :silhouette_scores, :hclust_result), <:Tuple{Any, Any, Vector{Float64}, Clustering.Hclust}}\n\n\nA short description of the function\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"function"},{"location":"#Mycelia.frequency_matrix_to_cosine_distance_matrix-Tuple{Any}","page":"Home","title":"Mycelia.frequency_matrix_to_cosine_distance_matrix","text":"frequency_matrix_to_cosine_distance_matrix(\n    probability_matrix\n) -> Any\n\n\nCreate cosine distance matrix from a column-major counts matrix (features as rows and entities as columns) where distance is a proportional to cosine similarity (relative frequency)\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.frequency_matrix_to_euclidean_distance_matrix-Tuple{Any}","page":"Home","title":"Mycelia.frequency_matrix_to_euclidean_distance_matrix","text":"frequency_matrix_to_euclidean_distance_matrix(\n    counts_table\n) -> Any\n\n\nCreate a Euclidean distance matrix from a column-major counts matrix (features as rows and entities as columns), where distance is proportional to total feature count magnitude (size).\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.genbank_to_codon_frequencies-Tuple{Any}","page":"Home","title":"Mycelia.genbank_to_codon_frequencies","text":"genbank_to_codon_frequencies(\n    genbank;\n    allow_all\n) -> Dict{BioSymbols.AminoAcid, Dict{Kmers.Kmer{BioSequences.DNAAlphabet{2}, 3, 1}, Int64}}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.genbank_to_fasta-Tuple{}","page":"Home","title":"Mycelia.genbank_to_fasta","text":"genbank_to_fasta(; genbank, fasta, force)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.generate_all_possible_canonical_kmers-Tuple{Any, Any}","page":"Home","title":"Mycelia.generate_all_possible_canonical_kmers","text":"generate_all_possible_canonical_kmers(k, alphabet) -> Any\n\n\nCreate distance matrix from a column-major counts matrix (features as rows and entities as columns) where distance is a proportional to total feature count magnitude (size) and cosine similarity (relative frequency)\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.generate_all_possible_kmers-Tuple{Any, Any}","page":"Home","title":"Mycelia.generate_all_possible_kmers","text":"generate_all_possible_kmers(k, alphabet) -> Any\n\n\nCreate distance matrix from a column-major counts matrix (features as rows and entities as columns) where distance is a proportional to total feature count magnitude (size) and cosine similarity (relative frequency)\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.generate_transterm_coordinates_from_fasta-Tuple{Any}","page":"Home","title":"Mycelia.generate_transterm_coordinates_from_fasta","text":"generate_transterm_coordinates_from_fasta(fasta) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.generate_transterm_coordinates_from_gff-Tuple{Any}","page":"Home","title":"Mycelia.generate_transterm_coordinates_from_gff","text":"generate_transterm_coordinates_from_gff(gff_file) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.get_correct_quality-Tuple{Symbol, Int64, Int64}","page":"Home","title":"Mycelia.get_correct_quality","text":"get_correct_quality(tech::Symbol, pos::Int, read_length::Int) -> Int\n\nSimulates a Phred quality score (using the Sanger convention) for a correctly observed base. For Illumina, the quality score is modeled to decay linearly from ~40 at the start to ~20 at the end of the read. For other technologies, the score is sampled from a normal distribution with parameters typical for that platform.\n\nReturns an integer quality score.\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.get_error_quality-Tuple{Symbol}","page":"Home","title":"Mycelia.get_error_quality","text":"get_error_quality(tech::Symbol) -> Int\n\nSimulates a Phred quality score (using the Sanger convention) for a base observed with an error. Error bases are assigned lower quality scores than correctly observed bases. For Illumina, scores typically range between 5 and 15; for nanopore and pacbio, slightly lower values are used; and for ultima, a modest quality score is assigned.\n\nReturns an integer quality score.\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.get_genbank-Tuple{}","page":"Home","title":"Mycelia.get_genbank","text":"get_genbank(\n;\n    db,\n    accession,\n    ftp\n) -> Union{Nothing, GenomicAnnotations.GenBank.Reader}\n\n\nGet dna (db = \"nuccore\") or protein (db = \"protein\") sequences from NCBI or get fasta directly from FTP site\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.get_gff-Tuple{}","page":"Home","title":"Mycelia.get_gff","text":"get_gff(; db, accession, ftp) -> Any\n\n\nGet dna (db = \"nuccore\") or protein (db = \"protein\") sequences from NCBI or get fasta directly from FTP site\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.get_kmer_index-Tuple{Any, Any}","page":"Home","title":"Mycelia.get_kmer_index","text":"get_kmer_index(kmers, kmer) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.get_sequence-Tuple{}","page":"Home","title":"Mycelia.get_sequence","text":"get_sequence(\n;\n    db,\n    accession,\n    ftp\n) -> Union{Nothing, FASTX.FASTA.Reader}\n\n\nGet dna (db = \"nuccore\") or protein (db = \"protein\") sequences from NCBI or get fasta directly from FTP site\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.gfa_to_fasta-Tuple{}","page":"Home","title":"Mycelia.gfa_to_fasta","text":"gfa_to_fasta(; gfa, fasta)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.gfa_to_structure_table-Tuple{Any}","page":"Home","title":"Mycelia.gfa_to_structure_table","text":"gfa_to_structure_table(\n    gfa\n) -> NamedTuple{(:contig_table, :records), <:Tuple{DataFrames.DataFrame, Any}}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.githash-Tuple{}","page":"Home","title":"Mycelia.githash","text":"githash(; short) -> SubString{String}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.graph_to_gfa-Tuple{}","page":"Home","title":"Mycelia.graph_to_gfa","text":"graph_to_gfa(; graph, outfile)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.install_hashdeep-Tuple{}","page":"Home","title":"Mycelia.install_hashdeep","text":"install_hashdeep() -> Union{Nothing, Base.Process}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.is_equivalent-Tuple{Any, Any}","page":"Home","title":"Mycelia.is_equivalent","text":"is_equivalent(a, b) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.isolate_normalized_primary_contig-Tuple{Any, Any, Any, Any, Int64}","page":"Home","title":"Mycelia.isolate_normalized_primary_contig","text":"isolate_normalized_primary_contig(\n    assembled_fasta,\n    assembled_gfa,\n    qualimap_report_txt,\n    identifier,\n    k::Int64;\n    primary_contig_fasta\n) -> String\n\n\nPrimary contig is defined as the contig with the most bases mapped to it\n\nIn the context of picking out phage from metagenomic assemblies the longest contig is often bacteria whereas the highest coverage contigs are often primer-dimers or other PCR amplification artifacts.\n\nTaking the contig that has the most bases mapped to it as a product of length * depth is cherry picked as our phage\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.iterative_polishing","page":"Home","title":"Mycelia.iterative_polishing","text":"iterative_polishing(\n    fastq\n) -> Vector{T} where T<:(NamedTuple{(:fastq, :k), <:Tuple{Any, Any}})\niterative_polishing(\n    fastq,\n    max_k\n) -> Vector{T} where T<:(NamedTuple{(:fastq, :k), <:Tuple{Any, Any}})\niterative_polishing(\n    fastq,\n    max_k,\n    plot\n) -> Vector{T} where T<:(NamedTuple{(:fastq, :k), <:Tuple{Any, Any}})\n\n\n\n\n\n\n","category":"function"},{"location":"#Mycelia.jaccard_distance-Tuple{Any, Any}","page":"Home","title":"Mycelia.jaccard_distance","text":"jaccard_distance(set1, set2) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.jaccard_similarity-Tuple{Any, Any}","page":"Home","title":"Mycelia.jaccard_similarity","text":"jaccard_similarity(set1, set2) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.jellyfish_count-Tuple{}","page":"Home","title":"Mycelia.jellyfish_count","text":"jellyfish_count(\n;\n    fastx,\n    k,\n    threads,\n    max_mem,\n    canonical,\n    outfile,\n    conda_check\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.jellyfish_counts_to_kmer_frequency_histogram","page":"Home","title":"Mycelia.jellyfish_counts_to_kmer_frequency_histogram","text":"jellyfish_counts_to_kmer_frequency_histogram(\n    jellyfish_counts_file\n) -> Any\njellyfish_counts_to_kmer_frequency_histogram(\n    jellyfish_counts_file,\n    outfile\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"#Mycelia.jitter-Tuple{Any, Any}","page":"Home","title":"Mycelia.jitter","text":"jitter(x, n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.kmer_counts_dict_to_vector-Tuple{Any, Any}","page":"Home","title":"Mycelia.kmer_counts_dict_to_vector","text":"kmer_counts_dict_to_vector(\n    kmer_to_index_map,\n    kmer_counts\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.kmer_counts_to_cosine_similarity-Tuple{Any, Any}","page":"Home","title":"Mycelia.kmer_counts_to_cosine_similarity","text":"kmer_counts_to_cosine_similarity(\n    kmer_counts_1,\n    kmer_counts_2\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.kmer_counts_to_js_divergence-Tuple{Any, Any}","page":"Home","title":"Mycelia.kmer_counts_to_js_divergence","text":"kmer_counts_to_js_divergence(\n    kmer_counts_1,\n    kmer_counts_2\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.kmer_counts_to_merqury_qv-Union{Tuple{}, Tuple{N}, Tuple{k}} where {k, N}","page":"Home","title":"Mycelia.kmer_counts_to_merqury_qv","text":"kmer_counts_to_merqury_qv(\n;\n    raw_data_counts,\n    assembly_counts\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.kmer_path_to_sequence-Tuple{Any}","page":"Home","title":"Mycelia.kmer_path_to_sequence","text":"kmer_path_to_sequence(kmer_path) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.ks-Tuple{}","page":"Home","title":"Mycelia.ks","text":"ks(; min, max) -> Vector{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.lawrencium_sbatch-Tuple{}","page":"Home","title":"Mycelia.lawrencium_sbatch","text":"lawrencium_sbatch(\n;\n    job_name,\n    mail_user,\n    mail_type,\n    logdir,\n    partition,\n    qos,\n    account,\n    nodes,\n    ntasks,\n    time,\n    cpus_per_task,\n    mem_gb,\n    cmd\n)\n\n\nSubmit a command to SLURM using sbatch\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_blastdbs-Tuple{}","page":"Home","title":"Mycelia.list_blastdbs","text":"list_blastdbs(; source) -> Vector{String}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_classes-Tuple{}","page":"Home","title":"Mycelia.list_classes","text":"list_classes() -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_databases-Tuple{}","page":"Home","title":"Mycelia.list_databases","text":"list_databases(; address, username, password)\n\n\nA short description of the function\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_families-Tuple{}","page":"Home","title":"Mycelia.list_families","text":"list_families() -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_full_taxonomy-Tuple{}","page":"Home","title":"Mycelia.list_full_taxonomy","text":"list_full_taxonomy() -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_genera-Tuple{}","page":"Home","title":"Mycelia.list_genera","text":"list_genera() -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_kingdoms-Tuple{}","page":"Home","title":"Mycelia.list_kingdoms","text":"list_kingdoms() -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_orders-Tuple{}","page":"Home","title":"Mycelia.list_orders","text":"list_orders() -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_phylums-Tuple{}","page":"Home","title":"Mycelia.list_phylums","text":"list_phylums() -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_rank-Tuple{Any}","page":"Home","title":"Mycelia.list_rank","text":"top\nsuperkingdom/domain\nkingdom\nphylum\nclass\norder\nfamily\ngenus\nspecies\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_ranks-Tuple{}","page":"Home","title":"Mycelia.list_ranks","text":"list_ranks(; synonyms) -> Vector{String}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_species-Tuple{}","page":"Home","title":"Mycelia.list_species","text":"list_species() -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_subtaxa-Tuple{Any}","page":"Home","title":"Mycelia.list_subtaxa","text":"list_subtaxa(taxid) -> Vector{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_superkingdoms-Tuple{}","page":"Home","title":"Mycelia.list_superkingdoms","text":"list_superkingdoms() -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.list_toplevel-Tuple{}","page":"Home","title":"Mycelia.list_toplevel","text":"list_toplevel() -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.load_blast_db_taxonomy_table-Tuple{Any}","page":"Home","title":"Mycelia.load_blast_db_taxonomy_table","text":"load_blast_db_taxonomy_table(\n    compressed_blast_db_taxonomy_table_file\n) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.load_genbank_metadata-Tuple{}","page":"Home","title":"Mycelia.load_genbank_metadata","text":"load_genbank_metadata() -> DataFrames.DataFrame\n\n\nDescription\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.load_graph-Tuple{Any}","page":"Home","title":"Mycelia.load_graph","text":"load_graph(file) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.load_graph-Tuple{String}","page":"Home","title":"Mycelia.load_graph","text":"load_graph(file::String) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.load_jellyfish_counts-Tuple{Any}","page":"Home","title":"Mycelia.load_jellyfish_counts","text":"load_jellyfish_counts(\n    jellyfish_counts\n) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.load_ncbi_metadata-Tuple{Any}","page":"Home","title":"Mycelia.load_ncbi_metadata","text":"load_ncbi_metadata(db) -> DataFrames.DataFrame\n\n\nDescription\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.load_refseq_metadata-Tuple{}","page":"Home","title":"Mycelia.load_refseq_metadata","text":"load_refseq_metadata() -> DataFrames.DataFrame\n\n\nDescription\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.local_blast_database_info-Tuple{}","page":"Home","title":"Mycelia.local_blast_database_info","text":"local_blast_database_info(; blastdbs_dir) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.merge_fasta_files-Tuple{}","page":"Home","title":"Mycelia.merge_fasta_files","text":"merge_fasta_files(; fasta_files, fasta_file)\n\n\nJoin fasta files while adding origin prefixes to the identifiers.\n\nDoes not guarantee uniqueness but will warn if conflicts arise\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.minimap_index-Tuple{}","page":"Home","title":"Mycelia.minimap_index","text":"minimap_index(\n;\n    fasta,\n    mem_gb,\n    mapping_type,\n    threads,\n    as_string,\n    denominator\n)\n\n\nRun this on the machine you intend to use to map the reads to confirm the index will fit\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.minimap_map-Tuple{}","page":"Home","title":"Mycelia.minimap_map","text":"minimap_map(\n;\n    fasta,\n    fastq,\n    mapping_type,\n    as_string,\n    mem_gb,\n    threads,\n    denominator\n)\n\n\naligning and compressing. No sorting or filtering.\n\nUse shell_only=true to get string command to submit to SLURM\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.minimap_map_paired_end-Tuple{}","page":"Home","title":"Mycelia.minimap_map_paired_end","text":"minimap_map_paired_end(\n;\n    fasta,\n    forward,\n    reverse,\n    mem_gb,\n    threads,\n    outdir,\n    as_string,\n    mapping_type,\n    denominator\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.minimap_map_paired_end_with_index-Tuple{}","page":"Home","title":"Mycelia.minimap_map_paired_end_with_index","text":"minimap_map_paired_end_with_index(\n;\n    fasta,\n    forward,\n    reverse,\n    mem_gb,\n    threads,\n    outdir,\n    as_string,\n    mapping_type,\n    denominator\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.minimap_map_with_index-Tuple{}","page":"Home","title":"Mycelia.minimap_map_with_index","text":"minimap_map_with_index(\n;\n    fasta,\n    mem_gb,\n    mapping_type,\n    threads,\n    fastq,\n    as_string,\n    denominator\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.mmseqs_pairwise_search-Tuple{}","page":"Home","title":"Mycelia.mmseqs_pairwise_search","text":"mmseqs_pairwise_search(; fasta, output)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.mutate_sequence-Tuple{Any}","page":"Home","title":"Mycelia.mutate_sequence","text":"mutate_sequence(reference_sequence) -> Tuple{Any, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.name2taxid-Tuple{Any}","page":"Home","title":"Mycelia.name2taxid","text":"name2taxid(name) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.names2taxids-Tuple{AbstractVector{<:AbstractString}}","page":"Home","title":"Mycelia.names2taxids","text":"names2taxids(names::AbstractVector{<:AbstractString}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.ncbi_ftp_path_to_url-Tuple{}","page":"Home","title":"Mycelia.ncbi_ftp_path_to_url","text":"ncbi_ftp_path_to_url(; ftp_path, extension)\n\n\nExtensions include:\n\ngenomic.fna.gz\ngenomic.gff.gz\nprotein.faa.gz\nassembly_report.txt\nassembly_stats.txt\ncdsfromgenomic.fna.gz\nfeature_count.txt.gz\nfeature_table.txt.gz\ngenomic.gbff.gz\ngenomic.gtf.gz\nprotein.gpff.gz\ntranslated_cds.faa.gz \n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.ncbi_genome_download_accession-Tuple{}","page":"Home","title":"Mycelia.ncbi_genome_download_accession","text":"function ncbi_genome_download_accession(;\n        accession,\n        outdir = pwd(),\n        outpath = joinpath(outdir, accession * \".zip\"),\n        include_string = \"genome\"\n    )\n\nDownload an accession using NCBI datasets command line tool\n\nthe .zip download output to outpath will be unzipped\n\nreturns the outfolder\n\nncbi's default include string is  include_string = \"gff3,rna,cds,protein,genome,seq-report\"\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.ncbi_taxon_summary-Tuple{Any}","page":"Home","title":"Mycelia.ncbi_taxon_summary","text":"ncbi_taxon_summary(taxa_id) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.nearest_prime-Tuple{Int64}","page":"Home","title":"Mycelia.nearest_prime","text":"nearest_prime(n::Int64) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.nersc_sbatch-Tuple{}","page":"Home","title":"Mycelia.nersc_sbatch","text":"nersc_sbatch(\n;\n    job_name,\n    mail_user,\n    mail_type,\n    logdir,\n    scriptdir,\n    qos,\n    nodes,\n    ntasks,\n    time,\n    cpus_per_task,\n    mem_gb,\n    cmd,\n    constraint\n)\n\n\nSubmit a command to SLURM using sbatch\n\nhttps://docs.nersc.gov/jobs/policy/ https://docs.nersc.gov/systems/perlmutter/architecture/#cpu-nodes\n\ndefault is to use shared qos\n\nuse\n\nregular\npreempt (reduced credit usage but not guaranteed to finish)\npremium (priorty runs limited to 5x throughput)\n\nhttps://docs.nersc.gov/systems/perlmutter/running-jobs/#tips-and-tricks\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.nersc_sbatch_shared-Tuple{}","page":"Home","title":"Mycelia.nersc_sbatch_shared","text":"nersc_sbatch_shared(\n;\n    job_name,\n    mail_user,\n    mail_type,\n    logdir,\n    qos,\n    nodes,\n    ntasks,\n    time,\n    cpus_per_task,\n    mem_gb,\n    cmd,\n    constraint\n)\n\n\nSubmit a command to SLURM using sbatch\n\nhttps://docs.nersc.gov/jobs/policy/ https://docs.nersc.gov/systems/perlmutter/architecture/#cpu-nodes\n\ndefault is to use shared qos\n\nuse\n\nregular\npreempt (reduced credit usage but not guaranteed to finish)\npremium (priorty runs limited to 5x throughput)\n\nmax request is 512Gb memory and 128 cores per node\n\nhttps://docs.nersc.gov/systems/perlmutter/running-jobs/#tips-and-tricks\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.node_type_to_dataframe-Tuple{}","page":"Home","title":"Mycelia.node_type_to_dataframe","text":"node_type_to_dataframe(; node_type, graph)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.normalize_codon_frequencies-Tuple{Any}","page":"Home","title":"Mycelia.normalize_codon_frequencies","text":"normalize_codon_frequencies(\n    codon_frequencies\n) -> Dict{BioSymbols.AminoAcid, Dict{Kmers.Kmer{BioSequences.DNAAlphabet{2}, 3, 1}, Float64}}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.normalize_countmap-Tuple{Any}","page":"Home","title":"Mycelia.normalize_countmap","text":"normalize_countmap(countmap) -> Dict\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.normalize_distance_matrix-Tuple{Any}","page":"Home","title":"Mycelia.normalize_distance_matrix","text":"normalize_distance_matrix(distance_matrix) -> Any\n\n\nCreate distance matrix from a column-major counts matrix (features as rows and entities as columns) where distance is a proportional to total feature count magnitude (size) and cosine similarity (relative frequency)\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.normalize_vcf-Tuple{}","page":"Home","title":"Mycelia.normalize_vcf","text":"normalize_vcf(; reference_fasta, vcf_file)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.normalized_current_datetime-Tuple{}","page":"Home","title":"Mycelia.normalized_current_datetime","text":"normalized_current_datetime() -> String\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.observe-Tuple{R} where R<:Union{FASTX.FASTA.Record, FASTX.FASTQ.Record}","page":"Home","title":"Mycelia.observe","text":"observe(\n    record::Union{FASTX.FASTA.Record, FASTX.FASTQ.Record};\n    error_rate\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.observe-Union{Tuple{BioSequences.LongSequence{T}}, Tuple{T}} where T","page":"Home","title":"Mycelia.observe","text":"observe(sequence::BioSequences.LongSequence{T}; error_rate=nothing, tech::Symbol=:illumina) where T\n\nSimulates the “observation” of a biological polymer (DNA, RNA, or protein) by introducing realistic errors along with base‐quality scores. The simulation takes into account both random and systematic error components. In particular, for technologies:\n\nillumina: (mostly substitution errors) the per‐base quality decays along the read (from ~Q40 at the start to ~Q20 at the end);\nnanopore: errors are more frequent and include both substitutions and indels (with overall lower quality scores, and an extra “homopolymer” penalty);\npacbio: errors are dominated by indels (with quality scores typical of raw reads);\nultima: (UG 100/ppmSeq™) correct bases are assigned very high quality (~Q60) while errors are extremely rare and, if they occur, are given a modest quality.\n\nAn error is introduced at each position with a (possibly position‐dependent) probability. For Illumina, the error probability increases along the read; additionally, if a base is part of a homopolymer run (length ≥ 3) and the chosen technology is one that struggles with homopolymers (nanopore, pacbio, ultima), then the local error probability is multiplied by a constant factor.\n\nReturns a tuple (new_seq, quality_scores) where:\n\nnew_seq is a BioSequences.LongSequence{T} containing the “observed” sequence (which may be longer or shorter than the input if insertions or deletions occur), and \nquality_scores is a vector of integers representing the Phred quality scores (using the Sanger convention) for each base in the output sequence.\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.open_fastx-Tuple{AbstractString}","page":"Home","title":"Mycelia.open_fastx","text":"open_fastx(\n    path::AbstractString\n) -> Union{FASTX.FASTA.Reader, FASTX.FASTQ.Reader{T} where T<:(TranscodingStreams.TranscodingStream{C, S} where {S<:IO, C<:TranscodingStreams.Codec})}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.open_genbank-Tuple{Any}","page":"Home","title":"Mycelia.open_genbank","text":"open_genbank(\n    genbank_file\n) -> Vector{GenomicAnnotations.Record}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.open_gff-Tuple{String}","page":"Home","title":"Mycelia.open_gff","text":"open_gff(path::String) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_blast_report-Tuple{Any}","page":"Home","title":"Mycelia.parse_blast_report","text":"parse_blast_report(blast_report) -> DataFrames.DataFrame\n\n\nExpects output type 7 from BLAST, default output type 6 doesn't have the header comments and won't auto-parse\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_gfa-Tuple{Any}","page":"Home","title":"Mycelia.parse_gfa","text":"parse_gfa(gfa) -> MetaGraphs.MetaGraph{Int64, Float64}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_jsonl-Tuple{String}","page":"Home","title":"Mycelia.parse_jsonl","text":"parse_jsonl(filepath::String) -> Vector{Dict{String, Any}}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_mmseqs_easy_taxonomy_lca_tsv-Tuple{Any}","page":"Home","title":"Mycelia.parse_mmseqs_easy_taxonomy_lca_tsv","text":"parse_mmseqs_easy_taxonomy_lca_tsv(\n    lca_tsv\n) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_mmseqs_easy_taxonomy_tophit_report-Tuple{Any}","page":"Home","title":"Mycelia.parse_mmseqs_easy_taxonomy_tophit_report","text":"parse_mmseqs_easy_taxonomy_tophit_report(\n    tophit_report\n) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_mmseqs_tophit_aln-Tuple{Any}","page":"Home","title":"Mycelia.parse_mmseqs_tophit_aln","text":"parse_mmseqs_tophit_aln(tophit_aln) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_qualimap_contig_coverage-Tuple{Any}","page":"Home","title":"Mycelia.parse_qualimap_contig_coverage","text":"parse_qualimap_contig_coverage(\n    qualimap_report_txt\n) -> DataFrames.DataFrame\n\n\nParse the contig coverage information from qualimap bamqc text report, which looks like the following:\n\n# this is spades\n>>>>>>> Coverage per contig\n\n\tNODE_1_length_107478_cov_9.051896\t107478\t21606903\t201.0355886786133\t60.39424208607496\n\tNODE_2_length_5444_cov_1.351945\t5444\t153263\t28.152645113886848\t5.954250612823136\n\tNODE_3_length_1062_cov_0.154390\t1062\t4294\t4.043314500941619\t1.6655384692688975\n\tNODE_4_length_776_cov_0.191489\t776\t3210\t4.13659793814433\t2.252009588980858\n\n# below is megahit\n>>>>>>> Coverage per contig\n\n\tk79_175\t235\t3862\t16.43404255319149\t8.437436249612457\n\tk79_89\t303\t3803\t12.551155115511552\t5.709975376279777\n\tk79_262\t394\t6671\t16.931472081218274\t7.579217802849293\n\tk79_90\t379\t1539\t4.060686015831134\t1.2929729111266581\n\tk79_91\t211\t3749\t17.767772511848342\t11.899185693011933\n\tk79_0\t2042\t90867\t44.49902056807052\t18.356525483516613\n\nTo make this more robust, consider reading in the names of the contigs from the assembled fasta\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_rtg_eval_output-Tuple{Any}","page":"Home","title":"Mycelia.parse_rtg_eval_output","text":"parse_rtg_eval_output(f) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_transterm_output-Tuple{Any}","page":"Home","title":"Mycelia.parse_transterm_output","text":"parse_transterm_output(\n    transterm_output\n) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_virsorter_score_tsv-Tuple{Any}","page":"Home","title":"Mycelia.parse_virsorter_score_tsv","text":"parse_virsorter_score_tsv(\n    virsorter_score_tsv\n) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_xam_to_mapped_records_table","page":"Home","title":"Mycelia.parse_xam_to_mapped_records_table","text":"parse_xam_to_mapped_records_table(\n    xam\n) -> DataFrames.DataFrame\nparse_xam_to_mapped_records_table(\n    xam,\n    primary_only\n) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"function"},{"location":"#Mycelia.parse_xam_to_primary_mapping_table-Tuple{Any}","page":"Home","title":"Mycelia.parse_xam_to_primary_mapping_table","text":"parse_xam_to_primary_mapping_table(\n    xam\n) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_xam_to_summary_table-Tuple{Any}","page":"Home","title":"Mycelia.parse_xam_to_summary_table","text":"parse_xam_to_summary_table(xam) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.parse_xam_to_taxonomic_mapping_quality","page":"Home","title":"Mycelia.parse_xam_to_taxonomic_mapping_quality","text":"parse_xam_to_taxonomic_mapping_quality(\n    xam\n) -> DataFrames.DataFrame\nparse_xam_to_taxonomic_mapping_quality(\n    xam,\n    primary_only\n) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"function"},{"location":"#Mycelia.path_to_sequence-Tuple{Any, Any}","page":"Home","title":"Mycelia.path_to_sequence","text":"path_to_sequence(kmers, path) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.plot_graph-Tuple{Any}","page":"Home","title":"Mycelia.plot_graph","text":"plot_graph(graph) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.plot_kmer_frequency_spectra-Tuple{Any}","page":"Home","title":"Mycelia.plot_kmer_frequency_spectra","text":"plot_kmer_frequency_spectra(\n    counts;\n    log_scale,\n    kwargs...\n) -> Plots.Plot\n\n\nPlots a histogram of kmer counts against # of kmers with those counts\n\nReturns the plot object for adding additional layers and saving\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.plot_optimal_cluster_assessment_results-Tuple{Any}","page":"Home","title":"Mycelia.plot_optimal_cluster_assessment_results","text":"plot_optimal_cluster_assessment_results(\n    clustering_results\n) -> Any\n\n\nA short description of the function\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.polish_fastq-Tuple{}","page":"Home","title":"Mycelia.polish_fastq","text":"polish_fastq(; fastq, k)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.prefetch-Tuple{}","page":"Home","title":"Mycelia.prefetch","text":"prefetch(; SRR, outdir)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.process_fastq_record-Tuple{}","page":"Home","title":"Mycelia.process_fastq_record","text":"process_fastq_record(\n;\n    record,\n    kmer_graph,\n    yen_k_shortest_paths_and_weights,\n    yen_k\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.q_value_to_error_rate-Tuple{Any}","page":"Home","title":"Mycelia.q_value_to_error_rate","text":"q_value_to_error_rate(q_value) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.random_fasta_record-Tuple{}","page":"Home","title":"Mycelia.random_fasta_record","text":"random_fasta_record(\n;\n    moltype,\n    seed,\n    L\n) -> FASTX.FASTA.Record\n\n\nGenerates a random FASTA record with a specified molecular type and sequence length.\n\nArguments\n\nmoltype::Symbol=:DNA: The type of molecule to generate (:DNA, :RNA, or :AA for amino acids).\nseed: The random seed used for sequence generation (default: a random integer).\nL: The length of the sequence (default: a random integer up to typemax(UInt16)).\n\nReturns\n\nA FASTX.FASTA.Record containing:\nA randomly generated UUID identifier.\nA randomly generated sequence of the specified type.\n\nErrors\n\nThrows an error if moltype is not one of :DNA, :RNA, or :AA.\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.rclone_copy-Tuple{Any, Any}","page":"Home","title":"Mycelia.rclone_copy","text":"rclone_copy(source, dest; config, max_attempts, sleep_timer)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.rclone_list_directories-Tuple{Any}","page":"Home","title":"Mycelia.rclone_list_directories","text":"rclone_list_directories(path) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.read_fastani-Tuple{String}","page":"Home","title":"Mycelia.read_fastani","text":"read_fastani(path::String) -> DataFrames.DataFrame\n\n\nImports results of fastani\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.read_gff-Tuple{AbstractString}","page":"Home","title":"Mycelia.read_gff","text":"read_gff(gff::AbstractString) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.read_gff-Tuple{Any}","page":"Home","title":"Mycelia.read_gff","text":"read_gff(gff_io) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.read_kraken_report-Tuple{Any}","page":"Home","title":"Mycelia.read_kraken_report","text":"read_kraken_report(kraken_report) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.read_mmseqs_easy_search-Tuple{Any}","page":"Home","title":"Mycelia.read_mmseqs_easy_search","text":"read_mmseqs_easy_search(mmseqs_file) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.reverse_translate-Tuple{BioSequences.LongAA}","page":"Home","title":"Mycelia.reverse_translate","text":"reverse_translate(\n    protein_sequence::BioSequences.LongAA\n) -> BioSequences.LongSequence{BioSequences.DNAAlphabet{2}}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.run_blast-Tuple{}","page":"Home","title":"Mycelia.run_blast","text":"run_blast(\n;\n    out_dir,\n    fasta,\n    blast_db,\n    blast_command,\n    force,\n    remote,\n    wait\n)\n\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.run_blastn-Tuple{}","page":"Home","title":"Mycelia.run_blastn","text":"run_blastn(\n;\n    out_dir,\n    fasta,\n    blast_db,\n    task,\n    force,\n    remote,\n    wait\n)\n\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.run_clustal_omega-Tuple{}","page":"Home","title":"Mycelia.run_clustal_omega","text":"Runs clustal omega on a fasta file\n\nvalid outfmts include\n\n[\"fasta\", \"clustal\", \"msf\", \"phylip\", \"selex\", \"stockholm\", \"vienna\"]\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.run_ectyper-Tuple{Any}","page":"Home","title":"Mycelia.run_ectyper","text":"run_ectyper(fasta_file) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.run_mlst-Tuple{Any}","page":"Home","title":"Mycelia.run_mlst","text":"run_mlst(fasta_file) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.run_mmseqs_easy_search-Tuple{}","page":"Home","title":"Mycelia.run_mmseqs_easy_search","text":"run_mmseqs_easy_search(\n;\n    query_fasta,\n    target_database,\n    out_dir,\n    outfile,\n    format_output,\n    threads,\n    force\n)\n\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.run_padloc-Tuple{Any}","page":"Home","title":"Mycelia.run_padloc","text":"run_padloc(fasta_file) -> Union{Nothing, Base.Process}\n\n\nRun the 'padloc' tool from the 'padlocbio' conda environment on a given FASTA file.\n\nhttps://doi.org/10.1093/nar/gkab883 https://github.com/padlocbio/padloc\n\nThis function first ensures that the 'padloc' environment is available via Bioconda.  It then attempts to update the 'padloc' database.  If a 'padloc' output file (with a '_padloc.csv' suffix) does not already exist for the input FASTA file,  it runs 'padloc' with the specified FASTA file as input.\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.run_prodigal-Tuple{}","page":"Home","title":"Mycelia.run_prodigal","text":"run_prodigal(; fasta_file, out_dir)\n\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.run_samtools_flagstat","page":"Home","title":"Mycelia.run_samtools_flagstat","text":"run_samtools_flagstat(xam) -> Any\nrun_samtools_flagstat(xam, samtools_flagstat) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"#Mycelia.run_transterm-Tuple{}","page":"Home","title":"Mycelia.run_transterm","text":"run_transterm(; fasta, gff)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.samtools_index_fasta-Tuple{}","page":"Home","title":"Mycelia.samtools_index_fasta","text":"samtools_index_fasta(; fasta)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.save_graph-Tuple{Graphs.AbstractGraph, String}","page":"Home","title":"Mycelia.save_graph","text":"save_graph(\n    graph::Graphs.AbstractGraph,\n    outfile::String\n) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.scg_sbatch-Tuple{}","page":"Home","title":"Mycelia.scg_sbatch","text":"scg_sbatch(\n;\n    job_name,\n    mail_user,\n    mail_type,\n    logdir,\n    partition,\n    account,\n    nodes,\n    ntasks,\n    time,\n    cpus_per_task,\n    mem_gb,\n    cmd\n)\n\n\nSubmit a command to SLURM using sbatch\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.seq2sha256-Tuple{AbstractString}","page":"Home","title":"Mycelia.seq2sha256","text":"seq2sha256(seq::AbstractString) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.seq2sha256-Tuple{BioSequences.BioSequence}","page":"Home","title":"Mycelia.seq2sha256","text":"seq2sha256(seq::BioSequences.BioSequence) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.sequence_to_stranded_path-Tuple{Any, Any}","page":"Home","title":"Mycelia.sequence_to_stranded_path","text":"sequence_to_stranded_path(\n    stranded_kmers,\n    sequence\n) -> Vector{Pair{Int64, Bool}}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.setup_taxonkit_taxonomy-Tuple{}","page":"Home","title":"Mycelia.setup_taxonkit_taxonomy","text":"setup_taxonkit_taxonomy() -> String\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.showall_blastdbs-Tuple{}","page":"Home","title":"Mycelia.showall_blastdbs","text":"showall_blastdbs(; source) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.simulate_nanopore_reads-Tuple{}","page":"Home","title":"Mycelia.simulate_nanopore_reads","text":"simulate_nanopore_reads(; fasta, quantity, outfile)\n\n\nquantity should be either fold coverage (e.g. \"50x\"), or total bases sequenced (e.g. 1000000) - NOT TOTAL READS\n\nSee also: simulate_pacbio_reads, simulate_nearly_perfect_long_reads, simulate_short_reads\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.simulate_nearly_perfect_long_reads-Tuple{}","page":"Home","title":"Mycelia.simulate_nearly_perfect_long_reads","text":"simulate_nearly_perfect_long_reads()\n\n\nquantity should be either fold coverage (e.g. \"50x\"), or total bases sequenced (e.g. 1000000) - NOT TOTAL READS\n\nSee also: simulate_pacbio_reads, simulate_nanopore_reads, simulate_short_reads\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.simulate_pacbio_reads-Tuple{}","page":"Home","title":"Mycelia.simulate_pacbio_reads","text":"simulate_pacbio_reads(; fasta, quantity, outfile)\n\n\nquantity should be either fold coverage (e.g. \"50x\"), or total bases sequenced (e.g. 1000000) - NOT TOTAL READS\n\nReads are ~ 15kb\n\nSee also: simulate_nanopore_reads, simulate_nearly_perfect_long_reads, simulate_short_reads\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.simulate_short_reads-Tuple{}","page":"Home","title":"Mycelia.simulate_short_reads","text":"simulate_short_reads(; in_fasta, coverage, outbase)\n\n\nSee also: simulate_nanopore_reads, simulate_nearly_perfect_long_reads, simulate_pacbio_reads\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.simulate_variants-Tuple{FASTX.FASTA.Record}","page":"Home","title":"Mycelia.simulate_variants","text":"simulate_variants(\n    fasta_record::FASTX.FASTA.Record;\n    n_variants,\n    window_size,\n    variant_size_disbribution,\n    variant_type_likelihoods\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.simulate_variants-Tuple{String}","page":"Home","title":"Mycelia.simulate_variants","text":"simulate_variants(fasta_file::String) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.sort_fastq","page":"Home","title":"Mycelia.sort_fastq","text":"sort_fastq(input_fastq) -> String\nsort_fastq(input_fastq, output_fastq) -> Any\n\n\nThis turns a 4-line FASTQ entry into a single tab separated line, adds a column with the length of each read, passes it to Unix sort, removes the length column, and converts it back into a FASTQ file.\n\nsorts longest to shortest!!\n\nhttp://thegenomefactory.blogspot.com/2012/11/sorting-fastq-files-by-sequence-length.html\n\n\n\n\n\n","category":"function"},{"location":"#Mycelia.subsample_reads_seqkit-Tuple{}","page":"Home","title":"Mycelia.subsample_reads_seqkit","text":"subsample_reads_seqkit(\n;\n    in_fastq,\n    out_fastq,\n    n_reads,\n    proportion_reads\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.system_mem_to_minimap_index_size-Tuple{}","page":"Home","title":"Mycelia.system_mem_to_minimap_index_size","text":"system_mem_to_minimap_index_size(\n;\n    system_mem_gb,\n    denominator\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.system_overview-Tuple{}","page":"Home","title":"Mycelia.system_overview","text":"system_overview(\n;\n    path\n) -> @NamedTuple{system_threads::Int64, julia_threads::Int64, total_memory::String, available_memory::String, occupied_memory::String, total_storage::String, available_storage::String, occupied_storage::String}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.tar_extract-Tuple{}","page":"Home","title":"Mycelia.tar_extract","text":"tar_extract(; tarchive, directory)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.taxids2lca-Tuple{Vector{Int64}}","page":"Home","title":"Mycelia.taxids2lca","text":"taxids2lca(ids::Vector{Int64}) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.taxids2ncbi_taxonomy_table-Tuple{AbstractVector{Int64}}","page":"Home","title":"Mycelia.taxids2ncbi_taxonomy_table","text":"taxids2ncbi_taxonomy_table(\n    taxids::AbstractVector{Int64}\n) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.taxonomic_id_to_children-Tuple{Any}","page":"Home","title":"Mycelia.taxonomic_id_to_children","text":"taxonomic_id_to_children(\n    tax_id;\n    DATABASE_ID,\n    USERNAME,\n    PASSWORD\n)\n\n\nDescription\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.translate_nucleic_acid_fasta-Tuple{Any, Any}","page":"Home","title":"Mycelia.translate_nucleic_acid_fasta","text":"translate_nucleic_acid_fasta(\n    fasta_nucleic_acid_file,\n    fasta_amino_acid_file\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.transterm_output_to_gff-Tuple{Any}","page":"Home","title":"Mycelia.transterm_output_to_gff","text":"transterm_output_to_gff(transterm_output) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.trim_galore-Tuple{}","page":"Home","title":"Mycelia.trim_galore","text":"trim_galore(\n;\n    outdir,\n    identifier\n) -> Union{Nothing, Base.Process}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.type_to_string-Tuple{AbstractString}","page":"Home","title":"Mycelia.type_to_string","text":"type_to_string(T::AbstractString) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.type_to_string-Tuple{Any}","page":"Home","title":"Mycelia.type_to_string","text":"type_to_string(T) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.update_fasta_with_vcf-Tuple{}","page":"Home","title":"Mycelia.update_fasta_with_vcf","text":"update_fasta_with_vcf(; in_fasta, vcf_file, out_fasta)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.update_gff_with_mmseqs-Tuple{Any, Any}","page":"Home","title":"Mycelia.update_gff_with_mmseqs","text":"update_gff_with_mmseqs(gff_file, mmseqs_file)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.upload_edge_type_over_url_from_graph-Tuple{}","page":"Home","title":"Mycelia.upload_edge_type_over_url_from_graph","text":"upload_edge_type_over_url_from_graph(\n;\n    src_type,\n    dst_type,\n    edge_type,\n    graph,\n    ADDRESS,\n    USERNAME,\n    PASSWORD,\n    DATABASE,\n    window_size\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.upload_node_over_api-Tuple{Any, Any}","page":"Home","title":"Mycelia.upload_node_over_api","text":"upload_node_over_api(\n    graph,\n    v;\n    ADDRESS,\n    USERNAME,\n    PASSWORD,\n    DATABASE\n)\n\n\nDescription\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.upload_node_table-Tuple{}","page":"Home","title":"Mycelia.upload_node_table","text":"upload_node_table(\n;\n    table,\n    window_size,\n    address,\n    password,\n    username,\n    database,\n    neo4j_import_dir\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.upload_node_type_over_url_from_graph-Tuple{}","page":"Home","title":"Mycelia.upload_node_type_over_url_from_graph","text":"upload_node_type_over_url_from_graph(\n;\n    node_type,\n    graph,\n    ADDRESS,\n    USERNAME,\n    PASSWORD,\n    DATABASE,\n    window_size\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.upload_nodes_over_api-Tuple{Any}","page":"Home","title":"Mycelia.upload_nodes_over_api","text":"upload_nodes_over_api(\n    graph;\n    ADDRESS,\n    USERNAME,\n    PASSWORD,\n    DATABASE\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.upload_nodes_to_neo4j-Tuple{}","page":"Home","title":"Mycelia.upload_nodes_to_neo4j","text":"upload_nodes_to_neo4j(\n;\n    graph,\n    address,\n    username,\n    password,\n    format,\n    database,\n    neo4j_import_directory\n)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.vcat_with_missing-Tuple{Vararg{DataFrames.AbstractDataFrame}}","page":"Home","title":"Mycelia.vcat_with_missing","text":"vcat_with_missing(\n    dfs::DataFrames.AbstractDataFrame...\n) -> Union{DataFrames.DataFrame, Vector{Any}}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.viterbi_maximum_likelihood_traversals-Tuple{Any}","page":"Home","title":"Mycelia.viterbi_maximum_likelihood_traversals","text":"viterbi_maximum_likelihood_traversals(\n    stranded_kmer_graph;\n    error_rate,\n    verbosity\n) -> Vector{FASTX.FASTA.Record}\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.wcss-Tuple{Any}","page":"Home","title":"Mycelia.wcss","text":"wcss(clustering_result) -> Any\n\n\nA short description of the function\n\njulia> 1 + 1\n2\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.write_fasta-Tuple{}","page":"Home","title":"Mycelia.write_fasta","text":"write_fasta(; outfile, records, gzip)\n\n\nWrites FASTA records to a file, optionally gzipped.\n\nArguments\n\noutfile::AbstractString: Path to the output FASTA file.  Will append \".gz\" if gzip is true.\nrecords::Vector{FASTX.FASTA.Record}: A vector of FASTA records.\ngzip::Bool=false: Whether to compress the output with gzip.\n\nReturns\n\noutfile::String: The path to the output FASTA file (including \".gz\" if applicable).\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.write_gff-Tuple{}","page":"Home","title":"Mycelia.write_gff","text":"write_gff(; gff, outfile)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.write_vcf_table-Tuple{}","page":"Home","title":"Mycelia.write_vcf_table","text":"write_vcf_table(; vcf_file, vcf_table, fasta_file)\n\n\n\n\n\n\n","category":"method"},{"location":"#Mycelia.xam_to_contig_mapping_stats-Tuple{Any}","page":"Home","title":"Mycelia.xam_to_contig_mapping_stats","text":"xam_to_contig_mapping_stats(xam) -> Any\n\n\n\n\n\n\n","category":"method"}]
}
